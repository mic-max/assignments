"3.0.0.24"
! 

PRealWidgetControl subclass: #PUpDown
  instanceVariableNames: ''
  classVariableNames: ''
  poolDictionaries: ''!   

PRealWidgetControl subclass: #PTreeView
  instanceVariableNames: ''
  classVariableNames: ''
  poolDictionaries: 
    ' OperatingSystemConstants '! 

PRealWidgetControl subclass: #PTrackBar
  instanceVariableNames: ''
  classVariableNames: ''
  poolDictionaries: 
    ' WinCommonControlConstants '!

PRealWidgetControl subclass: #PTabControl
  instanceVariableNames: 
    ' firstPage '
  classVariableNames: ''
  poolDictionaries: 
    ' OperatingSystemConstants WinCommonControlConstants '!

PRealWidgetControl subclass: #PRichEdit
  instanceVariableNames: ''
  classVariableNames: ''
  poolDictionaries: 
    ' OperatingSystemConstants '! 

PRealWidgetControl subclass: #PProgressBar
  instanceVariableNames: ''
  classVariableNames: ''
  poolDictionaries: ''!  

PRealWidgetControl subclass: #PListView
  instanceVariableNames: ''
  classVariableNames: ''
  poolDictionaries: 
    ' OperatingSystemConstants WinCommonControlConstants '!   

PRealWidgetControl subclass: #PHeader
  instanceVariableNames: ''
  classVariableNames: ''
  poolDictionaries: 
    ' OperatingSystemConstants WinCommonControlConstants '! 

WBAttributeEditor subclass: #WBHeaderEditor
  instanceVariableNames: 
    ' width alignment image label removeButton list '
  classVariableNames: ''
  poolDictionaries: 
    ' ColorConstants OperatingSystemConstants '! 

WBEnhancedAttributeEditor subclass: #WBListViewEditor
  instanceVariableNames: ''
  classVariableNames: ''
  poolDictionaries: 
    ' ColorConstants OperatingSystemConstants '!

WBEnhancedAttributeEditor subclass: #WBProgressBarEditor
  instanceVariableNames: ''
  classVariableNames: ''
  poolDictionaries: 
    ' ColorConstants OperatingSystemConstants '! 

WBEnhancedAttributeEditor subclass: #WBRichTextEditor
  instanceVariableNames: 
    ' contents '
  classVariableNames: ''
  poolDictionaries: 
    ' ColorConstants OperatingSystemConstants '!

WBEnhancedAttributeEditor subclass: #WBTabControlEditor
  instanceVariableNames: 
    ' label pageClass toolTip pages removeButton image '
  classVariableNames: ''
  poolDictionaries: 
    ' ColorConstants OperatingSystemConstants '!  

WBEnhancedAttributeEditor subclass: #WBTrackBarEditor
  instanceVariableNames: ''
  classVariableNames: ''
  poolDictionaries: 
    ' ColorConstants OperatingSystemConstants '!

WBEnhancedAttributeEditor subclass: #WBTreeViewEditor
  instanceVariableNames: ''
  classVariableNames: ''
  poolDictionaries: 
    ' ColorConstants OperatingSystemConstants '!

WBEnhancedAttributeEditor subclass: #WBUpDownEditor
  instanceVariableNames: ''
  classVariableNames: ''
  poolDictionaries: 
    ' ColorConstants OperatingSystemConstants '!  

WBAbstractAddInModule subclass: #WBWindows95AddInModule
  instanceVariableNames: ''
  classVariableNames: ''
  poolDictionaries: ''! 

PRealWidgetControl subclass: #PStatusWindow
  instanceVariableNames: ''
  classVariableNames: ''
  poolDictionaries: 
    ' OperatingSystemConstants WinCommonControlConstants '!   

WBEnhancedAttributeEditor subclass: #WBStatusWindowEditor
  instanceVariableNames: 
    ' statusFields width contents name type '
  classVariableNames: ''
  poolDictionaries: 
    ' ColorConstants OperatingSystemConstants '!   

WBInterfaceObject subclass: #PSpinButton
  instanceVariableNames: ''
  classVariableNames: ''
  poolDictionaries: 
    ' OperatingSystemConstants '!

!WBStatusWindowEditor methods ! 
enableFields

	(self paneNamed: 'removeButton') enable.
	name enable.
	contents enable.
	width enable.! !

!WBStatusWindowEditor methods ! 
createViews

	"WARNING!! This method was automatically generated by 
	WindowBuilder. Code you add here which does not conform to 
	the WindowBuilder API will probably be lost the next time 
	you save your layout definition."

	| addButton autoButton cancelButton contentsLabel 
	downButton height1 mainView minimumHeightLabel nameLabel 
	okButton removeButton sizeGrip1 statusFieldGroup 
	statusFieldsLabel typeLabel upButton widthLabel xDU yDU |
	
	#generated.
	xDU := (SysFont width + 1 roundTo: 2) / (SysFont width roundTo: 2).
	yDU := 1.
	mainView := self topPaneClass new.
	
		"Instance Variables"
	contents := WBEntryField new.
	name := EnhancedEntryField new.
	statusFields := ListBox new.
	type := WBComboBox new.
	width := EnhancedEntryField new.
	
		"Temporary Variables"
	addButton := Button new.
	autoButton := CheckBox new.
	cancelButton := Button new.
	contentsLabel := StaticText new.
	downButton := Button new.
	height1 := EnhancedEntryField new.
	minimumHeightLabel := StaticText new.
	nameLabel := StaticText new.
	okButton := Button new.
	removeButton := Button new.
	sizeGrip1 := CheckBox new.
	statusFieldGroup := GroupBox new.
	statusFieldsLabel := StaticText new.
	typeLabel := StaticText new.
	upButton := Button new.
	widthLabel := StaticText new.
	
	mainView
		owner: self;
		setName: 'mainView';
		alignRelativeToScreen;
		addModalBorderStyle;
		labelWithoutPrefix: 'StatusWindow Editor';
		noSmalltalkMenuBar;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 1/2 / ((SysFont width roundTo: 2) / 4);
				leftInset: -120 * xDU;
				topRatio: 1/2 / (SysFont height / 8);
				topInset: -50 * yDU;
				rightRatio: 1/2 / ((SysFont width roundTo: 2) / 4);
				rightInset: -120 * xDU;
				bottomRatio: 1/2 / (SysFont height / 8);
				bottomInset: -50 * yDU).
	self addView: mainView.
	
	statusFields "ListBox"
		owner: self;
		setName: 'statusFields';
		when: #clicked: send: #select: to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 2 * xDU;
				topRatio: 0; topInset: 12 * yDU;
				rightRatio: 0; rightInset: -82 * xDU;
				bottomRatio: 0; bottomInset: -78 * yDU);
		startGroup;
		font: SysFont.
	mainView
		addSubpane: statusFields;
		subPaneWithFocus: statusFields.
	
	addButton "Button"
		owner: self;
		setName: 'addButton';
		when: #clicked send: #add to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 86 * xDU;
				topRatio: 0; topInset: 12 * yDU;
				rightRatio: 0; rightInset: -126 * xDU;
				bottomRatio: 0; bottomInset: -26 * yDU);
		contents: 'Add';
		startGroup;
		font: SysFont.
	mainView addSubpane: addButton.
	
	removeButton "Button"
		owner: self;
		setName: 'removeButton';
		when: #clicked send: #remove to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 86 * xDU;
				topRatio: 0; topInset: 28 * yDU;
				rightRatio: 0; rightInset: -126 * xDU;
				bottomRatio: 0; bottomInset: -42 * yDU);
		contents: 'Remove';
		startGroup;
		font: SysFont.
	mainView addSubpane: removeButton.
	
	upButton "Button"
		owner: self;
		setName: 'upButton';
		when: #clicked send: #up to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 86 * xDU;
				topRatio: 0; topInset: 48 * yDU;
				rightRatio: 0; rightInset: -126 * xDU;
				bottomRatio: 0; bottomInset: -62 * yDU);
		contents: 'Up';
		startGroup;
		font: SysFont.
	mainView addSubpane: upButton.
	
	downButton "Button"
		owner: self;
		setName: 'downButton';
		when: #clicked send: #down to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 86 * xDU;
				topRatio: 0; topInset: 64 * yDU;
				rightRatio: 0; rightInset: -126 * xDU;
				bottomRatio: 0; bottomInset: -78 * yDU);
		contents: 'Down';
		startGroup;
		font: SysFont.
	mainView addSubpane: downButton.
	
	name "EnhancedEntryField"
		owner: self;
		setName: 'name';
		when: #textChanged: send: #setName: to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 170 * xDU;
				topRatio: 0; topInset: 18 * yDU;
				rightRatio: 0; rightInset: -234 * xDU;
				bottomRatio: 0; bottomInset: -30 * yDU);
		startGroup;
		font: SysFont;
		character: #okAlphaNumericNoSpace:.
	mainView addSubpane: name.
	
	contents "WBEntryField"
		owner: self;
		setName: 'contents';
		when: #textChanged: send: #setContents: to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 170 * xDU;
				topRatio: 0; topInset: 32 * yDU;
				rightRatio: 0; rightInset: -234 * xDU;
				bottomRatio: 0; bottomInset: -44 * yDU);
		startGroup;
		font: SysFont.
	mainView addSubpane: contents.
	
	width "EnhancedEntryField"
		owner: self;
		setName: 'width';
		when: #textChanged: send: #setWidth: to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 170 * xDU;
				topRatio: 0; topInset: 46 * yDU;
				rightRatio: 0; rightInset: -202 * xDU;
				bottomRatio: 0; bottomInset: -58 * yDU);
		startGroup;
		font: SysFont;
		character: #okInteger:.
	mainView addSubpane: width.
	
	autoButton "CheckBox"
		owner: self;
		setName: 'autoButton';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 206 * xDU;
				topRatio: 0; topInset: 46 * yDU;
				rightRatio: 0; rightInset: -234 * xDU;
				bottomRatio: 0; bottomInset: -58 * yDU);
		contents: 'Auto';
		startGroup;
		font: SysFont.
	mainView addSubpane: autoButton.
	
	type "WBComboBox"
		owner: self;
		setName: 'type';
		when: #changed: send: #setType: to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 170 * xDU;
				topRatio: 0; topInset: 60 * yDU;
				rightRatio: 0; rightInset: -234 * xDU;
				bottomRatio: 0; bottomInset: -72 * yDU);
		dropDownList;
		addDynamicListSizeStyle;
		startGroup;
		font: SysFont.
	mainView addSubpane: type.
	
	height1 "EnhancedEntryField"
		owner: self;
		setName: 'Height';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 54 * xDU;
				topRatio: 0; topInset: 84 * yDU;
				rightRatio: 0; rightInset: -82 * xDU;
				bottomRatio: 0; bottomInset: -96 * yDU);
		startGroup;
		font: SysFont;
		character: #okInteger:.
	mainView addSubpane: height1.
	
	sizeGrip1 "CheckBox"
		owner: self;
		setName: 'SizeGrip';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 86 * xDU;
				topRatio: 0; topInset: 84 * yDU;
				rightRatio: 0; rightInset: -152 * xDU;
				bottomRatio: 0; bottomInset: -94 * yDU);
		contents: 'Show Size Grip';
		startGroup;
		font: SysFont.
	mainView addSubpane: sizeGrip1.
	
	okButton "Button"
		owner: self;
		setName: 'okButton';
		when: #clicked send: #ok to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 162 * xDU;
				topRatio: 0; topInset: 82 * yDU;
				rightRatio: 0; rightInset: -198 * xDU;
				bottomRatio: 0; bottomInset: -98 * yDU);
		defaultPushButton;
		contents: 'OK';
		startGroup;
		font: SysFont.
	mainView addSubpane: okButton.
	
	cancelButton "Button"
		owner: self;
		setName: 'cancelButton';
		when: #clicked send: #cancel to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 202 * xDU;
				topRatio: 0; topInset: 82 * yDU;
				rightRatio: 0; rightInset: -238 * xDU;
				bottomRatio: 0; bottomInset: -98 * yDU);
		cancelPushButton;
		contents: 'Cancel';
		startGroup;
		font: SysFont.
	mainView addSubpane: cancelButton.
	
	statusFieldsLabel "StaticText"
		owner: self;
		setName: 'statusFieldsLabel';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 2 * xDU;
				topRatio: 0; topInset: 4 * yDU;
				rightRatio: 0; rightInset: -78 * xDU;
				bottomRatio: 0; bottomInset: -12 * yDU);
		contents: 'Status Fields';
		startGroup;
		noTabStop;
		font: SysFont.
	mainView addSubpane: statusFieldsLabel.
	
	nameLabel "StaticText"
		owner: self;
		setName: 'nameLabel';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 132 * xDU;
				topRatio: 0; topInset: 20 * yDU;
				rightRatio: 0; rightInset: -168 * xDU;
				bottomRatio: 0; bottomInset: -28 * yDU);
		rightJustified;
		contents: 'Name:';
		startGroup;
		noTabStop;
		font: SysFont.
	mainView addSubpane: nameLabel.
	
	contentsLabel "StaticText"
		owner: self;
		setName: 'contentsLabel';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 132 * xDU;
				topRatio: 0; topInset: 34 * yDU;
				rightRatio: 0; rightInset: -168 * xDU;
				bottomRatio: 0; bottomInset: -42 * yDU);
		rightJustified;
		contents: 'Contents:';
		startGroup;
		noTabStop;
		font: SysFont.
	mainView addSubpane: contentsLabel.
	
	widthLabel "StaticText"
		owner: self;
		setName: 'widthLabel';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 132 * xDU;
				topRatio: 0; topInset: 48 * yDU;
				rightRatio: 0; rightInset: -168 * xDU;
				bottomRatio: 0; bottomInset: -56 * yDU);
		rightJustified;
		contents: 'Width:';
		startGroup;
		noTabStop;
		font: SysFont.
	mainView addSubpane: widthLabel.
	
	minimumHeightLabel "StaticText"
		owner: self;
		setName: 'minimumHeightLabel';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 8 * xDU;
				topRatio: 0; topInset: 86 * yDU;
				rightRatio: 0; rightInset: -52 * xDU;
				bottomRatio: 0; bottomInset: -94 * yDU);
		rightJustified;
		contents: 'Min Height:';
		startGroup;
		noTabStop;
		font: SysFont.
	mainView addSubpane: minimumHeightLabel.
	
	typeLabel "StaticText"
		owner: self;
		setName: 'typeLabel';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 132 * xDU;
				topRatio: 0; topInset: 62 * yDU;
				rightRatio: 0; rightInset: -168 * xDU;
				bottomRatio: 0; bottomInset: -70 * yDU);
		rightJustified;
		contents: 'Type:';
		startGroup;
		noTabStop;
		font: SysFont.
	mainView addSubpane: typeLabel.
	
	statusFieldGroup "GroupBox"
		owner: self;
		setName: 'statusFieldGroup';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 130 * xDU;
				topRatio: 0; topInset: 8 * yDU;
				rightRatio: 0; rightInset: -238 * xDU;
				bottomRatio: 0; bottomInset: -78 * yDU);
		contents: 'Status Field';
		startGroup;
		noTabStop;
		font: SysFont.
	mainView addSubpane: statusFieldGroup! !

!WBHeaderEditor class methods !   
wbBasicVersion

	"Private - Answer the WindowBuilder Pro version.
		Generated in: Visual Smalltalk Enterprise 3.1.0 Win32"

	^3.1! !

!PTrackBar methods ! 
listEditorLabel

    ^'Tick Position Editor'! !

!WBStatusWindowEditor methods !  
setContents: aString

	| item newWidth |
	(item := statusFields selectedItem ifNil: [^self]) contents: aString.
	(self paneNamed: 'autoButton') selection
		ifTrue: [
			width contents: (newWidth := SysFont wbStringWidth: aString) asString.
			item width: newWidth + 8].! !

!PRichEdit methods !   
displayWith: aPen clipRect: clipRect

    | innerRect unformattedContents region |
    innerRect := ([self wbRealWidget style bitIsOn: WsBorder] on: Error do: [true])
        ifTrue: [
            self lookPolicy
                displayWithBorder: aPen
                rect: self rect
                backColor: self backColor]
        ifFalse: [self displayWithNoBorder: aPen].
    (unformattedContents := self unformattedContents) isEmpty
        ifFalse: [
            region := aPen setClipRect: (clipRect intersect: innerRect).
            aPen
                backColor: self backColor;
                setTextAlign: TaTop;
                winDrawText: unformattedContents
                    in: innerRect
                    format: SsLeft | DtWordbreak;
                destroyRegion: region].! !

!WBHeaderEditor methods ! 
setImage: selectedItem

    | theImage |
    (theImage := selectedItem asSymbol) == self dynamicString
        ifTrue: [theImage := nil].
    (list selectedItem ifNil: [^self]) image: (WBBitmaps at: theImage ifAbsent: [nil]).! !

!WBWindows95AddInModule class methods !  
commonName

    ^'Windows 95 Widgets'! !

!PTabControl methods !  
attributeEditor

    ^WBTabControlEditor! !

!PHeader methods !   
attributeEditor

    ^WBHeaderEditor! !

!PTrackBar methods ! 
postEdit: aWindowBuilder

    self readSpecificsFrom: self wbRealWidget.
    aWindowBuilder updateStyle: aWindowBuilder currentWidget.
    ^true! !

!PSpinButton methods ! 
preferredLabelOrientation

    ^#left! !

!WBHeaderEditor methods !   
setLabel: aString

    | item |
    (item := list selectedItem ifNil: [^self]) object: aString.
    list
        contents: list contents;
        selectItem: item.! !

!PStatusWindow methods !  
height

    realWidget isNil ifTrue: [^super height].
    ^self font height + 7 max: self wbRealWidget wbHeight! !

!PTrackBar methods ! 
setStyleFrom: aRealStyle
    "Do Nothing"! !

!PHeader methods !   
suggestedSize

    ^self rect width @ (self font height + 14).! !

!PTrackBar methods !   
usesForeColor

    ^false! !

!WBWindows95AddInModule class methods ! 
comment

    ^'Adds the Windows 95 widgets
to the WBPro palette. Warning:
Win95 widgets may or may not
be portable to OS/2'! !

!PSpinButton methods ! 
suggestedSize

    self contents isEmpty
        ifTrue: [^self height * 2 @ (self font height + 8)].
    ^(self contents inject: self height into: [:max :string |
        max max: (self font wbStringWidth: string)]) + self height @ (self font height + 8).! !

!WBUpDownEditor class methods !   
wbBasicVersion

	"Private - Answer the WindowBuilder Pro version.
		Generated in: Visual Smalltalk Enterprise 3.1.0 Win32"

	^3.1! !

!PTabControl methods !   
supportedInDialogs

    ^false! !

!PRichEdit methods !   
readSpecificsFrom: aPane

    self style: (aPane isReadOnly
        ifTrue: [
            aPane hasBorderStyle
                ifTrue: [#readOnly]
                ifFalse: [#readOnlyNoBorder]]
        ifFalse: [
            aPane hasBorderStyle
                ifTrue: [#defaultStyle]
                ifFalse: [#noBorder]]).! !

!WBHeaderEditor methods !
setWidth: aString

    | theWidth |
    aString asSymbol == self dynamicString
        ifTrue: [theWidth := nil]
        ifFalse: [theWidth := aString asNumber asInteger].
    (list selectedItem ifNil: [^self]) width: theWidth.! !

!PStatusWindow methods !  
usesFraming

    ^false! !

!PHeader methods !
styles

    ^#(#buttons #noButtons #noBorder #noButtonsOrBorder)! !

!WBStatusWindowEditor methods !  
setName: aString

    | item |
    (item := statusFields selectedItem ifNil: [^self]) name: aString asSymbol.
    statusFields
        contents: statusFields contents;
        selectItem: item.! !

!PHeader methods !  
headings

    ^self wbRealWidget headings! !

!PRichEdit methods !
postEdit: aWindowBuilder

    self readSpecificsFrom: self wbRealWidget.
    aWindowBuilder updateStyle: aWindowBuilder currentWidget.
    ^true! !

!PTabControl methods ! 
backColor: aColor

    super backColor: aColor.
    (firstPage notNil and: [firstPage isCompositePane])
        ifTrue: [firstPage backColor: aColor].! !

!PProgressBar methods !  
displayWith: aPen clipRect: clipRect

    | innerRect percentage corner tickSize numTicks region |
    innerRect := self lookPolicy
        displayWithMinorBorder: aPen
        rect: self rect
        backColor: self backColor.
    aPen
        fill: innerRect color: Color gray;
        foreColor: Color black;
        lineFrom: (innerRect bottomLeft left: 1) to: (innerRect bottomRight right: 1);
        lineFrom: (innerRect topRight up: 1) to: innerRect bottomRight.
    percentage :=
        (self wbRealWidget position - self wbRealWidget minimum) /
        (self wbRealWidget maximum - self wbRealWidget minimum).
    corner := innerRect topLeft rightAndDown: 1.
    tickSize := ((innerRect height - 2) * 2 // 3) @ (innerRect height - 2).
    numTicks := ((innerRect width * percentage) / (tickSize x + 2)) ceiling.
    region := aPen setClipRect: (clipRect intersect: (innerRect insetBy: (1@1 extent: 1@0))).
    1 to: numTicks do: [:i |
        aPen fill: (corner rightBottom: (corner rightAndDown: tickSize)) color: Color darkBlue.
        corner := corner right: tickSize x + 2].
    aPen destroyRegion: region.! !

!PSpinButton methods ! 
displayWith: aPen clipRect: clipRect

    | fieldRect spinRect innerRect region displayContents justification |
    fieldRect := Rectangle
        leftTop: self rect leftTop
        rightBottom: (self rect rightBottom left: self rect height // 2).
    innerRect := (self lookPolicy
        displayWithBorder: aPen
        rect: fieldRect
        backColor: self backColor) insetBy: 1.
    spinRect := Rectangle
        leftTop: (self rect rightTop left: self rect height // 2)
        rightBottom: (self rect rightTop down: self rect height // 2).
    self lookPolicy drawUpArrowWith: aPen at: spinRect.
    spinRect := Rectangle
        leftTop: (self rect rightBottom leftAndUp: self rect height // 2)
        rightBottom: self rect rightBottom.
    self lookPolicy drawDownArrowWith: aPen at: spinRect.
    "Draw the initialization text"
    (self contents isNil or: [self contents isEmpty])
        ifFalse: [
            displayContents := self contents first.
            justification := self justification == #leftJustified
                ifTrue: [SsLeftnowordwrap]
                ifFalse: [
                    self justification == #rightJustified
                        ifTrue: [SsRight]
                        ifFalse: [SsCenter]].
            region := aPen setClipRect: innerRect.
            aPen
                font: self font;
                foreColor: self foreColor;
                backColor: self backColor;
                setTextAlign: TaTop;
                winDrawText: displayContents in: innerRect format: justification.
            aPen destroyRegion: region].! !

!PSpinButton methods !
justification

    (self wbRealWidget hasStyle: EsCenter) ifTrue: [^#centered].
    (self wbRealWidget hasStyle: EsRight) ifTrue: [^#rightJustified].
    ^#leftJustified
! !

!WBHeaderEditor methods !   
ok

    thePane wbRealWidget headingsAttribute: list contents.
    self close.! !

!WBStatusWindowEditor methods !   
disableFields

	(self paneNamed: 'removeButton') disable.
	name disable.
	contents disable.
	width disable.! !

!PUpDown methods ! 
styles

    ^#(#vertical #horizontal)! !

!PTrackBar methods !
listEditorValidation

    ^#okPositiveInteger:! !

!WBTrackBarEditor class methods !  
wbBasicVersion

	"Private - Answer the WindowBuilder Pro version.
		Generated in: Visual Smalltalk Enterprise 3.1.0 Win32"

	^3.1! !

!WBTabControlEditor methods !
newClass

    self wbEditorClass new openCompositePane! !

!PTrackBar methods !   
ticksOnBoth

    ^self wbRealWidget hasStyle: TbsBoth! !

!PTrackBar methods !
ticksOnLeft

    ^self wbRealWidget hasStyle: TbsLeft! !

!WBProgressBarEditor class methods !
wbBasicVersion

	"Private - Answer the WindowBuilder Pro version.
		Generated in: Visual Smalltalk Enterprise 3.1.0 Win32"

	^3.1! !

!WBStatusWindowEditor methods !  
initWindow

	| fields |
	statusFields
		printSelector: #name;
		contents: (fields := thePane wbRealWidget wbContents
			collect: [:page | page copy]).
	type contents: #(#caveIn #popOut #noBorder #ownerDraw).
	fields isEmpty
		ifTrue: [self disableFields]
		ifFalse: [
			statusFields selectItem: fields first.
			self enableFields.
			self select: fields first].! !

!WBWindows95AddInModule class methods ! 
modifyPalette: thePalette
    "Modify the palette"

    self
        insertMenu: #('\uVideoPane' 'VideoPane' '')
            in: thePalette
            after: 'StatusPane';
        insertMenu: #('Windows 95' #addWidget:
            #(
                #('\uColumnListBox' 'ColumnListBox' '')
                #('\uHeader' 'Header' '')
                #('\uListView' 'ListView' '')
                #('\uProgressBar' 'ProgressBar' '')
                #('\uRichEdit' 'RichEdit' '')
                #('Spin \uButton' 'SpinButton' '')
                #('\uStatusWindow' 'StatusWindow' '')
                #('\uTabControl' 'TabControl' '')
                #('Trac\ukBar' 'TrackBar' '')
                #('Tree\uView' 'TreeView' '')
                #('\uUpDown' 'UpDown' '')
            ))
        in: thePalette
        after: 'Composite'.! !

!WBHeaderEditor methods ! 
up

    | item index |
    (item := list selectedItem) ifNil: [^self].
    index := list indexOf: item.
    index == 1 ifTrue: [^self].
    list contents
        removeIndex: index;
        add: item beforeIndex: index - 1.
    list
        contents: list contents;
        selectItem: item.! !

!PSpinButton methods !   
backColor: aColor

    self wbRealWidget backColor: aColor.! !

!PUpDown methods !
displayWith: aPen clipRect: clipRect

    self isHorizontal
        ifTrue: [
            self lookPolicy
                drawLeftArrowWith: aPen at: (self rect leftTop rightBottom: (self rect leftBottom right: self rect width // 2));
                drawRightArrowWith: aPen at: ((self rect rightTop left: self rect width // 2) rightBottom: self rect rightBottom)]
        ifFalse: [
            self lookPolicy
                drawUpArrowWith: aPen at: (self rect leftTop rightBottom: (self rect rightTop down: self rect height // 2));
                drawDownArrowWith: aPen at: ((self rect leftBottom up: self rect height // 2) rightBottom: self rect rightBottom)].! !

!WBTabControlEditor methods !   
enableFields

	removeButton enable.
	label enable.
	image enable.
	toolTip enable.
	pageClass enable.
	(self paneNamed: 'otherButton') enable.
	(self paneNamed: 'editButton') enable.
	(self paneNamed: 'newButton') enable.! !

!WBTabControlEditor methods !
setPageClassList

    pageClass contents:
        #(#'<none>'),
        (((CompositePane allSubclasses
            reject: [:cls | cls isWBInternalClass])
            collect: [:cls | cls name])
            asSortedCollection asArray).! !

!WBTabControlEditor methods !
down

    | item index |
    (item := pages selectedItem) ifNil: [^self].
    index := pages indexOf: item.
    index == pages contents size ifTrue: [^self].
    pages contents
        removeIndex: index;
        add: item afterIndex: index.
    pages
        contents: pages contents;
        selectItem: item.! !

!PUpDown methods !   
usesFont

    ^false! !

!RichEdit class methods !
wbConstructPropertyManager
    "Construct the WindowBuilder property manager
        based on the Digitalk property manager."

    #addedByOSI.
    ^super wbConstructPropertyManager
        add:
            (StylePropertyAccessor new
                name: 'Read Only';
                style: 'EsReadonly';
                pool: OperatingSystemConstants;
                wbAddStyle: #readOnly);
        add:
            (StylePropertyAccessor new
                name: 'Border';
                style: 'WsBorder';
                pool: OperatingSystemConstants;
                wbAddStyle: #addBorderStyle;
                wbRemoveStyle: #removeBorderStyle);
        add:
            (SelectorPropertyAccessor new
                name: 'Edit Contents';
                get: #wbFormattedContents;
                set: #formattedContents:;
                format: 'String');
        addNames: #('Edit Contents') toPage: 'General';
        addNames: #('Read only' 'Border') toPage: 'Style';
        wbAddEvent: (
            WBEventDescription new
                event: #fileException: ;
                argumentNames: #('aPathName'));
        wbAddEvent: (
            WBEventDescription new
                event: #modifiedIsTrue ;
                argumentNames: #( ));
        yourself! !

!PListView methods !   
widthFor: heading

    ^heading
        widthForString: heading object
        andFont: self font.! !

!PProgressBar methods !  
usesFont

    ^false! !

!WBHeaderEditor methods !
enableFields

    removeButton enable.
    label enable.
    width enable.
    alignment enable.
    image enable.! !

!PStatusWindow methods !   
defaultBackColor

    ^Color buttonFace! !

!WBStatusWindowEditor methods !   
setWidth: aString

    (statusFields selectedItem ifNil: [^self]) width: aString asInteger.! !

!WBTabControlEditor methods ! 
add

    | newItem |
    newItem := TabControlPage new
        label: self emptyString.
    pages contents addLast: newItem.
    pages
        contents: pages contents;
        selectItem: newItem.
    self select: newItem.
    label setFocus.! !

!PTabControl methods !
usesForeColor

    ^false! !

!PSpinButton methods !  
style: newStyle

    style == newStyle ifTrue: [^self].
    style := newStyle.
    self wbRealWidget perform: newStyle asSymbol! !

!WBStatusWindowEditor methods ! 
down

    | item index |
    (item := statusFields selectedItem) ifNil: [^self].
    index := statusFields indexOf: item.
    index == statusFields contents size ifTrue: [^self].
    statusFields contents
        removeIndex: index;
        add: item afterIndex: index.
    statusFields
        contents: statusFields contents;
        selectItem: item.! !

!PTabControl methods ! 
backColor

    ^self wbRealWidget backColor ifNil: [Color gray]! !

!PProgressBar methods !   
attributeEditor

    ^WBProgressBarEditor! !

!PHeader methods !  
allowsHeaderImages

    ^true! !

!PHeader methods !  
usesColor

    ^false! !

!PSpinButton methods !  
contents: aCollectionOfStrings

    super contents: aCollectionOfStrings.
    self wbRealWidget contents: (aCollectionOfStrings isEmpty
        ifTrue: [#('')]
        ifFalse: [aCollectionOfStrings])! !

!PStatusWindow methods !  
usesFocus

    ^false! !

!PTrackBar methods !
drawPointedBoxWith: aPen at: aRect direction: direction

    | bodyRect |
    bodyRect := aRect copy.
    direction == #up
        ifTrue: [bodyRect top: (bodyRect top down: bodyRect width // 2)]
        ifFalse: [
            direction == #down
                ifTrue: [bodyRect bottom: (bodyRect bottom up: bodyRect width // 2)]
                ifFalse: [
                    direction == #left
                        ifTrue: [bodyRect left: (bodyRect left right: bodyRect height // 2)]
                        ifFalse: [
                            direction == #right
                                ifTrue: [bodyRect right: (bodyRect right left: bodyRect height // 2)]]]].
    aPen backColor: Color gray.
    direction == #left
        ifTrue: [
            aPen
                foreColor: Color gray;
                backColor: Color gray;
                polygonFilled: (Array
                    with: (bodyRect leftTop)
                    with: (bodyRect leftBottom)
                    with: (aRect leftCenter left: 1));
                foreColor: Color gray;
                lineFrom: (bodyRect leftTop left: 1) to: (aRect leftCenter left: 1);
                foreColor: Color white;
                lineFrom: (bodyRect leftTop leftAndDown: 1) to: aRect leftCenter;
                foreColor: Color black;
                lineFrom: (bodyRect leftBottom leftAndUp: 1) to: (aRect leftCenter left: 1);
                foreColor: Color darkGray;
                lineFrom: (bodyRect leftBottom leftAndUp: 1@2) to: aRect leftCenter]
        ifFalse: [
            aPen
                foreColor: Color white;
                lineFrom: bodyRect leftTop to: (bodyRect leftBottom up: 1)].
    direction == #up
        ifTrue: [
            aPen
                foreColor: Color gray;
                backColor: Color gray;
                polygonFilled: (Array
                    with: (bodyRect leftTop right: 1)
                    with: (bodyRect rightTop left: 2)
                    with: (aRect topCenter down: 1));
                foreColor: Color white;
                lineFrom: bodyRect leftTop to: aRect centerTop;
                lineFrom: (bodyRect leftTop right: 1) to: (aRect topCenter down: 1);
                foreColor: Color black;
                lineFrom: (bodyRect rightTop left: 1) to: aRect topCenter;
                foreColor: Color darkGray;
                lineFrom: (bodyRect rightTop left: 2) to: (aRect topCenter down: 1)]
        ifFalse: [
            aPen
                foreColor: Color white;
                lineFrom: bodyRect leftTop to: (bodyRect rightTop left: 1)].
    direction == #right
        ifTrue: [
            aPen
                foreColor: Color gray;
                backColor: Color gray;
                polygonFilled: (Array
                    with: (bodyRect rightTop left: 1)
                    with: (bodyRect rightBottom left: 1)
                    with: (aRect rightCenter left: 1));
                foreColor: Color white;
                lineFrom: (bodyRect rightTop left: 1) to: (aRect rightCenter left: 1);
                foreColor: Color black;
                lineFrom: (bodyRect rightBottom leftAndUp: 1) to: (aRect rightCenter left: 1);
                foreColor: Color darkGray;
                lineFrom: (bodyRect rightBottom leftAndUp: 1@2) to: (aRect rightCenter left: 2)]
        ifFalse: [
            aPen
                foreColor: Color black;
                lineFrom: (bodyRect rightTop left: 1) to: (bodyRect rightBottom leftAndUp: 1);
                foreColor: Color darkGray;
                lineFrom: (bodyRect rightTop leftAndDown: 2@1) to: (bodyRect rightBottom leftAndUp: 2)].
    direction == #down
        ifTrue: [
            aPen
                foreColor: Color gray;
                backColor: Color gray;
                polygonFilled: (Array
                    with: (bodyRect leftBottom rightAndUp: 1@2)
                    with: (bodyRect rightBottom leftAndUp: 2@2)
                    with: (aRect bottomCenter up: 3));
                foreColor: Color white;
                lineFrom: (bodyRect leftBottom up: 2) to: (aRect bottomCenter up: 2);
                lineFrom: (bodyRect leftBottom rightAndUp: 1@2) to: (aRect bottomCenter up: 3);
                foreColor: Color black;
                lineFrom: (bodyRect rightBottom leftAndUp: 1@2) to: (aRect bottomCenter up: 2);
                foreColor: Color darkGray;
                lineFrom: (bodyRect rightBottom leftAndUp: 2@2) to: (aRect bottomCenter up: 3)]
        ifFalse: [
            aPen
                foreColor: Color black;
                lineFrom: (bodyRect leftBottom up: 1) to: (bodyRect rightBottom up: 1);
                foreColor: Color darkGray;
                lineFrom: (bodyRect leftBottom rightAndUp: 1@2) to: (bodyRect rightBottom leftAndUp: 1@2)].
    aPen fill: (bodyRect insetBy: (1@1 extent: 1@1)) color: Color gray.! !

!PProgressBar methods ! 
defaultSize

    ^200 @ self suggestedSize y! !

!PSpinButton methods !   
realBackColor

    ^self backColor! !

!PTrackBar methods !   
displayWith: aPen clipRect: clipRect

    aPen fill: self rect color: self backColor.
    self isVertical
        ifTrue: [self displayVerticalWith: aPen]
        ifFalse: [self displayHorizontalWith: aPen].! !

!PStatusWindow methods !   
displayWith: aPen clipRect: clipRect

	| position bottom textRect width |
	aPen
		fill: rect color: Color buttonFace;
		backColor: Color buttonFace;
		foreColor: Color buttonText.
	position := self rect left @ (self rect top down: 2).
	bottom := self rect bottom up: 1.
	self wbRealWidget wbContents do: [:field |
		(width := field width) negative
			ifTrue: [width := (self rect right - position x) abs].
		field type == #caveIn
			ifTrue: [
				aPen
					foreColor: Color darkGray;
					lineFrom: position to: (position x right: width - 1) @ position y;
					lineFrom: position to: position x @ bottom;
					foreColor: Color white;
					lineFrom: position x @ bottom to: (position x right: width - 1) @ bottom;
					lineFrom: (position x right: width - 1) @ position y to: (position x right: width - 1) @ (bottom down: 1)].
		field type == #popOut
			ifTrue: [
				aPen
					foreColor: Color white;
					lineFrom: position to: (position x right: width - 1) @ position y;
					lineFrom: position to: position x @ bottom;
					foreColor: Color darkGray;
					lineFrom: position x @ bottom to: (position x right: width - 1) @ bottom;
					lineFrom: (position x right: width - 1) @ position y to: (position x right: width - 1) @ (bottom down: 1)].
		textRect := (position x right: 3) @ (self rect center y up: self font height // 2) extentFromLeftTop: width @ self font height.
		aPen
			font: self font;
			foreColor: Color buttonText;
			setTextAlign: TaTop;
			winDrawText: field contents 
				in: textRect 
				format: self lookPolicy leftJustification.
		position := position right: field width + 2].
	self hasSizeGrip
		ifTrue: [
			position := self rect bottomRight.
			aPen
				foreColor: Color gray;
				lineFrom: (position left: 2) to: (position up: 2).
			0 to: 2 do: [:num |
				aPen
					foreColor: Color darkGray;
					lineFrom: (position left: 4 * num + 3) to: (position up: 4 * num + 3);
					lineFrom: (position left: 4 * num + 4) to: (position up: 4 * num + 4);
					foreColor: Color white;
					lineFrom: (position left: 4 * num + 5) to: (position up: 4 * num + 5);
					foreColor: Color gray;
					lineFrom: (position left: 4 * num + 6) to: (position up: 4 * num + 6)]].! !

!UpDown class methods !   
wbConstructPropertyManager
    "Construct the WindowBuilder property manager
        based on the Digitalk property manager."

    #addedByOSI.
    ^super wbConstructPropertyManager
        add: (SelectorPropertyAccessor new name: 'Wrap'; get: #wrap; set: #wrap: ; format: 'Boolean');
        add:
            (StylePropertyAccessor new
                name: 'Horizontal';
                style: 'UdsHorz';
                pool: WinCommonControlConstants;
                wbAddStyle: #horizontal);
        wbAddEvent: (
            WBEventDescription new
                event: #changing: ;
                argumentNames: #('position'));
        yourself! !

!WBRichTextEditor methods ! 
changeParagraph

    contents changeParagraph! !

!WBHeaderEditor methods !   
add

    | newItem |
    newItem := HeaderItem new
        object: self emptyString;
        alignment: #left.
    list contents addLast: newItem.
    list
        contents: list contents;
        selectItem: newItem.
    self select: newItem.
    label setFocus.! !

!WBStatusWindowEditor methods !  
ok

    thePane wbRealWidget contents: statusFields contents.
    super ok.! !

!PUpDown methods !   
readSpecificsFrom: aPane

    self style: (aPane isHorizontal
        ifTrue: [#horizontal]
        ifFalse: [#vertical]).! !

!Header class methods !  
wbConstructPropertyManager
    "Construct the WindowBuilder property manager
        based on the Digitalk property manager."

    #addedByOSI.
    ^super wbConstructPropertyManager
        add: (StylePropertyAccessor new
            name: 'Buttons';
            style: 'HdsButtons';
            pool: WinCommonControlConstants;
            wbRemoveStyle: #'buttons: false');
        add: (SelectorPropertyAccessor new
            name: 'Headings';
            get: #headings;
            set: #headingsAttribute:;
            format: 'OrderedCollection');
        add: (StylePropertyAccessor new
            name: 'Border';
            style: 'WsBorder';
            pool: OperatingSystemConstants;
            wbAddStyle: #addBorderStyle;
            wbRemoveStyle: #removeBorderStyle);
        wbAddEvent: (
            WBEventDescription new
                event: #resizingIndex:to: ;
                argumentNames: #('index' 'newWidth'));
        wbAddEvent: (
            WBEventDescription new
                event: #dividerDoubleClicked: ;
                argumentNames: #('aHeaderItem'));
        wbAddEvent: (
            WBEventDescription new
                event: #needsStringFor: ;
                argumentNames: #('aHeaderItem'));
        wbAddEvent: (
            WBEventDescription new
                event: #dividerDoubleClickedIndex: ;
                argumentNames: #('index'));
        wbAddEvent: (
            WBEventDescription new
                event: #needsWidthFor: ;
                argumentNames: #('aHeaderItem'));
        wbAddEvent: (
            WBEventDescription new
                event: #clickedIndex: ;
                argumentNames: #('index'));
        wbAddEvent: (
            WBEventDescription new
                event: #needsAlignmentFor: ;
                argumentNames: #('aHeaderItem'));
        wbAddEvent: (
            WBEventDescription new
                event: #needsImageFor: ;
                argumentNames: #('aHeaderItem'));
        wbAddEvent: (
            WBEventDescription new
                event: #resizedIndex:to: ;
                argumentNames: #('index' 'newWidth'));
        wbAddEvent: (
            WBEventDescription new
                event: #clicked: ;
                argumentNames: #('aHeaderItem'));
        yourself! !

!PUpDown methods !  
isHorizontal

    ^self wbRealWidget isHorizontal! !

!PListView methods !
displayWith: aPen clipRect: clipRect

	| innerRect point headingRect region clip |
	innerRect := ([self wbRealWidget style bitIsOn: WsBorder] on: Error do: [true])
		ifTrue: [
			self lookPolicy
				displayWithBorder: aPen
				rect: self rect
				backColor: self backColor]
		ifFalse: [self displayWithNoBorder: aPen].
	self style == #reportView ifFalse: [^self].
	innerRect := innerRect leftTop rightBottom: (innerRect rightTop down: self font height + 4).
	point := innerRect leftTop.
	region := aPen setClipRect: (clip := clipRect intersect: innerRect).
	self headings do: [:heading |
		headingRect := point extentFromLeftTop: (heading width ifNil: [self widthFor: heading]) @ innerRect height.
		(headingRect intersects: clip)
			ifTrue: [
				self drawHeading: heading in: (headingRect intersect: clip) with: aPen.
				point := point right: headingRect width]].
	headingRect := point rightBottom: (innerRect rightBottom right: 10).
	(headingRect intersects: clip)
		ifTrue: [self drawHeading: HeaderItem new in: (headingRect intersect: clip) with: aPen].
	aPen destroyRegion: region.! !

!PStatusWindow methods !
readSpecificsFrom: aPane

	self style: ((aPane hasStyle: CcsTop)
		ifTrue: [#top] ifFalse: [#bottom])! !

!PTreeView methods !   
displayWith: aPen clipRect: clipRect

    ([self wbRealWidget style bitIsOn: WsBorder] on: Error do: [true])
        ifTrue: [
            self lookPolicy
                displayWithBorder: aPen
                rect: self rect
                backColor: self backColor]
        ifFalse: [self displayWithNoBorder: aPen].! !

!PStatusWindow methods !   
attributeEditor

    ^WBStatusWindowEditor! !

!PRichEdit methods !   
attributeEditor

    ^WBRichTextEditor! !

!WBTabControlEditor methods !  
disableFields

	removeButton disable.
	label disable; contents: self emptyString.
	image disable; text: self noneString.
	toolTip disable; contents: self emptyString.
	pageClass disable; text: self emptyString.
	(self paneNamed: 'otherButton') disable.
	(self paneNamed: 'editButton') disable.
	(self paneNamed: 'newButton') disable.! !

!WBTrackBarEditor methods !  
setTicks

    WBListEditor new openOn: thePane! !

!PListView methods !   
storeStyleOn: aStream indentString: spaceString

    aStream nextPutAll: ';'; cr; nextPutAll: spaceString.
    self style printOn: aStream.! !

!PUpDown methods !   
setStyleFrom: aRealStyle
    "Do Nothing"! !

!WBStatusWindowEditor methods !  
remove

    (MessageBox confirm: 'Are you sure you want to delete the selected field?')
        ifFalse: [^self].
    statusFields contents remove: statusFields selectedItem ifAbsent: [].
    statusFields contents: statusFields contents.
    self disableFields.! !

!WBWindows95AddInModule class methods ! 
modifiesPalette
    "Does this add-in modify the palette?"

    ^true! !

!WBRichTextEditor methods !
createViews

	"WARNING!! This method was automatically generated by 
	WindowBuilder. Code you add here which does not conform to 
	the WindowBuilder API will probably be lost the next time 
	you save your layout definition."

	| border1 cancelButton clearAllButton contentsLabel 
	mainView note okButton readOnly1 xDU yDU |
	
	#generated.
	xDU := (SysFont width + 1 roundTo: 2) / (SysFont width roundTo: 2).
	yDU := 1.
	mainView := self topPaneClass new.
	
		"Instance Variables"
	contents := RichEdit new.
	
		"Temporary Variables"
	border1 := CheckBox new.
	cancelButton := Button new.
	clearAllButton := Button new.
	contentsLabel := StaticText new.
	note := StaticText new.
	okButton := Button new.
	readOnly1 := CheckBox new.
	
	mainView
		owner: self;
		setName: 'mainView';
		alignRelativeToScreen;
		addModalBorderStyle;
		labelWithoutPrefix: 'Rich Text Editor';
		noSmalltalkMenuBar;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 1/2 / ((SysFont width roundTo: 2) / 4);
				leftInset: -101 * xDU;
				topRatio: 1/2 / (SysFont height / 8);
				topInset: -68 * yDU;
				rightRatio: 1/2 / ((SysFont width roundTo: 2) / 4);
				rightInset: -101 * xDU;
				bottomRatio: 1/2 / (SysFont height / 8);
				bottomInset: -68 * yDU).
	self addView: mainView.
	
	readOnly1 "CheckBox"
		owner: self;
		setName: 'Read Only';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 4 * xDU;
				topRatio: 0; topInset: 2 * yDU;
				rightRatio: 0; rightInset: -52 * xDU;
				bottomRatio: 0; bottomInset: -12 * yDU);
		contents: 'Read Only';
		startGroup;
		font: SysFont.
	mainView
		addSubpane: readOnly1;
		subPaneWithFocus: readOnly1.
	
	border1 "CheckBox"
		owner: self;
		setName: 'Border';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 58 * xDU;
				topRatio: 0; topInset: 2 * yDU;
				rightRatio: 0; rightInset: -96 * xDU;
				bottomRatio: 0; bottomInset: -12 * yDU);
		contents: 'Border';
		startGroup;
		font: SysFont.
	mainView addSubpane: border1.
	
	contents "RichEdit"
		owner: self;
		setName: 'contents';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 4 * xDU;
				topRatio: 0; topInset: 24 * yDU;
				rightRatio: 0; rightInset: -198 * xDU;
				bottomRatio: 0; bottomInset: -104 * yDU);
		startGroup;
		receiveAllWindowMessages;
		setPopupMenu: (
			Menu new
			    title: '';
			    owner: self;
			    appendItem: '&Font...' selector: #changeFont acceleratorString: '';
			    appendItem: '&Color...' selector: #changeColor acceleratorString: '';
			    appendItem: '&Paragraph...' selector: #changeParagraph acceleratorString: '';
			    appendItem: '&Tabs...' selector: #changeTabs acceleratorString: '';
			    appendSeparator;
			    appendItem: 'Clear All' selector: #clearAll acceleratorString: ''
		).
	mainView addSubpane: contents.
	
	clearAllButton "Button"
		owner: self;
		setName: 'clearAllButton';
		when: #clicked send: #clearAll to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 4 * xDU;
				topRatio: 0; topInset: 118 * yDU;
				rightRatio: 0; rightInset: -44 * xDU;
				bottomRatio: 0; bottomInset: -134 * yDU);
		contents: 'Clear All';
		startGroup;
		font: SysFont.
	mainView addSubpane: clearAllButton.
	
	okButton "Button"
		owner: self;
		setName: 'okButton';
		when: #clicked send: #ok to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 122 * xDU;
				topRatio: 0; topInset: 118 * yDU;
				rightRatio: 0; rightInset: -158 * xDU;
				bottomRatio: 0; bottomInset: -134 * yDU);
		defaultPushButton;
		contents: 'OK';
		startGroup;
		font: SysFont.
	mainView addSubpane: okButton.
	
	cancelButton "Button"
		owner: self;
		setName: 'cancelButton';
		when: #clicked send: #cancel to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 162 * xDU;
				topRatio: 0; topInset: 118 * yDU;
				rightRatio: 0; rightInset: -198 * xDU;
				bottomRatio: 0; bottomInset: -134 * yDU);
		cancelPushButton;
		contents: 'Cancel';
		startGroup;
		font: SysFont.
	mainView addSubpane: cancelButton.
	
	contentsLabel "StaticText"
		owner: self;
		setName: 'contentsLabel';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 4 * xDU;
				topRatio: 0; topInset: 16 * yDU;
				rightRatio: 0; rightInset: -148 * xDU;
				bottomRatio: 0; bottomInset: -24 * yDU);
		contents: 'Contents';
		startGroup;
		noTabStop;
		font: SysFont.
	mainView addSubpane: contentsLabel.
	
	note "StaticText"
		owner: self;
		setName: 'note';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 4 * xDU;
				topRatio: 0; topInset: 106 * yDU;
				rightRatio: 0; rightInset: -198 * xDU;
				bottomRatio: 0; bottomInset: -116 * yDU);
		contents: 'Note: The main editor will only display unformatted text.';
		startGroup;
		noTabStop;
		font: SysFont.
	mainView addSubpane: note! !

!TabControlPage methods ! 
pageClass
    #addedByOSI.
    ^(self controls isNil or: [self controls isEmpty])
        ifTrue: [nil]
        ifFalse: [self controls first class]! !

!PSpinButton methods ! 
setStyleFrom: aRealStyle
    "Do Nothing"! !

!PListView methods ! 
styles

    ^#(#listView #iconView #smallIconView #reportView)! !

!PTrackBar methods !   
usesFont

    ^false! !

!PHeader methods !   
style: newStyle

    style == newStyle ifTrue: [^self].
    style := newStyle.
    self wbRealWidget buttons: self hasButtons.
    self hasBorder
        ifTrue: [self wbRealWidget addBorderStyle]
        ifFalse: [self wbRealWidget removeBorderStyle].! !

!RichEdit methods ! 
wrap

    ^true! !

!WBTabControlEditor methods ! 
setImage: selectedItem

    | theImage |
    (theImage := selectedItem asSymbol) == self noneString
        ifTrue: [theImage := nil].
    (pages selectedItem ifNil: [^self]) image: (WBBitmaps at: theImage ifAbsent: [nil]).! !

!WBTabControlEditor methods !  
editClass

	| class |
	((class := Smalltalk 
		at: (pageClass text ifNil: [^nil]) asSymbol
		ifAbsent: [^MessageBox message: 'No page class specified.']) inheritsFrom: CompositePane)
		ifFalse: [^MessageBox message: 'Select a CompositePane class from the page class list.'].
	self wbEditorClass openOn: class.! !

!WBProgressBarEditor methods ! 
createViews

	"WARNING!! This method was automatically generated by 
	WindowBuilder. Code you add here which does not conform to 
	the WindowBuilder API will probably be lost the next time 
	you save your layout definition."

	| cancelButton lineIncrement1 lineIncrementLabel mainView 
	maximum1 minimum1 minimumLabel okButton position1 
	staticText1 staticText2 xDU yDU |
	
	#generated.
	xDU := (SysFont width + 1 roundTo: 2) / (SysFont width roundTo: 2).
	yDU := 1.
	mainView := self topPaneClass new.
	
		"Temporary Variables"
	cancelButton := Button new.
	lineIncrement1 := EntryField new.
	lineIncrementLabel := StaticText new.
	maximum1 := EntryField new.
	minimum1 := EntryField new.
	minimumLabel := StaticText new.
	okButton := Button new.
	position1 := EntryField new.
	staticText1 := StaticText new.
	staticText2 := StaticText new.
	
	mainView
		owner: self;
		setName: 'mainView';
		alignRelativeToScreen;
		addModalBorderStyle;
		labelWithoutPrefix: 'ProgressBar Editor';
		noSmalltalkMenuBar;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 1/2 / ((SysFont width roundTo: 2) / 4);
				leftInset: -52 * xDU;
				topRatio: 1/2 / (SysFont height / 8);
				topInset: -40 * yDU;
				rightRatio: 1/2 / ((SysFont width roundTo: 2) / 4);
				rightInset: -52 * xDU;
				bottomRatio: 1/2 / (SysFont height / 8);
				bottomInset: -40 * yDU).
	self addView: mainView.
	
	lineIncrement1 "EntryField"
		owner: self;
		setName: 'Line Increment';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 62 * xDU;
				topRatio: 0; topInset: 2 * yDU;
				rightRatio: 0; rightInset: -100 * xDU;
				bottomRatio: 0; bottomInset: -14 * yDU);
		startGroup;
		font: SysFont.
	mainView
		addSubpane: lineIncrement1;
		subPaneWithFocus: lineIncrement1.
	
	minimum1 "EntryField"
		owner: self;
		setName: 'Minimum';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 62 * xDU;
				topRatio: 0; topInset: 16 * yDU;
				rightRatio: 0; rightInset: -100 * xDU;
				bottomRatio: 0; bottomInset: -28 * yDU);
		startGroup;
		font: SysFont.
	mainView addSubpane: minimum1.
	
	maximum1 "EntryField"
		owner: self;
		setName: 'Maximum';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 62 * xDU;
				topRatio: 0; topInset: 30 * yDU;
				rightRatio: 0; rightInset: -100 * xDU;
				bottomRatio: 0; bottomInset: -42 * yDU);
		startGroup;
		font: SysFont.
	mainView addSubpane: maximum1.
	
	position1 "EntryField"
		owner: self;
		setName: 'Position';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 62 * xDU;
				topRatio: 0; topInset: 44 * yDU;
				rightRatio: 0; rightInset: -100 * xDU;
				bottomRatio: 0; bottomInset: -56 * yDU);
		startGroup;
		font: SysFont.
	mainView addSubpane: position1.
	
	okButton "Button"
		owner: self;
		setName: 'okButton';
		when: #clicked send: #ok to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 24 * xDU;
				topRatio: 0; topInset: 60 * yDU;
				rightRatio: 0; rightInset: -60 * xDU;
				bottomRatio: 0; bottomInset: -76 * yDU);
		defaultPushButton;
		contents: 'OK';
		startGroup;
		font: SysFont.
	mainView addSubpane: okButton.
	
	cancelButton "Button"
		owner: self;
		setName: 'cancelButton';
		when: #clicked send: #cancel to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 64 * xDU;
				topRatio: 0; topInset: 60 * yDU;
				rightRatio: 0; rightInset: -100 * xDU;
				bottomRatio: 0; bottomInset: -76 * yDU);
		cancelPushButton;
		contents: 'Cancel';
		startGroup;
		font: SysFont.
	mainView addSubpane: cancelButton.
	
	lineIncrementLabel "StaticText"
		owner: self;
		setName: 'lineIncrementLabel';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 4 * xDU;
				topRatio: 0; topInset: 4 * yDU;
				rightRatio: 0; rightInset: -60 * xDU;
				bottomRatio: 0; bottomInset: -12 * yDU);
		rightJustified;
		contents: 'Line Increment:';
		startGroup;
		noTabStop;
		font: SysFont.
	mainView addSubpane: lineIncrementLabel.
	
	minimumLabel "StaticText"
		owner: self;
		setName: 'minimumLabel';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 4 * xDU;
				topRatio: 0; topInset: 18 * yDU;
				rightRatio: 0; rightInset: -60 * xDU;
				bottomRatio: 0; bottomInset: -26 * yDU);
		rightJustified;
		contents: 'Minimum:';
		startGroup;
		noTabStop;
		font: SysFont.
	mainView addSubpane: minimumLabel.
	
	staticText1
		owner: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 4 * xDU;
				topRatio: 0; topInset: 32 * yDU;
				rightRatio: 0; rightInset: -60 * xDU;
				bottomRatio: 0; bottomInset: -40 * yDU);
		rightJustified;
		contents: 'Maximum:';
		startGroup;
		noTabStop;
		font: SysFont.
	mainView addSubpane: staticText1.
	
	staticText2
		owner: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 4 * xDU;
				topRatio: 0; topInset: 46 * yDU;
				rightRatio: 0; rightInset: -60 * xDU;
				bottomRatio: 0; bottomInset: -54 * yDU);
		rightJustified;
		contents: 'Position:';
		startGroup;
		noTabStop;
		font: SysFont.
	mainView addSubpane: staticText2! !

!PTrackBar methods !  
displayVerticalWith: aPen

    | lineRect innerRect percentage barPoint tickStart tickEnd tickPos |
    lineRect := (self rect leftTop rightAndDown: 9@8) rightBottom: (self rect leftBottom rightAndUp: 13@8).
    self ticksOnLeft
        ifTrue: [lineRect := (lineRect leftTop right: 10) rightBottom: (lineRect rightBottom right: 10)].
    self ticksOnBoth
        ifTrue: [lineRect := (lineRect leftTop right: 9) rightBottom: (lineRect rightBottom right: 9)].
    self rangeSelectionEnabled
        ifTrue: [lineRect := (lineRect leftTop left: 4) rightBottom: (lineRect rightBottom right: 7)].
    innerRect := self lookPolicy
        displayWithMinorBorder: aPen
        rect: lineRect
        backColor: self backColor.
    innerRect height > 0
        ifTrue: [aPen fill: innerRect color: Color white].
    percentage :=
        (self wbRealWidget position - self wbRealWidget minimum) /
        (self wbRealWidget maximum - self wbRealWidget minimum).
    barPoint :=  innerRect center x @ ((lineRect top down: 5) + (lineRect height - 11 * percentage)) truncated.
    self ticksOnBoth
        ifTrue: [
            self
                drawPointedBoxWith: aPen
                at: ((barPoint leftAndUp: 10@5) rightBottom: (barPoint rightAndDown: 11@6))
                direction: nil.
            tickStart := (lineRect center x left: 12) @ (lineRect top down: 5).
            tickEnd := (lineRect center x left: 12) @ (lineRect bottom up: 6).
            aPen
                foreColor: Color black;
                lineFrom: tickStart to: (tickStart left: 4);
                lineFrom: tickEnd to: (tickEnd left: 4).
            self ticks do: [:tick |
                percentage :=
                    (tick - self wbRealWidget minimum) /
                    (self wbRealWidget maximum - self wbRealWidget minimum).
                tickPos := tickStart x @ (tickStart y down: ((tickEnd y - tickStart y) abs * percentage) truncated).
                aPen lineFrom: tickPos to: (tickPos left: 3)].
            tickStart := (lineRect center x right: 12) @ (lineRect top down: 5).
            tickEnd := (lineRect center x right: 12) @ (lineRect bottom up: 6).
            aPen
                lineFrom: tickStart to: (tickStart right: 4);
                lineFrom: tickEnd to: (tickEnd right: 4).
            self ticks do: [:tick |
                percentage :=
                    (tick - self wbRealWidget minimum) /
                    (self wbRealWidget maximum - self wbRealWidget minimum).
                tickPos := tickStart x @ (tickStart y down: ((tickEnd y - tickStart y) abs * percentage) truncated).
                aPen lineFrom: tickPos to: (tickPos right: 3)]]
        ifFalse: [
            self ticksOnLeft
                ifTrue: [
                    self
                        drawPointedBoxWith: aPen
                        at: ((barPoint leftAndUp: 11@5) rightBottom: (barPoint rightAndDown: 10@6))
                        direction: #left.
                    tickStart := (lineRect center x left: 13) @ (lineRect top down: 5).
                    tickEnd := (lineRect center x left: 13) @ (lineRect bottom up: 6).
                    aPen
                        foreColor: Color black;
                        lineFrom: tickStart to: (tickStart left: 4);
                        lineFrom: tickEnd to: (tickEnd left: 4).
                    self ticks do: [:tick |
                        percentage :=
                            (tick - self wbRealWidget minimum) /
                            (self wbRealWidget maximum - self wbRealWidget minimum).
                        tickPos := tickStart x @ (tickStart y down: ((tickEnd y - tickStart y) abs * percentage) truncated).
                        aPen lineFrom: tickPos to: (tickPos left: 3)]]
                ifFalse: [
                    self
                        drawPointedBoxWith: aPen
                        at: ((barPoint leftAndUp: 9@5) rightBottom: (barPoint rightAndDown: 13@6))
                        direction: #right.
                    tickStart := (lineRect center x right: 13) @ (lineRect top down: 5).
                    tickEnd := (lineRect center x right: 13) @ (lineRect bottom up: 6).
                    aPen
                        foreColor: Color black;
                        lineFrom: tickStart to: (tickStart right: 4);
                        lineFrom: tickEnd to: (tickEnd right: 4).
                    self ticks do: [:tick |
                        percentage :=
                            (tick - self wbRealWidget minimum) /
                            (self wbRealWidget maximum - self wbRealWidget minimum).
                        tickPos := tickStart x @ (tickStart y down: ((tickEnd y - tickStart y) abs * percentage) truncated).
                        aPen lineFrom: tickPos to: (tickPos right: 3)]]].! !

!PRichEdit methods !  
usesForeColor

    ^false! !

!WBHeaderEditor methods !   
select: selectedItem

    label contents: selectedItem object.
    width setValue: (selectedItem width isNil
        ifTrue: [self dynamicString]
        ifFalse: [selectedItem width asString]).
    alignment setValue: (selectedItem alignment isNil
        ifTrue: [self dynamicString]
        ifFalse: [selectedItem alignment]).
    image setValue: (selectedItem image isNil
        ifTrue: [self dynamicString]
        ifFalse: [WBBitmaps keyAtValue: selectedItem image]).
    self enableFields.! !

!WBHeaderEditor methods ! 
dynamicString

    ^#'<dynamic>'! !

!PTabControl methods !   
firstPage

    self pages isEmpty
        ifTrue: [firstPage := nil]
        ifFalse: [
            (firstPage isNil or: [firstPage realClass ~~ self pages first pageClass])
                ifTrue: [
                    firstPage := ((self pages first pageClass ifNil: [^nil]) wbPseudoClass exampleFrom: self pages first pageClass symbol)
                        framingBlock: [:box | box].
                    firstPage isCompositePane
                        ifTrue: [firstPage backColor: self backColor]]].
    ^firstPage! !

!PStatusWindow methods !
manageChild

	super manageChild.
	(self editor ifNil: [^nil]) layoutForm redraw.! !

!WBTabControlEditor methods !   
createViews

	"WARNING!! This method was automatically generated by 
	WindowBuilder. Code you add here which does not conform to 
	the WindowBuilder API will probably be lost the next time 
	you save your layout definition."

	| addButton buttons1 cancelButton demandLoad1 downButton 
	editButton fixedWidth1 imageLabel labellabel mainView 
	multipleLines1 newButton okButton otherButton 
	pageClassLabel pageGroup pagesLabel raggedRight1 
	toolTipLabel toolTips1 upButton xDU yDU |
	
	#generated.
	xDU := (SysFont width + 1 roundTo: 2) / (SysFont width roundTo: 2).
	yDU := 1.
	mainView := self topPaneClass new.
	
		"Instance Variables"
	image := WBComboBox new.
	label := EntryField new.
	pageClass := WBComboBox new.
	pages := ListBox new.
	removeButton := Button new.
	toolTip := EntryField new.
	
		"Temporary Variables"
	addButton := Button new.
	buttons1 := CheckBox new.
	cancelButton := Button new.
	demandLoad1 := CheckBox new.
	downButton := Button new.
	editButton := Button new.
	fixedWidth1 := CheckBox new.
	imageLabel := StaticText new.
	labellabel := StaticText new.
	multipleLines1 := CheckBox new.
	newButton := Button new.
	okButton := Button new.
	otherButton := Button new.
	pageClassLabel := StaticText new.
	pageGroup := GroupBox new.
	pagesLabel := StaticText new.
	raggedRight1 := CheckBox new.
	toolTipLabel := StaticText new.
	toolTips1 := CheckBox new.
	upButton := Button new.
	
	mainView
		owner: self;
		setName: 'mainView';
		alignRelativeToScreen;
		when: #activated send: #setPageClassList to: self;
		addModalBorderStyle;
		labelWithoutPrefix: 'TabControl Editor';
		noSmalltalkMenuBar;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 1/2 / ((SysFont width roundTo: 2) / 4);
				leftInset: -117 * xDU;
				topRatio: 1/2 / (SysFont height / 8);
				topInset: -70 * yDU;
				rightRatio: 1/2 / ((SysFont width roundTo: 2) / 4);
				rightInset: -117 * xDU;
				bottomRatio: 1/2 / (SysFont height / 8);
				bottomInset: -70 * yDU).
	self addView: mainView.
	
	demandLoad1 "CheckBox"
		owner: self;
		setName: 'Demand Load';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 2 * xDU;
				topRatio: 0; topInset: 2 * yDU;
				rightRatio: 0; rightInset: -62 * xDU;
				bottomRatio: 0; bottomInset: -12 * yDU);
		contents: 'Demand Load';
		startGroup;
		font: SysFont.
	mainView
		addSubpane: demandLoad1;
		subPaneWithFocus: demandLoad1.
	
	raggedRight1 "CheckBox"
		owner: self;
		setName: 'Ragged Right';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 2 * xDU;
				topRatio: 0; topInset: 14 * yDU;
				rightRatio: 0; rightInset: -62 * xDU;
				bottomRatio: 0; bottomInset: -24 * yDU);
		contents: 'Ragged Right';
		startGroup;
		font: SysFont.
	mainView addSubpane: raggedRight1.
	
	toolTips1 "CheckBox"
		owner: self;
		setName: 'Tool Tips';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 92 * xDU;
				topRatio: 0; topInset: 2 * yDU;
				rightRatio: 0; rightInset: -152 * xDU;
				bottomRatio: 0; bottomInset: -12 * yDU);
		contents: 'Tool Tips';
		startGroup;
		font: SysFont.
	mainView addSubpane: toolTips1.
	
	multipleLines1 "CheckBox"
		owner: self;
		setName: 'Multiple Lines';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 92 * xDU;
				topRatio: 0; topInset: 14 * yDU;
				rightRatio: 0; rightInset: -152 * xDU;
				bottomRatio: 0; bottomInset: -24 * yDU);
		contents: 'Multiple Lines';
		startGroup;
		font: SysFont.
	mainView addSubpane: multipleLines1.
	
	fixedWidth1 "CheckBox"
		owner: self;
		setName: 'Fixed Width';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 174 * xDU;
				topRatio: 0; topInset: 2 * yDU;
				rightRatio: 0; rightInset: -234 * xDU;
				bottomRatio: 0; bottomInset: -12 * yDU);
		contents: 'Fixed Width';
		startGroup;
		font: SysFont.
	mainView addSubpane: fixedWidth1.
	
	buttons1 "CheckBox"
		owner: self;
		setName: 'Buttons';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 174 * xDU;
				topRatio: 0; topInset: 14 * yDU;
				rightRatio: 0; rightInset: -234 * xDU;
				bottomRatio: 0; bottomInset: -24 * yDU);
		contents: 'Buttons';
		startGroup;
		font: SysFont.
	mainView addSubpane: buttons1.
	
	pages "ListBox"
		owner: self;
		setName: 'pages';
		when: #clicked: send: #select: to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 2 * xDU;
				topRatio: 0; topInset: 34 * yDU;
				rightRatio: 0; rightInset: -90 * xDU;
				bottomRatio: 0; bottomInset: -116 * yDU);
		startGroup;
		font: SysFont.
	mainView addSubpane: pages.
	
	label "EntryField"
		owner: self;
		setName: 'label';
		when: #textChanged: send: #setLabel: to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 142 * xDU;
				topRatio: 0; topInset: 40 * yDU;
				rightRatio: 0; rightInset: -224 * xDU;
				bottomRatio: 0; bottomInset: -52 * yDU);
		startGroup;
		font: SysFont.
	mainView addSubpane: label.
	
	image "WBComboBox"
		owner: self;
		setName: 'image';
		when: #clicked: send: #setImage: to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 142 * xDU;
				topRatio: 0; topInset: 54 * yDU;
				rightRatio: 0; rightInset: -224 * xDU;
				bottomRatio: 0; bottomInset: -66 * yDU);
		dropDownList;
		addDynamicListSizeStyle;
		startGroup;
		font: SysFont.
	mainView addSubpane: image.
	
	toolTip "EntryField"
		owner: self;
		setName: 'toolTip';
		when: #textChanged: send: #setToolTip: to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 142 * xDU;
				topRatio: 0; topInset: 68 * yDU;
				rightRatio: 0; rightInset: -224 * xDU;
				bottomRatio: 0; bottomInset: -80 * yDU);
		startGroup;
		font: SysFont.
	mainView addSubpane: toolTip.
	
	pageClass "WBComboBox"
		owner: self;
		setName: 'pageClass';
		when: #changed: send: #setPageClass: to: self;
		when: #textChanged: send: #setPageClass: to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 142 * xDU;
				topRatio: 0; topInset: 82 * yDU;
				rightRatio: 0; rightInset: -224 * xDU;
				bottomRatio: 0; bottomInset: -94 * yDU);
		dropDown;
		addDynamicListSizeStyle;
		startGroup;
		font: SysFont.
	mainView addSubpane: pageClass.
	
	otherButton "Button"
		owner: self;
		setName: 'otherButton';
		when: #clicked send: #other to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 100 * xDU;
				topRatio: 0; topInset: 96 * yDU;
				rightRatio: 0; rightInset: -140 * xDU;
				bottomRatio: 0; bottomInset: -112 * yDU);
		contents: 'Other...';
		startGroup;
		font: SysFont.
	mainView addSubpane: otherButton.
	
	editButton "Button"
		owner: self;
		setName: 'editButton';
		when: #clicked send: #editClass to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 142 * xDU;
				topRatio: 0; topInset: 96 * yDU;
				rightRatio: 0; rightInset: -182 * xDU;
				bottomRatio: 0; bottomInset: -112 * yDU);
		contents: 'Edit...';
		startGroup;
		font: SysFont.
	mainView addSubpane: editButton.
	
	newButton "Button"
		owner: self;
		setName: 'newButton';
		when: #clicked send: #newClass to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 184 * xDU;
				topRatio: 0; topInset: 96 * yDU;
				rightRatio: 0; rightInset: -224 * xDU;
				bottomRatio: 0; bottomInset: -112 * yDU);
		contents: 'New...';
		startGroup;
		font: SysFont.
	mainView addSubpane: newButton.
	
	addButton "Button"
		owner: self;
		setName: 'addButton';
		when: #clicked send: #add to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 2 * xDU;
				topRatio: 0; topInset: 120 * yDU;
				rightRatio: 0; rightInset: -28 * xDU;
				bottomRatio: 0; bottomInset: -136 * yDU);
		contents: 'Add';
		startGroup;
		font: SysFont.
	mainView addSubpane: addButton.
	
	upButton "Button"
		owner: self;
		setName: 'upButton';
		when: #clicked send: #up to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 32 * xDU;
				topRatio: 0; topInset: 120 * yDU;
				rightRatio: 0; rightInset: -54 * xDU;
				bottomRatio: 0; bottomInset: -136 * yDU);
		contents: 'Up';
		startGroup;
		font: SysFont.
	mainView addSubpane: upButton.
	
	downButton "Button"
		owner: self;
		setName: 'downButton';
		when: #clicked send: #down to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 58 * xDU;
				topRatio: 0; topInset: 120 * yDU;
				rightRatio: 0; rightInset: -90 * xDU;
				bottomRatio: 0; bottomInset: -136 * yDU);
		contents: 'Down';
		startGroup;
		font: SysFont.
	mainView addSubpane: downButton.
	
	removeButton "Button"
		owner: self;
		setName: 'removeButton';
		when: #clicked send: #remove to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 94 * xDU;
				topRatio: 0; topInset: 120 * yDU;
				rightRatio: 0; rightInset: -134 * xDU;
				bottomRatio: 0; bottomInset: -136 * yDU);
		contents: 'Remove';
		startGroup;
		font: SysFont.
	mainView addSubpane: removeButton.
	
	okButton "Button"
		owner: self;
		setName: 'okButton';
		when: #clicked send: #ok to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 154 * xDU;
				topRatio: 0; topInset: 120 * yDU;
				rightRatio: 0; rightInset: -190 * xDU;
				bottomRatio: 0; bottomInset: -136 * yDU);
		defaultPushButton;
		contents: 'OK';
		startGroup;
		font: SysFont.
	mainView addSubpane: okButton.
	
	cancelButton "Button"
		owner: self;
		setName: 'cancelButton';
		when: #clicked send: #cancel to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 194 * xDU;
				topRatio: 0; topInset: 120 * yDU;
				rightRatio: 0; rightInset: -230 * xDU;
				bottomRatio: 0; bottomInset: -136 * yDU);
		cancelPushButton;
		contents: 'Cancel';
		startGroup;
		font: SysFont.
	mainView addSubpane: cancelButton.
	
	pagesLabel "StaticText"
		owner: self;
		setName: 'pagesLabel';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 2 * xDU;
				topRatio: 0; topInset: 24 * yDU;
				rightRatio: 0; rightInset: -90 * xDU;
				bottomRatio: 0; bottomInset: -32 * yDU);
		contents: 'Pages';
		startGroup;
		noTabStop;
		font: SysFont.
	mainView addSubpane: pagesLabel.
	
	labellabel "StaticText"
		owner: self;
		setName: 'labellabel';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 98 * xDU;
				topRatio: 0; topInset: 42 * yDU;
				rightRatio: 0; rightInset: -140 * xDU;
				bottomRatio: 0; bottomInset: -50 * yDU);
		rightJustified;
		contents: 'Label:';
		startGroup;
		noTabStop;
		font: SysFont.
	mainView addSubpane: labellabel.
	
	toolTipLabel "StaticText"
		owner: self;
		setName: 'toolTipLabel';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 98 * xDU;
				topRatio: 0; topInset: 70 * yDU;
				rightRatio: 0; rightInset: -140 * xDU;
				bottomRatio: 0; bottomInset: -78 * yDU);
		rightJustified;
		contents: 'Tool Tip:';
		startGroup;
		noTabStop;
		font: SysFont.
	mainView addSubpane: toolTipLabel.
	
	pageClassLabel "StaticText"
		owner: self;
		setName: 'pageClassLabel';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 98 * xDU;
				topRatio: 0; topInset: 84 * yDU;
				rightRatio: 0; rightInset: -140 * xDU;
				bottomRatio: 0; bottomInset: -92 * yDU);
		rightJustified;
		contents: 'Page Class:';
		startGroup;
		noTabStop;
		font: SysFont.
	mainView addSubpane: pageClassLabel.
	
	imageLabel "StaticText"
		owner: self;
		setName: 'imageLabel';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 98 * xDU;
				topRatio: 0; topInset: 56 * yDU;
				rightRatio: 0; rightInset: -140 * xDU;
				bottomRatio: 0; bottomInset: -64 * yDU);
		rightJustified;
		contents: 'Image:';
		startGroup;
		noTabStop;
		font: SysFont.
	mainView addSubpane: imageLabel.
	
	pageGroup "GroupBox"
		owner: self;
		setName: 'pageGroup';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 94 * xDU;
				topRatio: 0; topInset: 30 * yDU;
				rightRatio: 0; rightInset: -230 * xDU;
				bottomRatio: 0; bottomInset: -116 * yDU);
		contents: 'Page';
		startGroup;
		noTabStop;
		font: SysFont.
	mainView addSubpane: pageGroup! !

!WBRichTextEditor class methods !   
wbBasicVersion

	"Private - Answer the WindowBuilder Pro version.
		Generated in: Visual Smalltalk Enterprise 3.1.0 Win32"

	^3.1! !

!PListView methods ! 
attributeEditor

    ^WBListViewEditor! !

!PStatusWindow methods !   
framingBlock: framer

	| width |
	width := parentWindow isNil
		ifTrue: [300]
		ifFalse: [parentWindow rect width].
	style == #top
		ifTrue: [
			framingBlock := LayoutFrame new
				leftRatio: 0; leftInset: 0;
				topRatio: 0; topInset: 0;
				rightRatio: 1; rightInset: 0;
				bottomRatio: 0; bottomInset: self height]
		ifFalse: [
			framingBlock := LayoutFrame new
				leftRatio: 0; leftInset: 0;
				topRatio: 1; topInset: self height negated;
				rightRatio: 1; rightInset: 0;
				bottomRatio: 1; bottomInset: 0].! !

!PListView methods !   
allowsHeaderImages

    ^false! !

!PProgressBar methods !
usesColor

    ^false! !

!PTabControl methods !  
displayWith: aPen clipRect: clipRect

	| pages tabHeight tabWidths multipleLines raggedRight
	 tabRows tabRect rows sum innerRect region clip |
	(pages := self pages) isEmpty
		ifTrue: [tabHeight := 0]
		ifFalse: [
			tabHeight := (pages inject: self font height + 5 into: [:max :page |
				page image isNil	
					ifTrue: [max]
					ifFalse: [max max: page image height + 3]])].
	tabWidths := pages collect: [:page |
		((self font wbStringWidth: page label) + (page image isNil
			ifTrue: [0] ifFalse: [page image width + 6]) + 12) max: 54].
	(multipleLines := self wbRealWidget hasStyle: TcsMultiline)
		ifTrue: [
			rows := 0.
			sum := self rect width.
			tabRows := tabWidths collect: [:width |
				sum + width > self rect width
					ifTrue: [
						sum := width.
						rows := rows + 1]
					ifFalse: [sum := sum + width].
				rows]]
		ifFalse: [
			tabRows := tabWidths collect: [:width | 1].
			rows := 1].
	raggedRight := self wbRealWidget hasStyle: TcsRaggedright.
	innerRect := (self rect leftTop down: tabHeight * rows + 2) rightBottom: self rect rightBottom.
	aPen fill: self rect color: Color gray.
	self lookPolicy
		draw3DBoxWith: aPen
		at: innerRect.
	pages isEmpty ifTrue: [^self].
	region := aPen setClipRect: (clip := clipRect intersect: self rect).
	tabRect := (innerRect leftTop rightAndUp: 0 @ tabHeight)
		extentFromLeftTop: (tabWidths first - 1) @ tabHeight.
	2 to: pages size do: [:pg |
		(tabRows at: pg) == (tabRows at: pg - 1)
			ifFalse: [
				tabRect := (innerRect leftTop rightAndUp: 3 @ (tabHeight * (tabRows at: pg)))
					extentFromLeftTop: (tabWidths at: pg) - 4 @ (tabHeight - 1)]
			ifTrue: [tabRect := tabRect rightTop extentFromLeftTop: (tabWidths at: pg) @ (tabHeight + 0)].
		(tabRect intersects: clip)
			ifTrue: [self displayPageTab: (pages at: pg) in: (tabRect intersect: clip) with: aPen]].
	tabRect := (innerRect leftTop rightAndUp: 1@ (tabHeight + 2))
		extentFromLeftTop: tabWidths first @ (tabHeight + 4).
	self displayPageTab: pages first in: tabRect with: aPen.
	self displayFirstPageIn: (innerRect insetBy: 4) with: aPen.
	(tabWidths inject: 0 into: [:s :w | s + w]) > self rect width
		ifTrue: [
			aPen fill: ((self rect rightTop left: 40) rightBottom: innerRect rightTop) color: Color gray.
			self lookPolicy
				drawRightArrowWith: aPen
				at: (innerRect := (innerRect rightTop leftAndUp: 20@22) rightBottom: (innerRect rightTop up: 2)).
			self lookPolicy
				drawLeftArrowWith: aPen
				at: ((innerRect leftTop left: 20) rightBottom: innerRect leftBottom)].
	aPen destroyRegion: region.! !

!WBHeaderEditor methods !
createViews

	"WARNING!! This method was automatically generated by 
	WindowBuilder. Code you add here which does not conform to 
	the WindowBuilder API will probably be lost the next time 
	you save your layout definition."

	| addButton alignmentLabel cancelButton downButton 
	imageLabel itemGroup labelLabel mainView okButton upButton 
	widthLabel xDU yDU |
	
	#generated.
	xDU := (SysFont width + 1 roundTo: 2) / (SysFont width roundTo: 2).
	yDU := 1.
	mainView := self topPaneClass new.
	
		"Instance Variables"
	alignment := WBComboBox new.
	image := WBComboBox new.
	label := WBEntryField new.
	list := ListBox new.
	removeButton := Button new.
	width := WBComboBox new.
	
		"Temporary Variables"
	addButton := Button new.
	alignmentLabel := StaticText new.
	cancelButton := Button new.
	downButton := Button new.
	imageLabel := StaticText new.
	itemGroup := GroupBox new.
	labelLabel := StaticText new.
	okButton := Button new.
	upButton := Button new.
	widthLabel := StaticText new.
	
	mainView
		owner: self;
		setName: 'mainView';
		alignRelativeToScreen;
		addModalBorderStyle;
		labelWithoutPrefix: 'Header Editor';
		noSmalltalkMenuBar;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 1/2 / ((SysFont width roundTo: 2) / 4);
				leftInset: -128 * xDU;
				topRatio: 1/2 / (SysFont height / 8);
				topInset: -49 * yDU;
				rightRatio: 1/2 / ((SysFont width roundTo: 2) / 4);
				rightInset: -128 * xDU;
				bottomRatio: 1/2 / (SysFont height / 8);
				bottomInset: -49 * yDU).
	self addView: mainView.
	
	list "ListBox"
		owner: self;
		setName: 'list';
		when: #clicked: send: #select: to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 2 * xDU;
				topRatio: 0; topInset: 8 * yDU;
				rightRatio: 0; rightInset: -106 * xDU;
				bottomRatio: 0; bottomInset: -74 * yDU);
		startGroup;
		font: SysFont.
	mainView
		addSubpane: list;
		subPaneWithFocus: list.
	
	label "WBEntryField"
		owner: self;
		setName: 'label';
		when: #textChanged: send: #setLabel: to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 154 * xDU;
				topRatio: 0; topInset: 16 * yDU;
				rightRatio: 0; rightInset: -248 * xDU;
				bottomRatio: 0; bottomInset: -28 * yDU);
		startGroup;
		font: SysFont.
	mainView addSubpane: label.
	
	width "WBComboBox"
		owner: self;
		setName: 'width';
		when: #changed: send: #setWidth: to: self;
		when: #textChanged: send: #setWidth: to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 154 * xDU;
				topRatio: 0; topInset: 30 * yDU;
				rightRatio: 0; rightInset: -248 * xDU;
				bottomRatio: 0; bottomInset: -42 * yDU);
		dropDown;
		addDynamicListSizeStyle;
		startGroup;
		font: SysFont.
	mainView addSubpane: width.
	
	alignment "WBComboBox"
		owner: self;
		setName: 'alignment';
		when: #changed: send: #setAlignment: to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 154 * xDU;
				topRatio: 0; topInset: 44 * yDU;
				rightRatio: 0; rightInset: -248 * xDU;
				bottomRatio: 0; bottomInset: -56 * yDU);
		dropDownList;
		addDynamicListSizeStyle;
		startGroup;
		font: SysFont.
	mainView addSubpane: alignment.
	
	image "WBComboBox"
		owner: self;
		setName: 'image';
		when: #changed: send: #setImage: to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 154 * xDU;
				topRatio: 0; topInset: 58 * yDU;
				rightRatio: 0; rightInset: -248 * xDU;
				bottomRatio: 0; bottomInset: -70 * yDU);
		dropDownList;
		addDynamicListSizeStyle;
		startGroup;
		font: SysFont.
	mainView addSubpane: image.
	
	addButton "Button"
		owner: self;
		setName: 'addButton';
		when: #clicked send: #add to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 2 * xDU;
				topRatio: 0; topInset: 78 * yDU;
				rightRatio: 0; rightInset: -34 * xDU;
				bottomRatio: 0; bottomInset: -94 * yDU);
		contents: 'Add';
		startGroup;
		font: SysFont.
	mainView addSubpane: addButton.
	
	upButton "Button"
		owner: self;
		setName: 'upButton';
		when: #clicked send: #up to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 1; leftInset: -218 * xDU;
				topRatio: 1; topInset: -20 * yDU;
				rightRatio: 1; rightInset: 186 * xDU;
				bottomRatio: 1; bottomInset: 4 * yDU);
		contents: 'Up';
		startGroup;
		font: SysFont.
	mainView addSubpane: upButton.
	
	downButton "Button"
		owner: self;
		setName: 'downButton';
		when: #clicked send: #down to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 1; leftInset: -182 * xDU;
				topRatio: 1; topInset: -20 * yDU;
				rightRatio: 1; rightInset: 150 * xDU;
				bottomRatio: 1; bottomInset: 4 * yDU);
		contents: 'Down';
		startGroup;
		font: SysFont.
	mainView addSubpane: downButton.
	
	removeButton "Button"
		owner: self;
		setName: 'removeButton';
		when: #clicked send: #remove to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 110 * xDU;
				topRatio: 0; topInset: 78 * yDU;
				rightRatio: 0; rightInset: -150 * xDU;
				bottomRatio: 0; bottomInset: -94 * yDU);
		contents: 'Remove';
		startGroup;
		font: SysFont.
	mainView addSubpane: removeButton.
	
	okButton "Button"
		owner: self;
		setName: 'okButton';
		when: #clicked send: #ok to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 176 * xDU;
				topRatio: 0; topInset: 78 * yDU;
				rightRatio: 0; rightInset: -212 * xDU;
				bottomRatio: 0; bottomInset: -94 * yDU);
		defaultPushButton;
		contents: 'OK';
		startGroup;
		font: SysFont.
	mainView addSubpane: okButton.
	
	cancelButton "Button"
		owner: self;
		setName: 'cancelButton';
		when: #clicked send: #cancel to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 216 * xDU;
				topRatio: 0; topInset: 78 * yDU;
				rightRatio: 0; rightInset: -252 * xDU;
				bottomRatio: 0; bottomInset: -94 * yDU);
		cancelPushButton;
		contents: 'Cancel';
		startGroup;
		font: SysFont.
	mainView addSubpane: cancelButton.
	
	labelLabel "StaticText"
		owner: self;
		setName: 'labelLabel';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 112 * xDU;
				topRatio: 0; topInset: 18 * yDU;
				rightRatio: 0; rightInset: -152 * xDU;
				bottomRatio: 0; bottomInset: -26 * yDU);
		rightJustified;
		contents: 'Label:';
		startGroup;
		noTabStop;
		font: SysFont.
	mainView addSubpane: labelLabel.
	
	widthLabel "StaticText"
		owner: self;
		setName: 'widthLabel';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 112 * xDU;
				topRatio: 0; topInset: 32 * yDU;
				rightRatio: 0; rightInset: -152 * xDU;
				bottomRatio: 0; bottomInset: -40 * yDU);
		rightJustified;
		contents: 'Width:';
		startGroup;
		noTabStop;
		font: SysFont.
	mainView addSubpane: widthLabel.
	
	alignmentLabel "StaticText"
		owner: self;
		setName: 'alignmentLabel';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 112 * xDU;
				topRatio: 0; topInset: 46 * yDU;
				rightRatio: 0; rightInset: -152 * xDU;
				bottomRatio: 0; bottomInset: -54 * yDU);
		rightJustified;
		contents: 'Alignment:';
		startGroup;
		noTabStop;
		font: SysFont.
	mainView addSubpane: alignmentLabel.
	
	imageLabel "StaticText"
		owner: self;
		setName: 'imageLabel';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 112 * xDU;
				topRatio: 0; topInset: 60 * yDU;
				rightRatio: 0; rightInset: -152 * xDU;
				bottomRatio: 0; bottomInset: -68 * yDU);
		rightJustified;
		contents: 'Image:';
		startGroup;
		noTabStop;
		font: SysFont.
	mainView addSubpane: imageLabel.
	
	itemGroup "GroupBox"
		owner: self;
		setName: 'itemGroup';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 110 * xDU;
				topRatio: 0; topInset: 4 * yDU;
				rightRatio: 0; rightInset: -252 * xDU;
				bottomRatio: 0; bottomInset: -74 * yDU);
		contents: 'Item';
		startGroup;
		noTabStop;
		font: SysFont.
	mainView addSubpane: itemGroup! !

!StatusWindow methods !   
wbContents
		"Answer the receiver's contents,
		i.e., a collection of statusField objects."
	#addedByOSI.
   ^self contents ifNil: [OrderedCollection new] ! !

!WBUpDownEditor methods !   
createViews

	"WARNING!! This method was automatically generated by 
	WindowBuilder. Code you add here which does not conform to 
	the WindowBuilder API will probably be lost the next time 
	you save your layout definition."

	| cancelButton horizontal1 mainView maximum1 minimum1 
	minimumLabel okButton orientationGroup position1 
	staticText1 staticText2 vertical1 wrap1 xDU yDU |
	
	#generated.
	xDU := (SysFont width + 1 roundTo: 2) / (SysFont width roundTo: 2).
	yDU := 1.
	mainView := self topPaneClass new.
	
		"Temporary Variables"
	cancelButton := Button new.
	horizontal1 := RadioButton new.
	maximum1 := EntryField new.
	minimum1 := EntryField new.
	minimumLabel := StaticText new.
	okButton := Button new.
	orientationGroup := GroupBox new.
	position1 := EntryField new.
	staticText1 := StaticText new.
	staticText2 := StaticText new.
	vertical1 := RadioButton new.
	wrap1 := CheckBox new.
	
	mainView
		owner: self;
		setName: 'mainView';
		alignRelativeToScreen;
		addModalBorderStyle;
		labelWithoutPrefix: 'UpDown Editor';
		noSmalltalkMenuBar;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 1/2 / ((SysFont width roundTo: 2) / 4);
				leftInset: -74 * xDU;
				topRatio: 1/2 / (SysFont height / 8);
				topInset: -35 * yDU;
				rightRatio: 1/2 / ((SysFont width roundTo: 2) / 4);
				rightInset: -74 * xDU;
				bottomRatio: 1/2 / (SysFont height / 8);
				bottomInset: -35 * yDU).
	self addView: mainView.
	
	minimum1 "EntryField"
		owner: self;
		setName: 'Minimum';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 42 * xDU;
				topRatio: 0; topInset: 6 * yDU;
				rightRatio: 0; rightInset: -80 * xDU;
				bottomRatio: 0; bottomInset: -18 * yDU);
		startGroup;
		font: SysFont.
	mainView
		addSubpane: minimum1;
		subPaneWithFocus: minimum1.
	
	maximum1 "EntryField"
		owner: self;
		setName: 'Maximum';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 42 * xDU;
				topRatio: 0; topInset: 20 * yDU;
				rightRatio: 0; rightInset: -80 * xDU;
				bottomRatio: 0; bottomInset: -32 * yDU);
		startGroup;
		font: SysFont.
	mainView addSubpane: maximum1.
	
	position1 "EntryField"
		owner: self;
		setName: 'Position';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 42 * xDU;
				topRatio: 0; topInset: 34 * yDU;
				rightRatio: 0; rightInset: -80 * xDU;
				bottomRatio: 0; bottomInset: -46 * yDU);
		startGroup;
		font: SysFont.
	mainView addSubpane: position1.
	
	vertical1 "RadioButton"
		owner: self;
		setName: 'Vertical';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 90 * xDU;
				topRatio: 0; topInset: 14 * yDU;
				rightRatio: 0; rightInset: -134 * xDU;
				bottomRatio: 0; bottomInset: -24 * yDU);
		contents: 'Vertical';
		startGroup;
		font: SysFont.
	mainView addSubpane: vertical1.
	
	horizontal1 "RadioButton"
		owner: self;
		setName: 'Horizontal';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 90 * xDU;
				topRatio: 0; topInset: 28 * yDU;
				rightRatio: 0; rightInset: -134 * xDU;
				bottomRatio: 0; bottomInset: -38 * yDU);
		contents: 'Horizontal';
		noTabStop;
		font: SysFont.
	mainView addSubpane: horizontal1.
	
	wrap1 "CheckBox"
		owner: self;
		setName: 'Wrap';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 8 * xDU;
				topRatio: 0; topInset: 52 * yDU;
				rightRatio: 0; rightInset: -36 * xDU;
				bottomRatio: 0; bottomInset: -64 * yDU);
		contents: 'Wrap';
		startGroup;
		font: SysFont.
	mainView addSubpane: wrap1.
	
	okButton "Button"
		owner: self;
		setName: 'okButton';
		when: #clicked send: #ok to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 66 * xDU;
				topRatio: 0; topInset: 50 * yDU;
				rightRatio: 0; rightInset: -102 * xDU;
				bottomRatio: 0; bottomInset: -66 * yDU);
		defaultPushButton;
		contents: 'OK';
		startGroup;
		font: SysFont.
	mainView addSubpane: okButton.
	
	cancelButton "Button"
		owner: self;
		setName: 'cancelButton';
		when: #clicked send: #cancel to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 106 * xDU;
				topRatio: 0; topInset: 50 * yDU;
				rightRatio: 0; rightInset: -142 * xDU;
				bottomRatio: 0; bottomInset: -66 * yDU);
		cancelPushButton;
		contents: 'Cancel';
		startGroup;
		font: SysFont.
	mainView addSubpane: cancelButton.
	
	minimumLabel "StaticText"
		owner: self;
		setName: 'minimumLabel';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 0 * xDU;
				topRatio: 0; topInset: 8 * yDU;
				rightRatio: 0; rightInset: -40 * xDU;
				bottomRatio: 0; bottomInset: -16 * yDU);
		rightJustified;
		contents: 'Minimum:';
		startGroup;
		noTabStop;
		font: SysFont.
	mainView addSubpane: minimumLabel.
	
	staticText1
		owner: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 0 * xDU;
				topRatio: 0; topInset: 22 * yDU;
				rightRatio: 0; rightInset: -40 * xDU;
				bottomRatio: 0; bottomInset: -30 * yDU);
		rightJustified;
		contents: 'Maximum:';
		startGroup;
		noTabStop;
		font: SysFont.
	mainView addSubpane: staticText1.
	
	staticText2
		owner: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 0 * xDU;
				topRatio: 0; topInset: 36 * yDU;
				rightRatio: 0; rightInset: -40 * xDU;
				bottomRatio: 0; bottomInset: -44 * yDU);
		rightJustified;
		contents: 'Position:';
		startGroup;
		noTabStop;
		font: SysFont.
	mainView addSubpane: staticText2.
	
	orientationGroup "GroupBox"
		owner: self;
		setName: 'orientationGroup';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 84 * xDU;
				topRatio: 0; topInset: 2 * yDU;
				rightRatio: 0; rightInset: -142 * xDU;
				bottomRatio: 0; bottomInset: -46 * yDU);
		contents: 'Orientation';
		startGroup;
		noTabStop;
		font: SysFont.
	mainView addSubpane: orientationGroup! !

!WBStatusWindowEditor methods !   
setType: selectedItem

    (statusFields selectedItem ifNil: [^self]) type: selectedItem asSymbol! !

!PSpinButton methods !  
defaultSize

    ^100 @ self suggestedSize y! !

!PHeader methods !   
displayWith: aPen clipRect: clipRect

	| innerRect region point headingRect clip |
	innerRect := self rect.
	self hasBorder
		ifTrue: [
			aPen
				foreColor: Color black;
				drawRectangle: self rect.
			innerRect := innerRect insetBy: 1].
	(self headings isNil or: [self headings isEmpty])
		ifTrue: [^self].
	point := innerRect leftTop.
	region := aPen setClipRect: (clip := clipRect intersect: innerRect).
	self headings do: [:heading |
		headingRect := point extentFromLeftTop: (heading width ifNil: [self widthFor: heading]) @ innerRect height.
		(headingRect intersects: clip)
			ifTrue: [
				self drawHeading: heading in: (headingRect intersect: clip) with: aPen.
				point := point right: headingRect width]].
	headingRect := point rightBottom: (innerRect rightBottom right: 10).
	(headingRect intersects: clip)
		ifTrue: [self drawHeading: HeaderItem new in: (headingRect intersect: clip) with: aPen].
	aPen destroyRegion: region.! !

!PTrackBar methods !   
defaultSize

    ^200@50! !

!WBListViewEditor methods !  
initWindow

    (self paneNamed: thePane style) turnOn! !

!PHeader methods ! 
hasButtons

    ^self style == #buttons or: [self style == #noBorder]! !

!PUpDown methods !  
style: newStyle

    style == newStyle ifTrue: [^self].
    style := newStyle.
    newStyle == #horizontal
        ifTrue: [self wbRealWidget horizontal]
        ifFalse: [self wbRealWidget vertical].! !

!WBStatusWindowEditor methods !  
select: selectedItem

	name contents: selectedItem name.
	contents contents: selectedItem contents.
	width contents: selectedItem width asString.
	type setValue: selectedItem type.
	self enableFields.! !

!WBHeaderEditor methods !
down

    | item index |
    (item := list selectedItem) ifNil: [^self].
    index := list indexOf: item.
    index == list contents size ifTrue: [^self].
    list contents
        removeIndex: index;
        add: item afterIndex: index.
    list
        contents: list contents;
        selectItem: item.! !

!ListView class methods !  
wbConstructPropertyManager
    "Construct the WindowBuilder property manager
        based on the Digitalk property manager."

    #addedByOSI.
    ^super wbConstructPropertyManager
        add: (SelectorPropertyAccessor new
            name: 'Headings';
            get: #headings;
            set: #headingsAttribute:;
            format: 'OrderedCollection');
        add: (StylePropertyAccessor new
            name: 'Border';
            style: 'WsBorder';
            pool: OperatingSystemConstants;
            wbAddStyle: #addBorderStyle;
            wbRemoveStyle: #removeBorderStyle);
        add: (StylePropertyAccessor new
            name: 'Auto Arrange';
            style: 'LvsAutoarrange';
            pool: WinCommonControlConstants;
            wbAddStyle: #'autoArrange: true');
        add: (StylePropertyAccessor new
            name: 'Edit Labels';
            style: 'LvsEditlabels';
            pool: WinCommonControlConstants;
            wbAddStyle: #'editLabels: true');
        add: (StylePropertyAccessor new
            name: 'Show Selection Always';
            style: 'LvsShowselalways';
            pool: WinCommonControlConstants;
            wbRemoveStyle: #'showSelectionAlways: false');
        add: (StylePropertyAccessor new
            name: 'Align Left';
            style: 'LvsAlignleft';
            pool: WinCommonControlConstants;
            wbAddStyle: #alignLeft);
        add: (StylePropertyAccessor new
            name: 'Align Top';
            style: 'LvsAligntop';
            pool: WinCommonControlConstants;
            wbAddStyle: #alignTop);
        "add: (StylePropertyAccessor new
            name: 'List View';
            style: 'LvsList';
            pool: WinCommonControlConstants;
            wbAddStyle: #listView);
        add: (StylePropertyAccessor new
            name: 'Small Icon View';
            style: 'LvsSmallicon';
            pool: WinCommonControlConstants;
            wbAddStyle: #smallIconView);
        add: (StylePropertyAccessor new
            name: 'Report View';
            style: 'LvsReport';
            pool: WinCommonControlConstants;
            wbAddStyle: #reportView);
        add: (StylePropertyAccessor new
            name: 'Icon View';
            style: 'LvsIcon';
            pool: WinCommonControlConstants;
            wbAddStyle: #iconView);"
        add: (SelectorPropertyAccessor new
            name: 'Use Images';
            get: #useImages;
            set: #useImages:;
            format: 'Boolean');
        add: (SelectorPropertyAccessor new
            name: 'Sort Ascending';
            get: #sortAscending;
            set: #sortAscending:;
            format: 'Boolean');
        add: (SelectorPropertyAccessor new
            name: 'Sort Column';
            get: #sortByColumn;
            set: #sortByColumn:;
            format: 'Integer');
        wbAddEvent: (
            WBEventDescription new
                event: #changedLabel:to: ;
                argumentNames: #('anItem' 'newLabel'));
        wbAddEvent: (
            WBEventDescription new
                event: #needsSmallImageFor: ;
                argumentNames: #('anItem'));
        wbAddEvent: (
            WBEventDescription new
                event: #clickedIndex: ;
                argumentNames: #('index'));
        wbAddEvent: (
            WBEventDescription new
                event: #changed: ;
                argumentNames: #('anItem'));
        wbAddEvent: (
            WBEventDescription new
                event: #selected: ;
                argumentNames: #('anItem'));
        wbAddEvent: (
            WBEventDescription new
                event: #needsColumnsFor: ;
                argumentNames: #('anItem'));
        wbAddEvent: (
            WBEventDescription new
                event: #doubleClickedIndex: ;
                argumentNames: #('index'));
        wbAddEvent: (
            WBEventDescription new
                event: #aboutToEditLabel: ;
                argumentNames: #('anItem'));
        wbAddEvent: (
            WBEventDescription new
                event: #aboutToChangeLabel:to: ;
                argumentNames: #('anItem' 'newLabel'));
        wbAddEvent: (
            WBEventDescription new
                event: #clicked: ;
                argumentNames: #('anItem'));
        wbAddEvent: (
            WBEventDescription new
                event: #needsImageFor: ;
                argumentNames: #('anItem'));
        wbAddEvent: (
            WBEventDescription new
                event: #characterTyped: ;
                argumentNames: #('aCharacter'));
        wbAddEvent: (
            WBEventDescription new
                event: #columnClicked: ;
                argumentNames: #('columnIndex'));
        wbAddEvent: (
            WBEventDescription new
                event: #doubleClicked: ;
                argumentNames: #('anItem'));
        wbAddEvent: (
            WBEventDescription new
                event: #needsStringFor: ;
                argumentNames: #('anItem'));
        yourself! !

!WBTabControlEditor methods !  
setPageClass: selectedItem

    (pages selectedItem ifNil: [^self]) pageClass:
        (selectedItem asSymbol == self noneString
            ifTrue: [nil]
            ifFalse: [Smalltalk at: selectedItem asSymbol ifAbsent: [nil]]).! !

!WBTrackBarEditor methods !
createViews

	"WARNING!! This method was automatically generated by 
	WindowBuilder. Code you add here which does not conform to 
	the WindowBuilder API will probably be lost the next time 
	you save your layout definition."

	| cancelButton enableRangeSelection1 horizontal1 
	lineIncrement1 lineIncrementLabel mainView maximum1 
	maximumLabel minimum1 minimumLabel okButton 
	orientationGroup pageIncrement1 pageIncrementLabel 
	position1 positionLabel setTicksButton ticksGroup 
	ticksOnBothSides1 ticksOnLeftTop1 ticksOnRightBottom1 
	vertical1 xDU yDU |
	
	#generated.
	xDU := (SysFont width + 1 roundTo: 2) / (SysFont width roundTo: 2).
	yDU := 1.
	mainView := self topPaneClass new.
	
		"Temporary Variables"
	cancelButton := Button new.
	enableRangeSelection1 := CheckBox new.
	horizontal1 := RadioButton new.
	lineIncrement1 := EntryField new.
	lineIncrementLabel := StaticText new.
	maximum1 := EntryField new.
	maximumLabel := StaticText new.
	minimum1 := EntryField new.
	minimumLabel := StaticText new.
	okButton := Button new.
	orientationGroup := GroupBox new.
	pageIncrement1 := EntryField new.
	pageIncrementLabel := StaticText new.
	position1 := EntryField new.
	positionLabel := StaticText new.
	setTicksButton := Button new.
	ticksGroup := GroupBox new.
	ticksOnBothSides1 := RadioButton new.
	ticksOnLeftTop1 := RadioButton new.
	ticksOnRightBottom1 := RadioButton new.
	vertical1 := RadioButton new.
	
	mainView
		owner: self;
		setName: 'mainView';
		alignRelativeToScreen;
		addModalBorderStyle;
		labelWithoutPrefix: 'TrackBar Editor';
		noSmalltalkMenuBar;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 1/2 / ((SysFont width roundTo: 2) / 4);
				leftInset: -86 * xDU;
				topRatio: 1/2 / (SysFont height / 8);
				topInset: -57 * yDU;
				rightRatio: 1/2 / ((SysFont width roundTo: 2) / 4);
				rightInset: -86 * xDU;
				bottomRatio: 1/2 / (SysFont height / 8);
				bottomInset: -57 * yDU).
	self addView: mainView.
	
	lineIncrement1 "EntryField"
		owner: self;
		setName: 'Line Increment';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 60 * xDU;
				topRatio: 0; topInset: 4 * yDU;
				rightRatio: 0; rightInset: -98 * xDU;
				bottomRatio: 0; bottomInset: -16 * yDU);
		startGroup;
		font: SysFont.
	mainView
		addSubpane: lineIncrement1;
		subPaneWithFocus: lineIncrement1.
	
	pageIncrement1 "EntryField"
		owner: self;
		setName: 'Page Increment';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 60 * xDU;
				topRatio: 0; topInset: 20 * yDU;
				rightRatio: 0; rightInset: -98 * xDU;
				bottomRatio: 0; bottomInset: -32 * yDU);
		startGroup;
		font: SysFont.
	mainView addSubpane: pageIncrement1.
	
	minimum1 "EntryField"
		owner: self;
		setName: 'Minimum';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 60 * xDU;
				topRatio: 0; topInset: 36 * yDU;
				rightRatio: 0; rightInset: -98 * xDU;
				bottomRatio: 0; bottomInset: -48 * yDU);
		startGroup;
		font: SysFont.
	mainView addSubpane: minimum1.
	
	maximum1 "EntryField"
		owner: self;
		setName: 'Maximum';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 60 * xDU;
				topRatio: 0; topInset: 52 * yDU;
				rightRatio: 0; rightInset: -98 * xDU;
				bottomRatio: 0; bottomInset: -64 * yDU);
		startGroup;
		font: SysFont.
	mainView addSubpane: maximum1.
	
	position1 "EntryField"
		owner: self;
		setName: 'Position';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 60 * xDU;
				topRatio: 0; topInset: 68 * yDU;
				rightRatio: 0; rightInset: -98 * xDU;
				bottomRatio: 0; bottomInset: -80 * yDU);
		startGroup;
		font: SysFont.
	mainView addSubpane: position1.
	
	enableRangeSelection1 "CheckBox"
		owner: self;
		setName: 'Enable Range Selection';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 6 * xDU;
				topRatio: 0; topInset: 82 * yDU;
				rightRatio: 0; rightInset: -94 * xDU;
				bottomRatio: 0; bottomInset: -92 * yDU);
		contents: 'Enable Range Selection';
		startGroup;
		font: SysFont.
	mainView addSubpane: enableRangeSelection1.
	
	horizontal1 "RadioButton"
		owner: self;
		setName: 'Horizontal';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 108 * xDU;
				topRatio: 0; topInset: 10 * yDU;
				rightRatio: 0; rightInset: -152 * xDU;
				bottomRatio: 0; bottomInset: -20 * yDU);
		contents: 'Horizontal';
		startGroup;
		font: SysFont.
	mainView addSubpane: horizontal1.
	
	vertical1 "RadioButton"
		owner: self;
		setName: 'Vertical';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 108 * xDU;
				topRatio: 0; topInset: 22 * yDU;
				rightRatio: 0; rightInset: -152 * xDU;
				bottomRatio: 0; bottomInset: -32 * yDU);
		contents: 'Vertical';
		noTabStop;
		font: SysFont.
	mainView addSubpane: vertical1.
	
	ticksOnRightBottom1 "RadioButton"
		owner: self;
		setName: 'Ticks on Right/Bottom';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 108 * xDU;
				topRatio: 0; topInset: 52 * yDU;
				rightRatio: 0; rightInset: -160 * xDU;
				bottomRatio: 0; bottomInset: -62 * yDU);
		contents: 'Right/Bottom';
		startGroup;
		font: SysFont.
	mainView addSubpane: ticksOnRightBottom1.
	
	ticksOnLeftTop1 "RadioButton"
		owner: self;
		setName: 'Ticks on Left/Top';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 108 * xDU;
				topRatio: 0; topInset: 64 * yDU;
				rightRatio: 0; rightInset: -150 * xDU;
				bottomRatio: 0; bottomInset: -74 * yDU);
		contents: 'Left/Top';
		noTabStop;
		font: SysFont.
	mainView addSubpane: ticksOnLeftTop1.
	
	ticksOnBothSides1 "RadioButton"
		owner: self;
		setName: 'Ticks on Both Sides';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 108 * xDU;
				topRatio: 0; topInset: 76 * yDU;
				rightRatio: 0; rightInset: -160 * xDU;
				bottomRatio: 0; bottomInset: -86 * yDU);
		contents: 'Both Sides';
		noTabStop;
		font: SysFont.
	mainView addSubpane: ticksOnBothSides1.
	
	setTicksButton "Button"
		owner: self;
		setName: 'setTicksButton';
		when: #clicked send: #setTicks to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 6 * xDU;
				topRatio: 0; topInset: 94 * yDU;
				rightRatio: 0; rightInset: -56 * xDU;
				bottomRatio: 0; bottomInset: -110 * yDU);
		contents: 'Set Ticks...';
		startGroup;
		font: SysFont.
	mainView addSubpane: setTicksButton.
	
	okButton "Button"
		owner: self;
		setName: 'okButton';
		when: #clicked send: #ok to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 92 * xDU;
				topRatio: 0; topInset: 94 * yDU;
				rightRatio: 0; rightInset: -128 * xDU;
				bottomRatio: 0; bottomInset: -110 * yDU);
		defaultPushButton;
		contents: 'OK';
		startGroup;
		font: SysFont.
	mainView addSubpane: okButton.
	
	cancelButton "Button"
		owner: self;
		setName: 'cancelButton';
		when: #clicked send: #cancel to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 132 * xDU;
				topRatio: 0; topInset: 94 * yDU;
				rightRatio: 0; rightInset: -168 * xDU;
				bottomRatio: 0; bottomInset: -110 * yDU);
		cancelPushButton;
		contents: 'Cancel';
		startGroup;
		font: SysFont.
	mainView addSubpane: cancelButton.
	
	lineIncrementLabel "StaticText"
		owner: self;
		setName: 'lineIncrementLabel';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 2 * xDU;
				topRatio: 0; topInset: 6 * yDU;
				rightRatio: 0; rightInset: -58 * xDU;
				bottomRatio: 0; bottomInset: -14 * yDU);
		rightJustified;
		contents: 'Line Increment:';
		startGroup;
		noTabStop;
		font: SysFont.
	mainView addSubpane: lineIncrementLabel.
	
	minimumLabel "StaticText"
		owner: self;
		setName: 'minimumLabel';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 2 * xDU;
				topRatio: 0; topInset: 38 * yDU;
				rightRatio: 0; rightInset: -58 * xDU;
				bottomRatio: 0; bottomInset: -46 * yDU);
		rightJustified;
		contents: 'Minimum:';
		startGroup;
		noTabStop;
		font: SysFont.
	mainView addSubpane: minimumLabel.
	
	maximumLabel "StaticText"
		owner: self;
		setName: 'maximumLabel';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 2 * xDU;
				topRatio: 0; topInset: 54 * yDU;
				rightRatio: 0; rightInset: -58 * xDU;
				bottomRatio: 0; bottomInset: -62 * yDU);
		rightJustified;
		contents: 'Maximum:';
		startGroup;
		noTabStop;
		font: SysFont.
	mainView addSubpane: maximumLabel.
	
	positionLabel "StaticText"
		owner: self;
		setName: 'positionLabel';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 2 * xDU;
				topRatio: 0; topInset: 70 * yDU;
				rightRatio: 0; rightInset: -58 * xDU;
				bottomRatio: 0; bottomInset: -78 * yDU);
		rightJustified;
		contents: 'Position:';
		startGroup;
		noTabStop;
		font: SysFont.
	mainView addSubpane: positionLabel.
	
	pageIncrementLabel "StaticText"
		owner: self;
		setName: 'pageIncrementLabel';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 2 * xDU;
				topRatio: 0; topInset: 22 * yDU;
				rightRatio: 0; rightInset: -58 * xDU;
				bottomRatio: 0; bottomInset: -30 * yDU);
		rightJustified;
		contents: 'Page Increment:';
		startGroup;
		noTabStop;
		font: SysFont.
	mainView addSubpane: pageIncrementLabel.
	
	orientationGroup "GroupBox"
		owner: self;
		setName: 'orientationGroup';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 102 * xDU;
				topRatio: 0; topInset: 0 * yDU;
				rightRatio: 0; rightInset: -168 * xDU;
				bottomRatio: 0; bottomInset: -36 * yDU);
		contents: 'Orientation';
		startGroup;
		noTabStop;
		font: SysFont.
	mainView addSubpane: orientationGroup.
	
	ticksGroup "GroupBox"
		owner: self;
		setName: 'ticksGroup';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 102 * xDU;
				topRatio: 0; topInset: 42 * yDU;
				rightRatio: 0; rightInset: -168 * xDU;
				bottomRatio: 0; bottomInset: -90 * yDU);
		contents: 'Tick Position';
		startGroup;
		noTabStop;
		font: SysFont.
	mainView addSubpane: ticksGroup! !

!PStatusWindow methods ! 
suggestedSize

	^self width @ self height! !

!PSpinButton methods !  
styles

    ^#(#leftJustified #centered #rightJustified)! !

!PProgressBar methods !  
suggestedSize

    ^self extent x @ 24! !

!PHeader methods ! 
widthFor: heading

    ^heading
        widthForString: heading object
        andFont: self font.! !

!PSpinButton methods !   
readSpecificsFrom: aPane

    self style: self justification.! !

!PStatusWindow methods !
style: newStyle

	style == newStyle ifTrue: [^self].
	style := newStyle.
	newStyle == #top
		ifTrue: [self wbRealWidget addStyle: CcsTop]
		ifFalse: [self wbRealWidget removeStyle: CcsTop].
	self framingBlock: self framingBlock.
	self reframe: (self parent ifNil: [^nil]) frameContentRect.
	(self editor ifNil: [^nil]) layoutForm redraw! !

!WBHeaderEditor methods ! 
disableFields

    removeButton disable.
    label disable; contents: self emptyString.
    width disable; text: self emptyString.
    alignment disable; text: self emptyString.
    image disable; text: self emptyString.! !

!PSpinButton methods !   
contents

    | list |
    ((list := self wbRealWidget contents) isNil
        or: [list isEmpty
        or: [list first isEmpty]])
        ifTrue: [
            self wbRealWidget contents: #('').
            ^#()].
    ^self wbRealWidget contents! !

!PTrackBar methods !   
isVertical

    ^self wbRealWidget isVertical! !

!PTrackBar methods !
contents: ticks

    | min max |
    min := self wbRealWidget minimum.
    max := self wbRealWidget maximum.
    ^self wbRealWidget ticks:
        ((ticks collect: [:tick | tick asNumber asInteger])
            select: [:tick | tick >= min and: [tick <= max]])
            asSet asSortedCollection asArray! !

!WBListViewEditor methods !   
ok

    thePane wbRealWidget perform:
        (#(#listView #iconView #smallIconView #reportView)
            detect: [:sym | (self paneNamed: sym asString) selection]
            ifNone: [#listView]).
    super ok.! !

!PStatusWindow methods !   
defaultForeColor

    ^Color buttonText! !

!WBTabControlEditor methods ! 
setToolTip: aString

    (pages selectedItem ifNil: [^self]) tipText: aString.! !

!WBTabControlEditor class methods !
wbBasicVersion

	"Private - Answer the WindowBuilder Pro version.
		Generated in: Visual Smalltalk Enterprise 3.1.0 Win32"

	^3.1! !

!WBRichTextEditor methods !  
clearAll

    contents contents: ''! !

!WBHeaderEditor methods ! 
setAlignment: selectedItem

    | align |
    (align := selectedItem asSymbol) == self dynamicString
        ifTrue: [align := nil].
    (list selectedItem ifNil: [^self]) alignment: align.! !

!PHeader methods !   
drawHeading: heading in: headingRect with: aPen

    | innerRect just offset |
    aPen fill: headingRect color: Color gray.
    self hasButtons
        ifTrue: [
            aPen
                foreColor: Color white;
                lineFrom: headingRect leftTop to: (headingRect rightTop left: 1);
                lineFrom: headingRect leftTop to: (headingRect leftBottom up: 1);
                foreColor: Color black;
                lineFrom: (headingRect leftBottom up: 1) to: (headingRect rightBottom up: 1);
                lineFrom: (headingRect rightTop left: 1) to: (headingRect rightBottom leftAndUp: 1);
                foreColor: Color darkGray;
                lineFrom: (headingRect leftBottom rightAndUp: 1@2) to: (headingRect rightBottom leftAndUp: 1@2);
                lineFrom: (headingRect rightTop leftAndDown: 2@1) to: (headingRect rightBottom leftAndUp: 2)]
        ifFalse: [
            aPen
                foreColor: Color white;
                lineFrom: (headingRect leftBottom up: 1) to: (headingRect rightBottom up: 1);
                lineFrom: (headingRect rightTop left: 1) to: (headingRect rightBottom leftAndUp: 1);
                foreColor: Color darkGray;
                lineFrom: (headingRect leftBottom rightAndUp: 1@2) to: (headingRect rightBottom leftAndUp: 1@2);
                lineFrom: (headingRect rightTop leftAndDown: 2@1) to: (headingRect rightBottom leftAndUp: 2)].
    (heading object isNil or: [heading object isEmpty])
        ifTrue: [^self].
    heading image isNil
        ifTrue: [
            innerRect := headingRect insetBy: 6 @ ((headingRect height - self font height) // 2).
            just :=  (Array
                with: SsLeftnowordwrap
                with: SsRight
                with: SsCenter) at: (#(#left #right #center) indexOf: (heading alignment ifNil: [#left])).
            aPen
                foreColor: Color black;
                backColor: Color gray;
                setTextAlign: TaTop;
                winDrawText: heading object in: innerRect format: just]
        ifFalse: [
            offset := headingRect top down: (headingRect height - heading image height) // 2.
            innerRect := heading alignment == #right
                ifTrue: [((headingRect right left: heading image width + 6) @ offset) extentFromLeftTop: heading image extent]
                ifFalse: [
                    heading alignment == #center
                        ifTrue: [(headingRect center leftAndUp: (heading image extent // 2)) extentFromLeftTop: heading image extent]
                        ifFalse: [((headingRect left right: 6) @ offset) extentFromLeftTop: heading image extent]].
            aPen
                copyBitmap: heading image
                from: heading image boundingBox
                to: innerRect].! !

!WBTreeViewEditor class methods !   
wbBasicVersion

	"Private - Answer the WindowBuilder Pro version.
		Generated in: Visual Smalltalk Enterprise 3.1.0 Win32"

	^3.1! !

!WBTabControlEditor methods !
ok

    thePane wbRealWidget pages: pages contents.
    super ok.! !

!WBStatusWindowEditor methods !
add

	| newItem |
	newItem := StatusField new
		name: #noName;
		contents: self emptyString;
		width: 20;
		type: #caveIn.
	statusFields contents addLast: newItem.
	statusFields
		contents: statusFields contents;
		selectItem: newItem.
	self select: newItem.
	name setFocus.! !

!WBRichTextEditor methods ! 
preInitWindow

    super preInitWindow.
    contents formattedContents: thePane wbRealWidget wbFormattedContents.! !

!PUpDown methods ! 
postEdit: aWindowBuilder

    self readSpecificsFrom: self wbRealWidget.
    aWindowBuilder updateStyle: aWindowBuilder currentWidget.
    ^true! !

!PListView methods !   
postEdit: aWindowBuilder

    self readSpecificsFrom: self wbRealWidget.
    aWindowBuilder updateStyle: aWindowBuilder currentWidget.
    ^true! !

!WBRichTextEditor methods !
changeTabs

    contents changeTabs! !

!TreeView class methods ! 
wbConstructPropertyManager
    "Construct the WindowBuilder property manager
        based on the Digitalk property manager."

    #addedByOSI.
    ^super wbConstructPropertyManager
        add: (StylePropertyAccessor new
            name: 'Border';
            style: 'WsBorder';
            pool: OperatingSystemConstants;
            wbAddStyle: #addBorderStyle;
            wbRemoveStyle: #removeBorderStyle);
        add: (StylePropertyAccessor new
            name: 'Direct Edit';
            style: 'TvsEditlabels';
            pool: WinCommonControlConstants;
            wbAddStyle: 'editLabels: true';
            wbRemoveStyle: 'editLabels: false');
        add: (StylePropertyAccessor new
            name: 'Buttons';
            style: 'TvsHasbuttons';
            pool: WinCommonControlConstants;
            wbAddStyle: 'hasButtons: true';
            wbRemoveStyle: 'hasButtons: false');
        add: (StylePropertyAccessor new
            name: 'Lines';
            style: 'TvsHaslines';
            pool: WinCommonControlConstants;
            wbAddStyle: 'hasLines: true';
            wbRemoveStyle: 'hasLines: false');
        add: (StylePropertyAccessor new
            name: 'Lines At Root';
            style: 'TvsLinesatroot';
            pool: WinCommonControlConstants;
            wbAddStyle: 'hasLinesAtRoot: true';
            wbRemoveStyle: 'hasLinesAtRoot: false');
        add: (SelectorPropertyAccessor new
            name: 'Indent (pixels)';
            get: #wbGetIndent;
            set: #indent: ;
            format: 'Integer');
        add: (SelectorPropertyAccessor new
            name: 'Use Images';
            get: #useImages;
            set: #useImages: ;
            format: 'Boolean');
        addNames: #('Direct Edit' 'Buttons' 'Lines' 'Lines At Root' 'Indent (pixels)' 'Use Images') toPage: 'Style';
        wbAddEvent: (
            WBEventDescription new
                event: #changedLabel:to: ;
                argumentNames: #('anItem' 'aString'));
        wbAddEvent: (
            WBEventDescription new
                event: #changed: ;
                argumentNames: #('anItem'));
        wbAddEvent: (
            WBEventDescription new
                event: #expanded: ;
                argumentNames: #('anItem'));
        wbAddEvent: (
            WBEventDescription new
                event: #aboutToEditLabel: ;
                argumentNames: #('anItem'));
        wbAddEvent: (
            WBEventDescription new
                event: #needsHasChildrenFor: ;
                argumentNames: #('anItem'));
        wbAddEvent: (
            WBEventDescription new
                event: #aboutToChangeLabel:to: ;
                argumentNames: #('anItem' 'aString'));
        wbAddEvent: (
            WBEventDescription new
                event: #needsSelectedImageFor: ;
                argumentNames: #('anItem'));
        wbAddEvent: (
            WBEventDescription new
                event: #collapsed: ;
                argumentNames: #('anItem'));
        wbAddEvent: (
            WBEventDescription new
                event: #characterTyped: ;
                argumentNames: #('aCharacter'));
        wbAddEvent: (
            WBEventDescription new
                event: #needsImageFor: ;
                argumentNames: #('anItem'));
        wbAddEvent: (
            WBEventDescription new
                event: #needsChildrenFor: ;
                argumentNames: #('anItem'));
        wbAddEvent: (
            WBEventDescription new
                event: #doubleClicked: ;
                argumentNames: #('anItem'));
        wbAddEvent: (
            WBEventDescription new
                event: #needsStringFor: ;
                argumentNames: #('anItem'));
        yourself! !

!PListView methods !
defaultSize

    ^200 @ 150! !

!PListView methods !  
readSpecificsFrom: aPane

    self style: ((aPane hasStyle: LvsList)
        ifTrue: [#listView]
        ifFalse: [
            (aPane hasStyle: LvsReport)
                ifTrue: [#reportView]
                ifFalse: [
                    (aPane hasStyle: LvsSmallicon)
                        ifTrue: [#smallIconView]
                        ifFalse: [#iconView]]]).! !

!PStatusWindow methods !
maxSize

	^32000 @ self height! !

!StatusField methods ! 
wbStoreOn: aStream
        "Answer the receiver represented as a String
         from which it can be reconstructed."

    aStream
        nextPut: $(;
        nextPutAll: self class name; space;
        nextPutAll: #new; space;
        nextPutAll: #name:; space;
        nextPutAll: (self name ifNil: [#noName]) storeString;
        nextPut: $;; space; nextPutAll: #contents:; space; nextPutStringConstant: (contents ifNil: ['']);
        nextPut: $;; space; nextPutAll: #width:; space; nextPutAll: (width ifNil: [0]) asString;
        nextPut: $;; space; nextPutAll: #type:; space; nextPutAll: (type ifNil: [#caveIn]) storeString;
        nextPut: $).! !

!WBTabControlEditor methods !
remove

    (MessageBox confirm: 'Are you sure you want to delete the selected item?')
        ifFalse: [^self].
    pages contents remove: pages selectedItem ifAbsent: [].
    pages contents: pages contents.
    self disableFields.! !

!PListView methods ! 
hasButtons

    ^true! !

!PUpDown methods !  
defaultSize

    ^16@32! !

!WBRichTextEditor methods !   
changeColor

    contents changeColor! !

!PRichEdit methods !
unformattedContents

    ^(self wbRealWidget propertyAt: #wbUnformattedContents) ifNil: ['']! !

!TabControlPage methods !
wbStoreOn: aStream
        "Answer the receiver represented as a String
         from which it can be reconstructed."

    aStream
        nextPut: $(;
        nextPutAll: self class name; space;
        nextPutAll: #new; space;
        nextPutAll: #label:; space;
        nextPutStringConstant: label.
    image isNil ifFalse: [aStream nextPut: $;; space; nextPutAll: #image:; space; nextPutBitmap: image].
    tip isNil ifFalse: [aStream nextPut: $;; space; nextPutAll: #tipText:; space; nextPutStringConstant: tip].
    self pageClass isNil ifFalse: [aStream nextPut: $;; space; nextPutAll: #pageClass:; space; nextPutAll: self pageClass name].
    aStream nextPut: $).! !

!WBHeaderEditor methods ! 
remove

    (MessageBox confirm: 'Are you sure you want to delete the selected item?')
        ifFalse: [^self].
    list contents remove: list selectedItem ifAbsent: [].
    list contents: list contents.
    self disableFields.! !

!RichEdit methods !  
wbFormattedContents
    | whenValid |
    ^self isHandleOk
        ifTrue: [
            self contents isEmpty ifTrue: [^''].
            self formattedContents]
        ifFalse: [
            whenValid := self propertyAt: #whenValid ifAbsent: [^''].
            (whenValid
                detect: [:msg | msg selector == #formattedContents:]
                ifNone: [^'']) arguments first contents].! !

!WBTreeViewEditor methods !  
createViews

	"WARNING!! This method was automatically generated by 
	WindowBuilder. Code you add here which does not conform to 
	the WindowBuilder API will probably be lost the next time 
	you save your layout definition."

	| border1 buttons1 cancel directEdit1 indentLabel 
	indentPixels1 lines1 linesAtRoot1 mainView ok useImages1 
	xDU yDU |
	
	#generated.
	xDU := (SysFont width + 1 roundTo: 2) / (SysFont width roundTo: 2).
	yDU := 1.
	mainView := self topPaneClass new.
	
		"Temporary Variables"
	border1 := CheckBox new.
	buttons1 := CheckBox new.
	cancel := Button new.
	directEdit1 := CheckBox new.
	indentLabel := StaticText new.
	indentPixels1 := EnhancedEntryField new.
	lines1 := CheckBox new.
	linesAtRoot1 := CheckBox new.
	ok := Button new.
	useImages1 := CheckBox new.
	
	mainView
		owner: self;
		setName: 'mainView';
		alignRelativeToScreen;
		addModalBorderStyle;
		labelWithoutPrefix: 'TreeView Attributes';
		noSmalltalkMenuBar;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 1/2 / ((SysFont width roundTo: 2) / 4);
				leftInset: -75 * xDU;
				topRatio: 1/2 / (SysFont height / 8);
				topInset: -34 * yDU;
				rightRatio: 1/2 / ((SysFont width roundTo: 2) / 4);
				rightInset: -75 * xDU;
				bottomRatio: 1/2 / (SysFont height / 8);
				bottomInset: -34 * yDU).
	self addView: mainView.
	
	buttons1 "CheckBox"
		owner: self;
		setName: 'Buttons';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 6 * xDU;
				topRatio: 0; topInset: 4 * yDU;
				rightRatio: 0; rightInset: -80 * xDU;
				bottomRatio: 0; bottomInset: -14 * yDU);
		contents: 'Has Buttons';
		startGroup;
		font: SysFont.
	mainView
		addSubpane: buttons1;
		subPaneWithFocus: buttons1.
	
	lines1 "CheckBox"
		owner: self;
		setName: 'Lines';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 6 * xDU;
				topRatio: 0; topInset: 18 * yDU;
				rightRatio: 0; rightInset: -80 * xDU;
				bottomRatio: 0; bottomInset: -28 * yDU);
		contents: 'Has Lines';
		startGroup;
		font: SysFont.
	mainView addSubpane: lines1.
	
	linesAtRoot1 "CheckBox"
		owner: self;
		setName: 'Lines At Root';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 6 * xDU;
				topRatio: 0; topInset: 32 * yDU;
				rightRatio: 0; rightInset: -80 * xDU;
				bottomRatio: 0; bottomInset: -42 * yDU);
		contents: 'Has Lines at Root';
		startGroup;
		font: SysFont.
	mainView addSubpane: linesAtRoot1.
	
	directEdit1 "CheckBox"
		owner: self;
		setName: 'Direct Edit';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 92 * xDU;
				topRatio: 0; topInset: 4 * yDU;
				rightRatio: 0; rightInset: -146 * xDU;
				bottomRatio: 0; bottomInset: -14 * yDU);
		contents: 'Direct Edit';
		startGroup;
		font: SysFont.
	mainView addSubpane: directEdit1.
	
	useImages1 "CheckBox"
		owner: self;
		setName: 'Use Images';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 92 * xDU;
				topRatio: 0; topInset: 18 * yDU;
				rightRatio: 0; rightInset: -146 * xDU;
				bottomRatio: 0; bottomInset: -28 * yDU);
		contents: 'Use Images';
		startGroup;
		font: SysFont.
	mainView addSubpane: useImages1.
	
	border1 "CheckBox"
		owner: self;
		setName: 'Border';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 92 * xDU;
				topRatio: 0; topInset: 32 * yDU;
				rightRatio: 0; rightInset: -146 * xDU;
				bottomRatio: 0; bottomInset: -42 * yDU);
		contents: 'Border';
		startGroup;
		font: SysFont.
	mainView addSubpane: border1.
	
	indentPixels1 "EnhancedEntryField"
		owner: self;
		setName: 'Indent (pixels)';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 30 * xDU;
				topRatio: 0; topInset: 50 * yDU;
				rightRatio: 0; rightInset: -60 * xDU;
				bottomRatio: 0; bottomInset: -62 * yDU);
		startGroup;
		font: SysFont;
		character: #okInteger:;
		field: #okInteger;
		right.
	mainView addSubpane: indentPixels1.
	
	ok "Button"
		owner: self;
		setName: 'ok';
		when: #clicked send: #ok to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 70 * xDU;
				topRatio: 0; topInset: 50 * yDU;
				rightRatio: 0; rightInset: -106 * xDU;
				bottomRatio: 0; bottomInset: -64 * yDU);
		defaultPushButton;
		contents: '&OK';
		startGroup;
		font: SysFont.
	mainView addSubpane: ok.
	
	cancel "Button"
		owner: self;
		setName: 'cancel';
		when: #clicked send: #cancel to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 110 * xDU;
				topRatio: 0; topInset: 50 * yDU;
				rightRatio: 0; rightInset: -146 * xDU;
				bottomRatio: 0; bottomInset: -64 * yDU);
		cancelPushButton;
		contents: 'Cancel';
		startGroup;
		font: SysFont.
	mainView addSubpane: cancel.
	
	indentLabel "StaticText"
		owner: self;
		setName: 'indentLabel';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 0 * xDU;
				topRatio: 0; topInset: 52 * yDU;
				rightRatio: 0; rightInset: -28 * xDU;
				bottomRatio: 0; bottomInset: -60 * yDU);
		rightJustified;
		contents: 'Indent:';
		startGroup;
		noTabStop;
		font: SysFont.
	mainView addSubpane: indentLabel! !

!WBTabControlEditor methods !
noneString

    ^#'<none>'! !

!WBStatusWindowEditor class methods !  
wbBasicVersion

	"Private - Answer the WindowBuilder Pro version.
		Generated in: Visual Smalltalk Enterprise 3.1.0 Win32"

	^3.1! !

!PRichEdit methods ! 
mutationTypes

    ^#(#EntryField #StaticText #Toggle #CPSpinEditor)! !

!PStatusWindow methods ! 
hasSizeGrip

	^self wbRealWidget hasStyle: SbarsSizegrip! !

!PRichEdit methods ! 
mutationExceptions

    ^#(#CPChildEntryField #Toggle #CPSpinEditor)! !

!Toolbar class methods ! 
wbConstructPropertyManager
    "Construct the WindowBuilder property manager
        based on the Digitalk property manager."

    #addedByOSI.
    ^super wbConstructPropertyManager
        wbAddEvent: (
            WBEventDescription new
                event: #beginAdjust ;
                argumentNames: #( ));
        wbAddEvent: (
            WBEventDescription new
                event: #doubleClicked ;
                argumentNames: #( ));
        wbAddEvent: (
            WBEventDescription new
                event: #endAdjust ;
                argumentNames: #( ));
        wbAddEvent: (
            WBEventDescription new
                event: #reset ;
                argumentNames: #( ));
        wbAddEvent: (
            WBEventDescription new
                event: #clicked: ;
                argumentNames: #('anObject'));
        yourself! !

!PStatusWindow methods !  
minSize

	^1 @ self height! !

!WBListViewEditor methods !
createViews

	"WARNING!! This method was automatically generated by 
	WindowBuilder. Code you add here which does not conform to 
	the WindowBuilder API will probably be lost the next time 
	you save your layout definition."

	| alignGroup alignLeft1 alignTop1 autoArrange1 border1 
	cancelButton editLabels1 headingsButton iconView listView 
	mainView okButton reportView showSelectionAlways1 
	smallIconView sortAscending1 sortColumn1 sortColumnLabel 
	sortgroup useImages1 viewStyleGroup xDU yDU |
	
	#generated.
	xDU := (SysFont width + 1 roundTo: 2) / (SysFont width roundTo: 2).
	yDU := 1.
	mainView := self topPaneClass new.
	
		"Temporary Variables"
	alignGroup := GroupBox new.
	alignLeft1 := RadioButton new.
	alignTop1 := RadioButton new.
	autoArrange1 := CheckBox new.
	border1 := CheckBox new.
	cancelButton := Button new.
	editLabels1 := CheckBox new.
	headingsButton := Button new.
	iconView := RadioButton new.
	listView := RadioButton new.
	okButton := Button new.
	reportView := RadioButton new.
	showSelectionAlways1 := CheckBox new.
	smallIconView := RadioButton new.
	sortAscending1 := CheckBox new.
	sortColumn1 := EntryField new.
	sortColumnLabel := StaticText new.
	sortgroup := GroupBox new.
	useImages1 := CheckBox new.
	viewStyleGroup := GroupBox new.
	
	mainView
		owner: self;
		setName: 'mainView';
		alignRelativeToScreen;
		addModalBorderStyle;
		labelWithoutPrefix: 'ListView Editor';
		noSmalltalkMenuBar;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 1/2 / ((SysFont width roundTo: 2) / 4);
				leftInset: -95 * xDU;
				topRatio: 1/2 / (SysFont height / 8);
				topInset: -55 * yDU;
				rightRatio: 1/2 / ((SysFont width roundTo: 2) / 4);
				rightInset: -95 * xDU;
				bottomRatio: 1/2 / (SysFont height / 8);
				bottomInset: -55 * yDU).
	self addView: mainView.
	
	autoArrange1 "CheckBox"
		owner: self;
		setName: 'Auto Arrange';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 4 * xDU;
				topRatio: 0; topInset: 4 * yDU;
				rightRatio: 0; rightInset: -96 * xDU;
				bottomRatio: 0; bottomInset: -14 * yDU);
		contents: 'Auto Arrange';
		startGroup;
		font: SysFont.
	mainView
		addSubpane: autoArrange1;
		subPaneWithFocus: autoArrange1.
	
	editLabels1 "CheckBox"
		owner: self;
		setName: 'Edit Labels';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 4 * xDU;
				topRatio: 0; topInset: 16 * yDU;
				rightRatio: 0; rightInset: -96 * xDU;
				bottomRatio: 0; bottomInset: -26 * yDU);
		contents: 'Edit Labels';
		startGroup;
		font: SysFont.
	mainView addSubpane: editLabels1.
	
	showSelectionAlways1 "CheckBox"
		owner: self;
		setName: 'Show Selection Always';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 4 * xDU;
				topRatio: 0; topInset: 28 * yDU;
				rightRatio: 0; rightInset: -96 * xDU;
				bottomRatio: 0; bottomInset: -38 * yDU);
		contents: 'Show Selection Always';
		startGroup;
		font: SysFont.
	mainView addSubpane: showSelectionAlways1.
	
	border1 "CheckBox"
		owner: self;
		setName: 'Border';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 4 * xDU;
				topRatio: 0; topInset: 40 * yDU;
				rightRatio: 0; rightInset: -96 * xDU;
				bottomRatio: 0; bottomInset: -50 * yDU);
		contents: 'Border';
		startGroup;
		font: SysFont.
	mainView addSubpane: border1.
	
	useImages1 "CheckBox"
		owner: self;
		setName: 'Use Images';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 4 * xDU;
				topRatio: 0; topInset: 52 * yDU;
				rightRatio: 0; rightInset: -96 * xDU;
				bottomRatio: 0; bottomInset: -62 * yDU);
		contents: 'Use Images';
		startGroup;
		font: SysFont.
	mainView addSubpane: useImages1.
	
	alignTop1 "RadioButton"
		owner: self;
		setName: 'Align Top';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 10 * xDU;
				topRatio: 0; topInset: 78 * yDU;
				rightRatio: 0; rightInset: -32 * xDU;
				bottomRatio: 0; bottomInset: -88 * yDU);
		contents: 'Top';
		startGroup;
		font: SysFont.
	mainView addSubpane: alignTop1.
	
	alignLeft1 "RadioButton"
		owner: self;
		setName: 'Align Left';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 10 * xDU;
				topRatio: 0; topInset: 90 * yDU;
				rightRatio: 0; rightInset: -32 * xDU;
				bottomRatio: 0; bottomInset: -100 * yDU);
		contents: 'Left';
		noTabStop;
		font: SysFont.
	mainView addSubpane: alignLeft1.
	
	sortAscending1 "CheckBox"
		owner: self;
		setName: 'Sort Ascending';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 52 * xDU;
				topRatio: 0; topInset: 78 * yDU;
				rightRatio: 0; rightInset: -96 * xDU;
				bottomRatio: 0; bottomInset: -88 * yDU);
		contents: 'Ascending';
		startGroup;
		font: SysFont.
	mainView addSubpane: sortAscending1.
	
	sortColumn1 "EntryField"
		owner: self;
		setName: 'Sort Column';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 82 * xDU;
				topRatio: 0; topInset: 90 * yDU;
				rightRatio: 0; rightInset: -104 * xDU;
				bottomRatio: 0; bottomInset: -102 * yDU);
		startGroup;
		font: SysFont.
	mainView addSubpane: sortColumn1.
	
	listView "RadioButton"
		owner: self;
		setName: 'listView';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 118 * xDU;
				topRatio: 0; topInset: 16 * yDU;
				rightRatio: 0; rightInset: -184 * xDU;
				bottomRatio: 0; bottomInset: -26 * yDU);
		contents: 'List View';
		startGroup;
		font: SysFont.
	mainView addSubpane: listView.
	
	iconView "RadioButton"
		owner: self;
		setName: 'iconView';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 118 * xDU;
				topRatio: 0; topInset: 28 * yDU;
				rightRatio: 0; rightInset: -184 * xDU;
				bottomRatio: 0; bottomInset: -38 * yDU);
		contents: 'Icon View';
		noTabStop;
		font: SysFont.
	mainView addSubpane: iconView.
	
	smallIconView "RadioButton"
		owner: self;
		setName: 'smallIconView';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 118 * xDU;
				topRatio: 0; topInset: 40 * yDU;
				rightRatio: 0; rightInset: -184 * xDU;
				bottomRatio: 0; bottomInset: -50 * yDU);
		contents: 'Small Icon View';
		noTabStop;
		font: SysFont.
	mainView addSubpane: smallIconView.
	
	reportView "RadioButton"
		owner: self;
		setName: 'reportView';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 118 * xDU;
				topRatio: 0; topInset: 52 * yDU;
				rightRatio: 0; rightInset: -184 * xDU;
				bottomRatio: 0; bottomInset: -62 * yDU);
		contents: 'Report View';
		noTabStop;
		font: SysFont.
	mainView addSubpane: reportView.
	
	headingsButton "Button"
		owner: self;
		setName: 'headingsButton';
		when: #clicked send: #setHeadings to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 112 * xDU;
				topRatio: 0; topInset: 70 * yDU;
				rightRatio: 0; rightInset: -186 * xDU;
				bottomRatio: 0; bottomInset: -86 * yDU);
		contents: 'Set Headings...';
		startGroup;
		font: SysFont.
	mainView addSubpane: headingsButton.
	
	okButton "Button"
		owner: self;
		setName: 'okButton';
		when: #clicked send: #ok to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 112 * xDU;
				topRatio: 0; topInset: 90 * yDU;
				rightRatio: 0; rightInset: -148 * xDU;
				bottomRatio: 0; bottomInset: -106 * yDU);
		defaultPushButton;
		contents: 'OK';
		startGroup;
		font: SysFont.
	mainView addSubpane: okButton.
	
	cancelButton "Button"
		owner: self;
		setName: 'cancelButton';
		when: #clicked send: #cancel to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 150 * xDU;
				topRatio: 0; topInset: 90 * yDU;
				rightRatio: 0; rightInset: -186 * xDU;
				bottomRatio: 0; bottomInset: -106 * yDU);
		cancelPushButton;
		contents: 'Cancel';
		startGroup;
		font: SysFont.
	mainView addSubpane: cancelButton.
	
	sortColumnLabel "StaticText"
		owner: self;
		setName: 'sortColumnLabel';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 48 * xDU;
				topRatio: 0; topInset: 92 * yDU;
				rightRatio: 0; rightInset: -80 * xDU;
				bottomRatio: 0; bottomInset: -100 * yDU);
		rightJustified;
		contents: 'Column:';
		startGroup;
		noTabStop;
		font: SysFont.
	mainView addSubpane: sortColumnLabel.
	
	alignGroup "GroupBox"
		owner: self;
		setName: 'alignGroup';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 4 * xDU;
				topRatio: 0; topInset: 66 * yDU;
				rightRatio: 0; rightInset: -40 * xDU;
				bottomRatio: 0; bottomInset: -106 * yDU);
		contents: 'Align';
		startGroup;
		noTabStop;
		font: SysFont.
	mainView addSubpane: alignGroup.
	
	sortgroup "GroupBox"
		owner: self;
		setName: 'sortgroup';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 44 * xDU;
				topRatio: 0; topInset: 66 * yDU;
				rightRatio: 0; rightInset: -108 * xDU;
				bottomRatio: 0; bottomInset: -106 * yDU);
		contents: 'Default Sort';
		startGroup;
		noTabStop;
		font: SysFont.
	mainView addSubpane: sortgroup.
	
	viewStyleGroup "GroupBox"
		owner: self;
		setName: 'viewStyleGroup';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 112 * xDU;
				topRatio: 0; topInset: 4 * yDU;
				rightRatio: 0; rightInset: -186 * xDU;
				bottomRatio: 0; bottomInset: -66 * yDU);
		contents: 'View Style';
		startGroup;
		noTabStop;
		font: SysFont.
	mainView addSubpane: viewStyleGroup! !

!PRichEdit methods !  
styles

    ^#(#defaultStyle #readOnly #noBorder #readOnlyNoBorder)! !

!WBTabControlEditor methods ! 
setLabel: aString

    | item |
    (item := pages selectedItem ifNil: [^self]) label: aString.
    pages
        contents: pages contents;
        selectItem: item.! !

!PTrackBar methods !
style: newStyle

    style == newStyle ifTrue: [^self].
    style := newStyle.
    self wbRealWidget perform: newStyle asSymbol! !

!PTrackBar methods !
ticks

    ^self wbRealWidget ticks! !

!WBListViewEditor class methods ! 
wbBasicVersion

	"Private - Answer the WindowBuilder Pro version.
		Generated in: Visual Smalltalk Enterprise 3.1.0 Win32"

	^3.1! !

!StatusWindow methods !  
wbHeight
	"Answer the minimum height of the status bar."
	#addedByOSI.
	^self height ifNil: [0]! !

!WBTabControlEditor methods !
up

    | item index |
    (item := pages selectedItem) ifNil: [^self].
    index := pages indexOf: item.
    index == 1 ifTrue: [^self].
    pages contents
        removeIndex: index;
        add: item beforeIndex: index - 1.
    pages
        contents: pages contents;
        selectItem: item.! !

!WBTrackBarEditor methods ! 
preInitWindow

    super preInitWindow.
    thePane isVertical
        ifTrue: [(self paneNamed: 'Vertical') turnOn]
        ifFalse: [(self paneNamed: 'Horizontal') turnOn].
    thePane ticksOnLeft
        ifTrue: [(self paneNamed: 'Ticks on Left/Top') turnOn]
        ifFalse: [
            thePane ticksOnBoth
                ifTrue: [(self paneNamed: 'Ticks on Both Sides') turnOn]
                ifFalse: [
                    (self paneNamed: 'Ticks on Right/Bottom') turnOn]].! !

!WBRichTextEditor methods !
ok

    thePane wbRealWidget
        propertyAt: #whenValid put: (OrderedCollection new: 1);
        propertyAt: #wbUnformattedContents put: contents contents;
        formattedContents: contents wbFormattedContents.
    super ok! !

!PStatusWindow methods !
styles

    ^#(#bottom #top)! !

!WBTabControlEditor methods !
initWindow

    | thePages |
    pages
        printSelector: #label;
        contents: (thePages := (thePane wbRealWidget pages
            ifNil: [OrderedCollection new])
            collect: [:page | page copy]).
    image contents: #(#'<none>'),(WBBitmaps keys asSortedCollection asArray).
    self setPageClassList.
    thePages isEmpty
        ifTrue: [self disableFields]
        ifFalse: [
            pages selectItem: thePages first.
            self enableFields.
            self select: thePages first].! !

!WBListViewEditor methods ! 
setHeadings

    WBHeaderEditor new openOn: thePane! !

!PTreeView methods !  
attributeEditor

    ^WBTreeViewEditor! !

!PRichEdit methods !   
style: newStyle

    style == newStyle ifTrue: [^self].
    style := newStyle.
    newStyle == #readOnly
        ifTrue: [self wbRealWidget readOnly: true; addBorderStyle]
        ifFalse: [
            newStyle == #noBorder
                ifTrue: [self wbRealWidget readOnly: false; removeBorderStyle]
                ifFalse: [
                    newStyle == #readOnlyNoBorder
                        ifTrue: [self wbRealWidget readOnly: true; removeBorderStyle]
                        ifFalse: [self wbRealWidget readOnly: false; addBorderStyle]]].! !

!PTrackBar methods ! 
attributeEditor

    ^WBTrackBarEditor! !

!PListView methods !   
headings

    ^self wbRealWidget headings! !

!TrackBar class methods !   
wbConstructPropertyManager
    "Construct the WindowBuilder property manager
        based on the Digitalk property manager."

    #addedByOSI.
    ^super wbConstructPropertyManager
        "these need to be mutually exclusive"
        add: (StylePropertyAccessor new
            name: 'Vertical';
            style: 'TbsVert';
            pool: (Smalltalk at: #WinCommonControlConstants);
            wbAddStyle: #vertical);
        addNames: #('Vertical' 'Horizontal') toPage: 'Orientation';
        "these need to be mutually exclusive"
        add: (StylePropertyAccessor new
            name: 'Ticks on Left/Top';
            style: 'TbsLeft';
            pool: (Smalltalk at: #WinCommonControlConstants);
            wbAddStyle: #ticksLeft);
        add: (StylePropertyAccessor new
            name: 'Ticks on Right/Bottom';
            style: 'TbsRight';
            pool: (Smalltalk at: #WinCommonControlConstants);
            wbAddStyle: #ticksRight);
        add: (StylePropertyAccessor new
            name: 'Ticks on Both Sides';
            style: 'TbsBoth';
            pool: (Smalltalk at: #WinCommonControlConstants);
            wbAddStyle: #ticksBoth);
        addNames: #('Ticks on Left/Top' 'Ticks on Right/Bottom' 'Ticks on Both Sides') toPage: 'Ticks';
        add: (StylePropertyAccessor new
            name: 'Enable Range Selection';
            style: 'TbsEnableselrange';
            pool: (Smalltalk at: #WinCommonControlConstants);
            wbAddStyle: #enableRangeSelection);
        addNames: #('Enable Range Selection') toPage: 'Style';
        add: (SelectorPropertyAccessor new name: 'Ticks'; get: #ticks; set: #ticks: ; format: 'Array');
        yourself! !

!TabControlPage methods !
pageClass: pageClass
    | page |
    #addedByOSI.
    controls := OrderedCollection new.
    (page := (pageClass ifNil: [^nil]) new)
        setName: label;
        layoutFrame: (LayoutFrame topLeftRatio: 0 @ 0 bottomRightRatio: 1 @ 1).
    self addSubpane: page.! !

!WBRichTextEditor methods ! 
changeFont

    contents changeFont! !

!PListView methods !  
style: newStyle

    style == newStyle ifTrue: [^self].
    style := newStyle.
    self wbRealWidget perform: newStyle asSymbol! !

!PSpinButton methods !  
backColor

    ^self wbRealWidget backColor ifNil: [self defaultBackColor]! !

!PListView methods !   
setStyleFrom: aRealStyle
    "Do Nothing"! !

!PUpDown methods !   
usesColor

    ^false! !

!PHeader methods !  
hasBorder

    ^self style == #buttons or: [self style == #noButtons]! !

!PStatusWindow methods !
usesColor

    ^false! !

!PTrackBar methods !
styles

    ^#(#horizontal #vertical)! !

!PRichEdit methods !
usesFont

    ^false! !

!PTabControl methods !   
pages

    ^self wbRealWidget pages ifNil: [#()]! !

!PHeader methods !   
defaultSize

    ^200 @ self suggestedSize y! !

!HeaderItem methods !
wbStoreOn: aStream
        "Answer the receiver represented as a String
         from which it can be reconstructed."

    aStream
        nextPut: $(;
        nextPutAll: self class name; space;
        nextPutAll: #new; space;
        nextPutAll: #object:; space;
        nextPutStringConstant: self object.
    width isNil ifFalse: [aStream nextPut: $;; space; nextPutAll: #width:; space; nextPutAll: width printString].
    alignment isNil ifFalse: [aStream nextPut: $;; space; nextPutAll: #alignment:; space; nextPutAll: alignment storeString].
    image isNil ifFalse: [aStream nextPut: $;; space; nextPutAll: #image:; space; nextPutBitmap: image].
    aStream nextPut: $).! !

!WBUpDownEditor methods !  
preInitWindow

    super preInitWindow.
    thePane isHorizontal
        ifTrue: [(self paneNamed: 'Horizontal') turnOn]
        ifFalse: [(self paneNamed: 'Vertical') turnOn].! !

!WBTabControlEditor methods ! 
select: selectedItem

    label contents: selectedItem label.
    image setValue: (selectedItem image isNil
        ifTrue: [self noneString]
        ifFalse: [WBBitmaps keyAtValue: selectedItem image]).
    toolTip contents: selectedItem tipText.
    pageClass text: (selectedItem pageClass isNil
        ifTrue: [self noneString]
        ifFalse: [selectedItem pageClass name]).
    self enableFields.! !

!PStatusWindow methods !  
configureWidget: x y: y width: width height: height borderWidth: borderWidth
	"Do nothing."! !

!PTrackBar methods !   
contents

    ^self ticks asSortedCollection asArray
        collect: [:tick | tick asString]! !

!TabControl class methods !
wbConstructPropertyManager
    "Construct the WindowBuilder property manager
        based on the Digitalk property manager."

    #addedByOSI.
    ^super wbConstructPropertyManager
        add: (StylePropertyAccessor new
            name: 'Buttons';
            style: 'TcsButtons';
            pool: WinCommonControlConstants;
            wbAddStyle: #'buttons: true';
            wbRemoveStyle: #'buttons: false');
        add: (SelectorPropertyAccessor new
            name: 'Pages';
            get: #pages;
            set: #setPages:;
            format: 'OrderedCollection');
        add: (SelectorPropertyAccessor new
            name: 'Demand Load';
            get: #demandLoad;
            set: #demandLoad:;
            format: 'Boolean');
        add: (StylePropertyAccessor new
            name: 'Fixed Width';
            style: 'TcsFixedwidth';
            pool: WinCommonControlConstants;
            wbAddStyle: #'fixedWidth: true';
            wbRemoveStyle: #'fixedWidth: false');
        add: (StylePropertyAccessor new
            name: 'Multiple Lines';
            style: 'TcsMultiline';
            pool: WinCommonControlConstants;
            wbAddStyle: #'multipleLines: true';
            wbRemoveStyle: #'multipleLines: false');
        add: (StylePropertyAccessor new
            name: 'Ragged Right';
            style: 'TcsRaggedright';
            pool: WinCommonControlConstants;
            wbAddStyle: #'raggedRight: true';
            wbRemoveStyle: #'raggedRight: false');
        add: (StylePropertyAccessor new
            name: 'Tool Tips';
            style: 'TcsTooltips';
            pool: WinCommonControlConstants;
            wbAddStyle: #'toolTips: true';
            wbRemoveStyle: #'toolTips: false');
        wbAddEvent: (
            WBEventDescription new
                event: #drawItem: ;
                argumentNames: #('index'));
        wbAddEvent: (
            WBEventDescription new
                event: #changedPageNumber: ;
                argumentNames: #('pageNumber'));
        wbAddEvent: (
            WBEventDescription new
                event: #changed: ;
                argumentNames: #('aPage'));
        wbAddEvent: (
            WBEventDescription new
                event: #aboutToChange ;
                argumentNames: #( ));
        wbAddEvent: (
            WBEventDescription new
                event: #inputOccurred ;
                argumentNames: #( ));
        yourself! !

!PHeader methods !
readSpecificsFrom: aPane

    self style: ((aPane hasStyle: HdsButtons)
        ifTrue: [
            aPane hasBorderStyle
                ifTrue: [#buttons]
                ifFalse: [#noBorder]]
        ifFalse: [
            aPane hasBorderStyle
                ifTrue: [#noButtons]
                ifFalse: [#noButtonsOrBorder]]).! !

!PRichEdit methods !
setStyleFrom: aRealStyle
    "Do Nothing"! !

!PStatusWindow methods ! 
changesSize

	^true! !

!TreeView methods !   
wbGetIndent
	"Private - Answer the receiver's indent in pixels."

	^self propertyAt: #indent ifAbsent: [0].! !

!PTrackBar methods ! 
readSpecificsFrom: aPane

    self style: (aPane isVertical
        ifTrue: [#vertical]
        ifFalse: [#horizontal]).! !

!PListView methods !   
drawHeading: heading in: headingRect with: aPen

    | innerRect just |
	aPen fill: headingRect color: Color gray.
    self hasButtons
        ifTrue: [
            aPen
                foreColor: Color white;
                lineFrom: headingRect leftTop to: (headingRect rightTop left: 1);
                lineFrom: headingRect leftTop to: (headingRect leftBottom up: 1);
                foreColor: Color black;
                lineFrom: (headingRect leftBottom up: 1) to: (headingRect rightBottom up: 1);
                lineFrom: (headingRect rightTop left: 1) to: (headingRect rightBottom leftAndUp: 1);
                foreColor: Color darkGray;
                lineFrom: (headingRect leftBottom rightAndUp: 1@2) to: (headingRect rightBottom leftAndUp: 1@2);
                lineFrom: (headingRect rightTop leftAndDown: 2@1) to: (headingRect rightBottom leftAndUp: 2)]
        ifFalse: [
            aPen
                foreColor: Color white;
                lineFrom: (headingRect leftBottom up: 1) to: (headingRect rightBottom up: 1);
                lineFrom: (headingRect rightTop left: 1) to: (headingRect rightBottom leftAndUp: 1);
                foreColor: Color darkGray;
                lineFrom: (headingRect leftBottom rightAndUp: 1@2) to: (headingRect rightBottom leftAndUp: 1@2);
                lineFrom: (headingRect rightTop leftAndDown: 2@1) to: (headingRect rightBottom leftAndUp: 2)].
    (heading object isNil or: [heading object isEmpty])
        ifTrue: [^self].
    innerRect := headingRect insetBy: 6 @ ((headingRect height - self font height) // 2).
    just :=  (Array
        with: SsLeftnowordwrap
        with: SsRight
        with: SsCenter) at: (#(#left #right #center) indexOf: (heading alignment ifNil: [#left])).
    aPen
        foreColor: Color black;
        backColor: Color gray;
        setTextAlign: TaTop;
        winDrawText: heading object in: innerRect format: just.! !

!WBHeaderEditor methods !   
initWindow

    | headings |
    list
        printSelector: #object;
        contents: (headings := (thePane wbRealWidget headings
            ifNil: [OrderedCollection new])
            collect: [:heading | heading copy]).
    width contents: #(#'<dynamic>').
    alignment contents: #(#'<dynamic>' #left #center #right).
    image contents: #(#'<dynamic>'),(WBBitmaps keys asSortedCollection asArray).
    headings isEmpty
        ifTrue: [self disableFields]
        ifFalse: [
            list selectItem: headings first.
            self enableFields.
            self select: headings first].
    thePane allowsHeaderImages
        ifFalse: [
            (self paneNamed: 'imageLabel') hideWindow.
            image hideWindow].! !

!PUpDown methods !  
attributeEditor

    ^WBUpDownEditor! !

!WBTabControlEditor methods !
other

    | newPaneClass |
    (newPaneClass := (WBChoosePaneDialog new
        classList: (SubPane allSubclasses reject: [:class |
            (class symbol beginsWith: ' ') | class isWBInternalClass])) result) isNil
        ifTrue: [^self].
    self setPageClass: newPaneClass name.
    pageClass text: newPaneClass name.! !

!PStatusWindow methods !   
moveWidget: x y: y
	"Do nothing."! !

!PTabControl methods !   
displayFirstPageIn: innerRect with: aPen

    | thePage region clipRect |
    thePage := self firstPage ifNil: [^self].
    thePage reframe: innerRect.
    region := aPen setClipRect: (clipRect := innerRect intersect: thePage rect).
    thePage displayWith: aPen clipRect: clipRect.
    aPen destroyRegion: region.! !

!WBStatusWindowEditor methods !   
up

    | item index |
    (item := statusFields selectedItem) ifNil: [^self].
    index := statusFields indexOf: item.
    index == 1 ifTrue: [^self].
    statusFields contents
        removeIndex: index;
        add: item beforeIndex: index - 1.
    statusFields
        contents: statusFields contents;
        selectItem: item.! !

!PSpinButton methods !   
attributeEditor

    ^WBListEditor! !

!PTabControl methods ! 
displayPageTab: page in: tabRect with: aPen

	| innerRect |
	aPen
		fill: tabRect color: Color gray;
		foreColor: Color white;
		lineFrom: tabRect leftBottom to: (tabRect leftTop down: 2);
		lineFrom: (tabRect leftTop down: 2) to: (tabRect leftTop right: 2);
		lineFrom: (tabRect leftTop right: 2) to: (tabRect rightTop left: 3);
		foreColor: Color darkGray;
		lineFrom: (tabRect rightTop leftAndDown: 2@1) to: (tabRect rightBottom left: 2);
		foreColor: Color black;
		lineFrom: (tabRect rightTop leftAndDown: 1@2) to: (tabRect rightBottom left: 1);
		foreColor: Color black;
		backColor: Color gray;
		setTextAlign: TaTop.
	page image isNil
		ifTrue: [
			(page label isNil or: [page label isEmpty])
				ifFalse: [
					innerRect := tabRect insetBy: 6 @ ((tabRect height - self font height) // 2).
					aPen 
						font: self font;
						winDrawText: page label in: innerRect format: SsLeftnowordwrap]]
		ifFalse: [
			innerRect := (tabRect leftTop rightAndDown: 6@2) extentFromLeftTop: page image extent.
			aPen
				copyBitmap: page image
				from: page image boundingBox
				to: innerRect.
			(page label isNil or: [page label isEmpty])
				ifFalse: [
					innerRect := tabRect insetBy: 6 @ ((tabRect height - self font height) // 2).
					innerRect := (innerRect leftTop right: page image width + 4) rightBottom: innerRect rightBottom.
					aPen 
						font: self font;
						winDrawText: page label in: innerRect format: SsLeftnowordwrap]].! !

!PTrackBar methods !
rangeSelectionEnabled

    ^self wbRealWidget hasStyle: TbsEnableselrange! !

!PTrackBar methods !
displayHorizontalWith: aPen

    | lineRect innerRect percentage barPoint tickStart tickEnd tickPos |
    lineRect := (self rect leftTop rightAndDown: 8@9) rightBottom: (self rect rightTop leftAndDown: 8@13).
    self ticksOnLeft
        ifTrue: [lineRect := (lineRect leftTop down: 10) rightBottom: (lineRect rightBottom down: 10)].
    self ticksOnBoth
        ifTrue: [lineRect := (lineRect leftTop down: 9) rightBottom: (lineRect rightBottom down: 9)].
    self rangeSelectionEnabled
        ifTrue: [lineRect := (lineRect leftTop up: 4) rightBottom: (lineRect rightBottom down: 7)].
    innerRect := self lookPolicy
        displayWithMinorBorder: aPen
        rect: lineRect
        backColor: self backColor.
    innerRect height > 0
        ifTrue: [aPen fill: innerRect color: Color white].
    percentage :=
        (self wbRealWidget position - self wbRealWidget minimum) /
        (self wbRealWidget maximum - self wbRealWidget minimum).
    barPoint := (lineRect left + 5 + (lineRect width - 11 * percentage)) truncated @ innerRect center y.
    self ticksOnBoth
        ifTrue: [
            self
                drawPointedBoxWith: aPen
                at: ((barPoint leftAndUp: 5@10) rightBottom: (barPoint rightAndDown: 6@11))
                direction: nil.
            tickStart := (lineRect left + 5) @ (lineRect center y up: 12).
            tickEnd := (lineRect right - 6) @ (lineRect center y up: 12).
            aPen
                foreColor: Color black;
                lineFrom: tickStart to: (tickStart up: 4);
                lineFrom: tickEnd to: (tickEnd up: 4).
            self ticks do: [:tick |
                percentage :=
                    (tick - self wbRealWidget minimum) /
                    (self wbRealWidget maximum - self wbRealWidget minimum).
                tickPos := (tickStart x + ((tickEnd x - tickStart x) * percentage) truncated) @ tickStart y.
                aPen lineFrom: tickPos to: (tickPos up: 3)].
            tickStart := (lineRect left + 5) @ (lineRect center y down: 12).
            tickEnd := (lineRect right - 6) @ (lineRect center y down: 12).
            aPen
                lineFrom: tickStart to: (tickStart down: 4);
                lineFrom: tickEnd to: (tickEnd down: 4).
            self ticks do: [:tick |
                percentage :=
                    (tick - self wbRealWidget minimum) /
                    (self wbRealWidget maximum - self wbRealWidget minimum).
                tickPos := (tickStart x + ((tickEnd x - tickStart x) * percentage) truncated) @ tickStart y.
                aPen lineFrom: tickPos to: (tickPos down: 3)]]
        ifFalse: [
            self ticksOnLeft
                ifTrue: [
                    self
                        drawPointedBoxWith: aPen
                        at: ((barPoint leftAndUp: 5@11) rightBottom: (barPoint rightAndDown: 6@10))
                        direction: #up.
                    tickStart := (lineRect left + 5) @ (lineRect center y up: 12).
                    tickEnd := (lineRect right - 6) @ (lineRect center y up: 12).
                    aPen
                        foreColor: Color black;
                        lineFrom: tickStart to: (tickStart up: 4);
                        lineFrom: tickEnd to: (tickEnd up: 4).
                    self ticks do: [:tick |
                        percentage :=
                            (tick - self wbRealWidget minimum) /
                            (self wbRealWidget maximum - self wbRealWidget minimum).
                        tickPos := (tickStart x + ((tickEnd x - tickStart x) * percentage) truncated) @ tickStart y.
                        aPen lineFrom: tickPos to: (tickPos up: 3)]]
                ifFalse: [
                    self
                        drawPointedBoxWith: aPen
                        at: ((barPoint leftAndUp: 5@9) rightBottom: (barPoint rightAndDown: 6@13))
                        direction: #down.
                    tickStart := (lineRect left + 5) @ (lineRect center y down: 13).
                    tickEnd := (lineRect right - 6) @ (lineRect center y down: 13).
                    aPen
                        foreColor: Color black;
                        lineFrom: tickStart to: (tickStart down: 4);
                        lineFrom: tickEnd to: (tickEnd down: 4).
                    self ticks do: [:tick |
                        percentage :=
                            (tick - self wbRealWidget minimum) /
                            (self wbRealWidget maximum - self wbRealWidget minimum).
                        tickPos := (tickStart x + ((tickEnd x - tickStart x) * percentage) truncated) @ tickStart y.
                        aPen lineFrom: tickPos to: (tickPos down: 3)]]].! !

!PStatusWindow methods !
setStyleFrom: aRealStyle
    "Do Nothing"! !

!VideoPane class methods !   
wbConstructPropertyManager
    "Construct the WindowBuilder property manager
        based on the Digitalk property manager."

    #addedByOSI.
    ^super wbConstructPropertyManager
        add: (StylePropertyAccessor new
            name: 'Border';
            style: 'WsBorder';
            pool: OperatingSystemConstants;
            wbAddStyle: #addBorderStyle;
            wbRemoveStyle: #removeBorderStyle);
        add: (SelectorPropertyAccessor new name: 'Stretch'; get: #stretch; set: #stretch: ; format: 'Boolean');
        addNames: #('Stretch') toPage: 'Style';
        yourself! !

!PTabControl methods ! 
update

	firstPage := nil.
	super update.! !
 
UndefinedObject removeSelector: #osiIgnoredInitializerSource!
   
"======== Initializers"!