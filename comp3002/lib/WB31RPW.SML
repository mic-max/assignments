"3.0.0.7"
!  

PARTSInterfaceList subclass: #WBPARTSInterfaceList
  instanceVariableNames: 
    ' wbItems '
  classVariableNames: ''
  poolDictionaries: ''!   

Message subclass: #WBMessage
  instanceVariableNames: 
    ' source sourceSelector '
  classVariableNames: ''
  poolDictionaries: ''!   

WBMessage subclass: #WBPartMessage
  instanceVariableNames: 
    ' receiverName '
  classVariableNames: ''
  poolDictionaries: ''!  

WBMessage subclass: #WBPartEvent
  instanceVariableNames: 
    ' sourceName '
  classVariableNames: ''
  poolDictionaries: ''!  

WBPARTSInterfaceList subclass: #WBPARTSEventList
  instanceVariableNames: ''
  classVariableNames: ''
  poolDictionaries: ''!

WBPARTSInterfaceList subclass: #WBPARTSMessageList
  instanceVariableNames: 
    ' wbItemTable '
  classVariableNames: ''
  poolDictionaries: ''!

!ViewManager methods ! 
doesNotUnderstand: message
        "Sent to the receiver by the virtual machine when the <message>
        sent to the receiver was not implemented by the receiver."
	#addedByOSI.
	self isWBWindow ifTrue: [
		^(self partMessages
			wbItemFor: message selector
			ifAbsent: [ ^super doesNotUnderstand: message ]
		) evaluateWithArguments: message arguments ].
	^super doesNotUnderstand: message! !

!WBPartMessage methods ! 
receiverName
		"Answer the receiver's name."
	^receiverName ifNil: [
		(receiver respondsTo: #paneName)
			ifTrue: [ receiver paneName ]
			ifFalse: [ '' ] ]! !

!WBPartEvent methods !   
collectArguments: evaluationArguments
		"Private - answer the action arguments with which to evaluate
		the receiver, collecting from the <evaluationArguments>
		and the predefined arguments in the receiver. "
	| answer predefinedArgs size |
	answer := self arguments shallowCopy.
	predefinedArgs := answer at: answer size.
	^answer
		at: answer size put: (
			(evaluationArguments size = predefinedArgs size)
				ifTrue: [ evaluationArguments ]
				ifFalse: [
					size := evaluationArguments size min: predefinedArgs size.
					(evaluationArguments copyFrom: 1 to: size),
					(predefinedArgs copyFrom: size + 1 to: predefinedArgs size) ] );
		yourself! !

!Object methods ! 
wbPartMessages

	"WARNING!! This method was automatically generated by 
	WindowBuilder. Code you add here which does not conform to 
	the WindowBuilder API will probably be lost the next time 
	you save your wb-parts definition."

	#generated.
	^WBPARTSMessageList new
		items: #( )
		separators: #( )
		defaultItem: nil;
		yourself! !

!CompositePane methods !   
isPARTSNestedPart
        "Answer whether the receiver is a PARTS NestedPart."
    ^true! !

!WBPartMessage class methods !   
source: anObject sourceSelector: sourceSymbol
	receiverName: aString selector: aSymbol
		"Answer a new initialized instance of the receiver."
	^self new
		source: anObject
		sourceSelector: sourceSymbol
		receiverName: aString
		selector: aSymbol! !

!WBMessage class methods !
owner: anObject name: aString selector: selector
        "Answer an instance of the receiver representing a message."
    ^self new
		owner: anObject
		name: aString
		selector: selector! !

!ViewManager methods !  
partAddUnder: parentWindow wrapper: myWrapper
        "Insert the receiver into a PARTS application
        as a child of parentWindow.  Save myWrapper
        if necessary to respond correctly when
        the #partWrapper message is sent. "
	#addedByOSI.
	self partWrapper: myWrapper.
    ^super partAddUnder: parentWindow wrapper: myWrapper.! !

!WBPARTSInterfaceList class methods !   
defaultIconFileName
        "Answer the window builder parts icon."
	^'WB.ICO'! !

!WBPartEvent methods ! 
wbLinkPartEvent
		"Private - Link the source to the receiver."
	(self source ifNil: [ ^self ])
		when: self sourceSelector
		evaluate: self.! !

!WBPartEvent class methods !   
sourceName: aString sourceSelector: sourceSymbol
	receiver: anObject triggeredEvent: aSymbol
		"Answer a new initialized instance of the receiver."
	^self new
		sourceName: aString
		sourceSelector: sourceSymbol
		receiver: anObject
		triggeredEvent: aSymbol! !

!ApplicationCoordinator methods ! 
wbPartEvents

	"WARNING!! This method was automatically generated by 
	WindowBuilder. Code you add here which does not conform to 
	the WindowBuilder API will probably be lost the next time 
	you save your wb-parts definition."

	#generated.
	^WBPARTSEventList new
		items: self class wbPartEventItems
		separators: #( )
		defaultItem: nil;
		addWbItem: (
			WBPartEvent
				sourceName: 'mainView'
				sourceSelector: #aboutToClose
				receiver: self
				triggeredEvent: #aboutToClose );
		addWbItem: (
			WBPartEvent
				sourceName: 'mainView'
				sourceSelector: #closed
				receiver: self
				triggeredEvent: #closed );
		addWbItem: (
			WBPartEvent
				sourceName: 'mainView'
				sourceSelector: #opened
				receiver: self
				triggeredEvent: #opened );
		yourself! !

!CompositePane methods ! 
close
        "Private - Close the subpane and reinitialize."
		"For PARTS Support."
	super close.
    self partEvents wbItems do: [ :each | each wbUnlinkPartEvent ].
    self partMessages wbItems do: [ :each | each wbUnlinkPartMessage ].
	children := nil.! !

!ViewManager methods !   
partWrapper
        " Answer the PARTS wrapper of the receiver. "
	#addedByOSI.
    ^self propertyAt: #partsWrapper ifAbsent: [ nil ]! !

!ViewManager methods ! 
partWrapper: aWrapper
        " Private - set the PARTS wrapper of the receiver. "
	#addedByOSI.
    self propertyAt: #partsWrapper put: aWrapper.! !

!WBPARTSInterfaceList class methods ! 
defaultIcon
        "Answer the window builder parts icon."
	^Icon fromFile: (
		(File findFileName: self defaultIconFileName)
			ifNil: [ ^nil ] )! !

!WBPARTSMessageList methods !   
wbItemFor: anItem ifAbsent: aBlock
		"Private - Answer the wbItem corresponding with anItem."
	^self wbItemTable
		at: anItem
		ifAbsent: aBlock! !

!Object class methods !
wbPartEventItems

		"WARNING!! This method was automatically generated by 
		WindowBuilder. Code you add here which does not conform to 
		the WindowBuilder API will probably be lost the next time 
		you save your wb-parts definition."

	^#()! !

!WBPARTSMessageList methods ! 
wbItemTable
		"Answer the table."
	^wbItemTable ifNil: [
		wbItemTable := IdentityDictionary new.
		self wbItems do: [ :aWbItem |
			wbItemTable at: aWbItem sourceSelector put: aWbItem ].
		wbItemTable ]! !

!CompositePane methods !  
addSubpanesForWBParts
		"Add the subpanes for parts."
		"For PARTS Support."
	super addSubpanesForWBParts.
	self partEvents wbItems do: [ :each | each wbLinkPartEvent ].! !

!ViewManager methods !
partViews: anOrderedCollection
	"Private - Used by partMirrorCopyReal to set the copy's instance variable."

	#addedByOSI.
	views := anOrderedCollection.! !

!WBPARTSInterfaceList methods !   
concatenateSeparated: anInterfaceList defaultItem: newDefaultItem
        " Answer anInterfaceList appended to the receiver
        with a separator line between the two lists. "
	^(super
		concatenateSeparated: anInterfaceList
		defaultItem: newDefaultItem)
		wbItems: wbItems deepCopy;
		yourself! !

!WBPARTSInterfaceList methods !   
wbItemsCreate
		"Private - Answer the receiver's new wbItems."
	^OrderedCollection new! !

!WBMessage methods !   
sourceSelector: aSymbol
		"Set the receiver's source selector."
	sourceSelector := aSymbol.! !

!ViewManager methods !
partEvents
	"Answer the PARTS event interface of the receiver. "

	| answer |
	#addedByOSI.
	^(self propertyAt: #wbPartEvents) ifNil: [
		"Don't cashe the events if editing..."
		self partIsEditing
			ifTrue: [self wbPartEvents]
			ifFalse: [
				answer := self wbPartEvents.
				self propertyAt: #wbPartEvents put: answer.
				answer]]! !

!ViewManager methods ! 
partAddedTo: anApplication
		" The receiver has just been added to anApplication.
		Create any links or register event handlers if desired. "
	#addedByOSI.
	( anApplication partWrapper hasLinksForEvent:  #open )
		ifFalse: [
			anApplication partEditor
				createLinkFrom: anApplication
				event: #open
				to: self
				message: #open ].! !

!WBPartEvent methods ! 
triggeredEvent
		"Answer the triggered event selector."
	^self arguments first! !

!WBPartMessage methods !   
source: anObject sourceSelector: sourceSymbol
	receiverName: aString selector: aSymbol
		"Answer a new initialized instance of the receiver."
	source := anObject.
	sourceSelector := sourceSymbol.
	receiverName := aString.
	selector := aSymbol.
	arguments := Array new: (
		Message numberOfArgumentsFor: aSymbol ).! !

!WBPartEvent methods !
triggeredEvent: aSymbol
		"Set the triggered event selector."
	self arguments at: 1 put: aSymbol.! !

!WBMessage methods !
hash
        "Answer an integer hash value for the receiver. Invariants:
        the hash value of an object must be constant over time;
        two objects that compare equal must have equal hash values."

		"The receiver of WBMessage may change over time
			so the super method would not return a constant value."

	^selector hash! !

!CompositePane methods !   
isLinked
		"Answer true indicating that the receiver is linked."
		"For PARTS support."
	^true! !

!WBPartEvent methods !
sourceName: aString sourceSelector: sourceSymbol
	receiver: anObject triggeredEvent: aSymbol
		"Initialize the receiver."
	sourceName := aString.
	sourceSelector := sourceSymbol.
	receiver := anObject.
	selector := #triggerEvent:withArguments:.
	arguments :=
		Array with: aSymbol with: (
			Array new: (
				Message numberOfArgumentsFor: aSymbol ) ).! !

!ViewManager methods !
wbPartEvents

	"WARNING!! This method was automatically generated by 
	WindowBuilder. Code you add here which does not conform to 
	the WindowBuilder API will probably be lost the next time 
	you save your wb-parts definition."

	#generated.
	^WBPARTSEventList new
		items: self class wbPartEventItems
		separators: #( )
		defaultItem: nil;
		addWbItem: (
			WBPartEvent
				sourceName: 'mainView'
				sourceSelector: #aboutToClose
				receiver: self
				triggeredEvent: #aboutToClose );
		addWbItem: (
			WBPartEvent
				sourceName: 'mainView'
				sourceSelector: #closed
				receiver: self
				triggeredEvent: #closed );
		addWbItem: (
			WBPartEvent
				sourceName: 'mainView'
				sourceSelector: #opened
				receiver: self
				triggeredEvent: #opened );
		yourself! !

!WBPARTSMessageList methods !
clearWbItemTable
		"Clear the lookup table."
	wbItemTable := nil.! !

!ViewManager methods !  
partHint
        "Answer a string which gives a brief description
        of the receiver part. "
	#addedByOSI.
    ^self printString! !

!CompositePane methods !  
fileName
		"Answer nil indicating that the receiver is not stored elsewhere."
		"For PARTS support."
	^nil! !

!WBPartEvent methods !
shallowCopy
		"Answer a copy of the receiver which shares
			the receiver instance variables."
	^self class
		sourceName: sourceName
		sourceSelector: sourceSelector
		receiver: receiver
		triggeredEvent: self triggeredEvent! !

!WBPartMessage methods !
shallowCopy
        "Answer a copy of the receiver which shares
         the receiver instance variables."
	^self class
		source: source
		sourceSelector: sourceSelector
		receiverName: receiverName
		selector: selector! !

!Object methods !
wbPartEvents

	"WARNING!! This method was automatically generated by 
	WindowBuilder. Code you add here which does not conform to 
	the WindowBuilder API will probably be lost the next time 
	you save your wb-parts definition."

	#generated.
	^WBPARTSEventList new
		items: self class wbPartEventItems
		separators: #( )
		defaultItem: nil;
		yourself! !

!WBPartEvent methods !  
wbUnlinkPartEvent
        "Private - Link the source to the receiver."
    source := nil.! !

!ApplicationCoordinator methods !   
wbPartMessages

	"WARNING!! This method was automatically generated by 
	WindowBuilder. Code you add here which does not conform to 
	the WindowBuilder API will probably be lost the next time 
	you save your wb-parts definition."

	#generated.
	^WBPARTSMessageList new
		items: #(#abortClose #close #open #openCenteredOnMouse #openRelativeTo:offset: #openWithParent: #yourself)
		separators: #( )
		defaultItem: #open;
		addWbItem: (
			WBPartMessage
				source: self
				sourceSelector: #abortClose
				receiverName: 'mainView'
				selector: #abortClose );
		yourself! !

!ApplicationCoordinator class methods !  
wbPartEventItems

	"WARNING!! This method was automatically generated by 
	WindowBuilder. Code you add here which does not conform to 
	the WindowBuilder API will probably be lost the next time 
	you save your wb-parts definition."

	#generated.
	^#(#aboutToClose #closed #opened)! !

!CompositePane class methods ! 
wbPartEventItems

	| answer |
	answer := self constructEventsTriggered.
	CompositePane constructEventsTriggered
		do: [ :each | answer remove: each ifAbsent: [ ] ].
	answer addAll: #( #rightClicked #tabbed ).
	^answer asArray! !

!WBPartMessage methods !   
receiverName: aString
		"Set the receiver's name."
	receiverName :=
		(aString isString and: [ aString notEmpty ])
			ifTrue: [ aString ]
			ifFalse: [ nil ].! !

!WBPARTSInterfaceList methods ! 
addWbItem: aWbItem
		"Private - Add a WbItem."
	wbItems isNil ifTrue: [ wbItems := self wbItemsCreate ].
	^wbItems add: aWbItem! !

!WBPARTSInterfaceList methods !  
wbItems
		"Private - Answer the receiver's wbItems."
	^wbItems ifNil: [ self wbItemsCreate ]! !

!WBMessage methods ! 
source: anObject
		"Set the receiver's source."
	source := anObject.! !

!WBPartMessage methods ! 
receiver
        "Answer the receiver of the message."
    ^receiver ifNil: [
		source notNil & receiverName notNil
			ifTrue: [ receiver := source paneNamed: receiverName ]
			ifFalse: [ source ] ]! !

!ViewManager methods !  
wbUnlinkPartMessages
        "Private - Unlink the parts messages from the subpanes to the receiver."
    #addedByOSI.
    WBPartMessage.
    self isWBWindow ifTrue: [
        self partMessages wbItems do: [ :each |
            each wbUnlinkPartMessage ] ].! !

!CompositePane methods !
wbPartEvents

	"WARNING!! This method was automatically generated by 
	WindowBuilder. Code you add here which does not conform to 
	the WindowBuilder API will probably be lost the next time 
	you save your wb-parts definition."

	#generated.
	^WBPARTSEventList new
		items: self class wbPartEventItems
		separators: #( )
		defaultItem: nil;
		yourself! !

!ViewManager class methods !
eventsTriggered
        "Answer all the events which can be triggered
        by instances of the receiver."
    ^super eventsTriggered
		addAll: self wbPartEventItems;
		yourself! !

!ViewManager methods ! 
wbLinkPartEvents
		"Private - Link the parts events from the subpanes to the receiver."
	#addedByOSI.
	self isWBWindow ifTrue: [
		self partEvents wbItems do: [ :each |
			each wbLinkPartEvent ] ].! !

!WBMessage methods ! 
sourceSelector
		"Answer the receiver's source selector."
	^sourceSelector! !

!WBPARTSInterfaceList methods !
concatenate: anInterfaceList defaultItem: newDefaultItem
        " Answer anInterfaceList appended to the receiver. "
	^(super
		concatenate: anInterfaceList
		defaultItem: newDefaultItem)
		wbItems: wbItems deepCopy;
		yourself! !

!WBPartEvent methods !   
sourceName: aString
		"Set the source's name."
	sourceName :=
		(aString isString and: [ aString notEmpty ])
			ifTrue: [ aString ]
			ifFalse: [ nil ].! !

!ViewManager methods !
wbPartMessages

	"WARNING!! This method was automatically generated by 
	WindowBuilder. Code you add here which does not conform to 
	the WindowBuilder API will probably be lost the next time 
	you save your wb-parts definition."

	#generated.
	^WBPARTSMessageList new
		items: #(#abortClose #close #open #openCenteredOnMouse #openRelativeTo:offset: #openWithParent: #yourself)
		separators: #( )
		defaultItem: #open;
		addWbItem: (
			WBPartMessage
				source: self
				sourceSelector: #abortClose
				receiverName: 'mainView'
				selector: #abortClose );
		yourself! !

!WBPartMessage methods ! 
wbUnlinkPartMessage
        "Private - Link the source to the receiver."
    receiver := nil.! !

!CompositePane methods !
partMirrorCopyChildren: aDictionary to: copy
        " Private - mirror copy the child windows "
    copy children: (
		aDictionary
			at: ( children ifNil: [ ^self ] )
			put: ( children class new )
		).! !

!WBPartEvent methods !   
sourceName
		"Answer the source's name."
	^sourceName ifNil: [
		(source respondsTo: #paneName)
			ifTrue: [ source paneName ]
			ifFalse: [ '' ] ]! !

!CompositePane methods !   
doesNotUnderstand: message
        "Sent to the receiver by the virtual machine when the <message>
        sent to the receiver was not implemented by the receiver."
	^(self partMessages
			wbItemFor: message selector
			ifAbsent: [^super doesNotUnderstand: message]) 
			evaluateWithArguments: message arguments! !

!ViewManager class methods ! 
wbPartEventItems

	"WARNING!! This method was automatically generated by 
	WindowBuilder. Code you add here which does not conform to 
	the WindowBuilder API will probably be lost the next time 
	you save your wb-parts definition."

	#generated.
	^#(#aboutToClose #closed #opened)! !

!WBMessage methods !   
source
		"Answer the receiver's source."
	^source! !

!WBPARTSInterfaceList methods ! 
copy
		"Answer a copy of the receiver."
	^self class new
		items: self items copy;
		defaultItem: self defaultItem;
		separators: self separators copy;
		wbItems: wbItems deepCopy;
		yourself! !

!ViewManager methods !   
wbUnlinkPartEvents
        "Private - Unlink the parts events from the subpanes to the receiver."
    #addedByOSI.
    WBPartEvent.
    self isWBWindow ifTrue: [
        self partEvents wbItems do: [ :each |
            each wbUnlinkPartEvent ] ].! !

!CompositePane methods !  
partHint
        "Answer a string which gives a brief description
        of the receiver part. "
    ^self printString! !

!WBPartEvent methods !   
source
        "Answer the source of the message."
    ^source ifNil: [
		receiver notNil & sourceName notNil
			ifTrue: [ source := receiver paneNamed: sourceName ]
			ifFalse: [ receiver ] ]! !

!CompositePane class methods !
eventsTriggered
        "Answer all the events which can be triggered
        by instances of the receiver."
    ^super eventsTriggered
		addAll: self wbPartEventItems;
		yourself! !

!WBPARTSMessageList methods !  
addWbItem: aWbItem
		"Private - Add a WbItem."
	self clearWbItemTable.
	^super addWbItem: aWbItem! !

!WBPARTSInterfaceList methods !
wbItems: aCollection
		"Private - Set the receiver's wbItems."
	wbItems := aCollection.! !

!CompositePane methods !  
wbPartMessages

	"WARNING!! This method was automatically generated by 
	WindowBuilder. Code you add here which does not conform to 
	the WindowBuilder API will probably be lost the next time 
	you save your wb-parts definition."

	#generated.
	^WBPARTSMessageList new
		items: #(#backColor: #disable #enable #hideWindow #inspect #setFocus #setValue: #showWindow #value #yourself)
		separators: #( )
		defaultItem: #value;
		yourself! !

!CompositePane methods !  
partEvents
        " Answer the PARTS event interface of the receiver. "
	^self propertyAt: #wbPartEvents ifAbsentPut: [ self wbPartEvents ]! !

!CompositePane methods ! 
partMessages
		" Answer the PARTS message interface of the receiver. "
	^self propertyAt: #wbPartMessages ifAbsentPut: [ self wbPartMessages ]! !

!CompositePane methods !   
partMirrorCopyPropertiesToExclude
        " Private - answer the names of any properties
        implemented by the receiver which should be excluded
        when its properties dictionary is mirrorCopied. "

   ^super partMirrorCopyPropertiesToExclude, #( #orderedChildren #wbPartEvents #wbPartMessages )! !

!ViewManager methods !   
partMessages
	"Answer the PARTS message interface of the receiver. "

	| answer |
	#addedByOSI.
	^(self propertyAt: #wbPartMessages) ifNil: [
		"Don't cashe the messages if editing..."
		self partIsEditing
			ifTrue: [self wbPartMessages]
			ifFalse: [
				answer := self wbPartMessages.
				self propertyAt: #wbPartMessages put: answer.
				answer]]! !
   
UndefinedObject removeSelector: #osiIgnoredInitializerSource!
   
"======== Initializers"!