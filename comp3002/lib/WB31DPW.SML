"3.0.0.9"
!  

WBAttributeWindow subclass: #WBPARTSInterfaceEditor
  instanceVariableNames: 
    ' eventsRadioButton messagesRadioButton itemFilterPane selectorFilterPane sourceSelectorPane targetSelectorPane saveButton closeButton theWBPartEvents theWBPartMessages itemListPane selectorListPane itemFilter items itemSelected showEvents selectorFilter selectors selectorSelected wbEventList wbMessageList '
  classVariableNames: ''
  poolDictionaries: 
    ' ColorConstants OperatingSystemConstants '! 

WBCodeModule subclass: #WBPartsModule
  instanceVariableNames: 
    ' wbPartInterfaceList '
  classVariableNames: ''
  poolDictionaries: ''!

WBPartsModule subclass: #WBPartEventsModule
  instanceVariableNames: ''
  classVariableNames: ''
  poolDictionaries: ''! 

WBPartsModule subclass: #WBPartEventsTriggeredModule
  instanceVariableNames: ''
  classVariableNames: ''
  poolDictionaries: ''!

WBPartsModule subclass: #WBPartMessagesModule
  instanceVariableNames: ''
  classVariableNames: ''
  poolDictionaries: ''!

!WBPartEventsModule methods !  
defaultMessageSelector
		"Private - Answer the default message selector."
	^#wbPartEvents! !

!WBPARTSInterfaceEditor methods !   
messageTargetFor: aSymbolOrNil pane: aPane
		"Answer the target event selector."
	aSymbolOrNil ifNil: [ ^'' ].
	^(self wbMessageList wbItems
		detect: [ :wbItem |
			wbItem receiver = aPane
				and: [ wbItem selector = aSymbolOrNil ] ]
		ifNone: [ ^'' ] ) sourceSelector! !

!WBPARTSInterfaceEditor methods ! 
itemClassSelected
		"Answer the class of the item selected."
	| answer |
	answer := self itemSelected ifNil: [ ^nil ].
	answer class == WindowFrameObject ifTrue: [
		^answer isDialog
			ifTrue: [ DialogTopPane ]
			ifFalse: [ TopPane ] ].
	^(answer respondsTo: #realClass)
		ifTrue: [ answer realClass ]
		ifFalse: [ answer class ]! !

!WBToolBar methods !  
dropLocation
		"Answer the drag drop location."
	#osiHack.
	"For parts drag/drop support in wbpro development."
	^self propertyAt: #partsDragDropLocation! !

!WBPartsModule methods !  
generateBody
		"Private - Generate the method body."
	self stream indentBy: 1 during: [
		self generateGeneratedSymbol.
		self generateDefinition.
		self stream indentBy: 1 during: [
			self
				generateItems;
				generateSeparators;
				generateDefaultItem.
			self stream endMessage.
			self generateWBItems.
			self stream
				endMessage;
				cr; nextPutAll: #yourself;
				endExpression ] ].! !

!WBPARTSInterfaceEditor methods !
updateAll
		"Update all of the recevier's contents."
	self
		updateItemFilters;
		updateItemList;
		updateSelectorFilters;
		updateSelectorList;
		updateSourceSelector;
		updateTargetSelector.! !

!WBPartEventsModule methods !  
suggestedDefaultItems
		"Answer a collection of suggested default items."
	^#( #closed ), super suggestedDefaultItems! !

!WBPartMessagesModule methods ! 
sortedWBItems
		"Answer the wb items in sorted order."
	^(self wbItems
		reject: [ :eachWbItem |
			eachWbItem source == eachWbItem receiver
				and: [ eachWbItem sourceSelector == eachWbItem selector ] ] )
		asSortedCollection: [ :a :b |
			a sourceSelector < b sourceSelector ]! !

!WBPARTSInterfaceEditor class methods !  
prototypeName
		"Answer the string representing the edited window."
	^'<a Window>'! !

!WBPartsModule methods !   
defaultComment
		"Answer the default comment string."
	^self defaultPartsComment! !

!WBToolBar methods ! 
doDragDropAt: aPoint button: buttonIndex
        "Private - start a drag drop transfer with the receiver as the source."
    | sessionClass result |
    ( sessionClass := self dragSessionClass ) isNil
        ifTrue: [ sessionClass := DragDropSession defaultClass ].
	(sessionClass symbol == #PARTSCatalogDragSession) ifFalse: [
		^super doDragDropAt: aPoint button: buttonIndex ].
    self propertyAt: #wbDragSourceLocation put: aPoint.
    result := ( sessionClass source: self ) doDragDropAt: aPoint.
    self dragSourceSelection: nil.
    ^result! !

!WBPARTSInterfaceEditor class methods !
nullFilter
		"Answer the string representing the null filter."
	^'** All Panes **'! !

!WBPARTSInterfaceEditor methods !  
updateItemList

    "Callback for the #needsContents event triggered in the ListBox named 'itemListPane'.
     (Generated by WindowBuilder)"

	| itemNames name index |
	items := OrderedCollection new.
	itemNames := OrderedCollection new.
	self itemFilter isNil ifTrue: [
		items add: self prototype.
		itemNames add: self prototypeName.
		(name := self shellName ifNil: [ '' ]) notEmpty ifTrue: [
			items add: self shell.
			itemNames add: self shell printString ] ].
	self shellChildren do: [ :eachChild |
		((self itemFilter isNil
			or: [ self itemFilter == eachChild realClass ])
				and: [ (name := eachChild paneName ifNil: [ '' ]) notEmpty ]
		) ifTrue: [
			items add: eachChild.
			itemNames add: eachChild printString ] ].
	index := items indexOf: self itemSelected ifAbsent: [
		itemNames indexOf: self itemNameSelected ifAbsent: [ nil ] ].
	itemListPane contents: itemNames.
	index notNil ifTrue: [
		itemListPane selectIndex: index ].
	self itemSelected: index.! !

!WBPARTSInterfaceEditor methods ! 
updateSelectorList: aBoolean

    "Callback for the #needsContents event triggered in the ListBox named 'selectorListPane'.
     (Generated by WindowBuilder)"
	"If aBoolean, then force a repaint."

	| sel newSelectors |
	newSelectors := self showEvents
		ifTrue: [ self eventSelectors ]
		ifFalse: [ self messageSelectors ].
	selectors = newSelectors & aBoolean not ifFalse: [
		selectorListPane
			contents: (selectors := newSelectors);
			hideWindow;	"<---------- Force a repaint this way."
			showWindow ].
	sel := (selectors includes: self selector)
		ifTrue: [ self selector ] ifFalse: [ nil ].
	selectorListPane selection: sel.
	self selector: sel.
	self updateTargetSelector.! !

!WBPartsModule methods !  
sortedWBItems
		"Answer the wb items in sorted order."
	^self wbItems! !

!WBPARTSInterfaceEditor methods !   
showEvents: aBoolean
		"Show the reciever's events or messages."
	showEvents = aBoolean ifFalse: [
		showEvents := aBoolean.
		eventsRadioButton selection: showEvents.
		messagesRadioButton selection: showEvents not.
		self updateSelectorFilters.
		self updateSelectorList. ].! !

!WBPARTSInterfaceEditor class methods ! 
wbBasicVersion

	"Private - Answer the WindowBuilder Pro version.
		Generated in: Visual Smalltalk Enterprise 3.1.0 Win32"

	^3.1! !

!WBToolBar methods ! 
currentDragSession: aPartsDragDropSession
		"Store the drag drop session."
	#osiHack.
	"Needed to support drag/drop to parts workbench."! !

!WBPartsModule methods !
generateDefinition
		"Private - Generate the instance definition."
	self stream cr;
		nextPut: $^ ;
		nextPutAll: self definitionClass name;
		space;
		nextPutAll: #new.! !

!WindowBuilder class methods !  
defaultPartsIcon
	"Answer a new wb-parts icon."

	^PARTSApplication defaultIcon! !

!WBPARTSInterfaceEditor methods !
updateSelectorFilters

    "Callback for the #needsContents event triggered in the ComboBox named 'selectorFilterPane'.
     (Generated by WindowBuilder)"

	| filters filter |
	self itemSelected notNil ifTrue: [
		filters := self itemClassSelected withAllSuperclasses.
		filters := filters reject: [ :eachClass | eachClass isWBInternalClass ].
		filter := self showEvents ifTrue: [ filters size ] ifFalse: [ 1 ].
		filters := filters collect: [ :eachClass | eachClass symbol ].
		filter := filters at: filter.
	] ifFalse: [ filters := #( ) ].
	selectorFilterPane
		contents: filters;
		selection: filter.
	self selectorFilter: filter.! !

!WBPARTSInterfaceList methods !  
updatePaneNames: aCollection
		"Change the receiver."
	| answer |
	answer := false.
	self wbItems do: [ :each |
		(each updatePaneNames: aCollection) ifTrue: [
			answer := true ] ].
	^answer! !

!WBPARTSInterfaceEditor methods !
wbMessageList
		"Answer the message list."
	^wbMessageList! !

!WBPartMessage methods !   
updatePaneNames: aCollection
		"Change the receiver."
	| answer |
	answer := false.
	aCollection do: [ :eachView |
		receiver == eachView ifTrue: [
			receiverName = eachView paneName ifTrue: [ ^answer ].
			receiverName := eachView paneName.
			^true ].
		eachView children do: [ :eachChild |
			receiver == eachChild ifTrue: [
				receiverName = eachChild paneName ifTrue: [ ^answer ].
				receiverName := eachChild paneName.
				^true ] ] ].
	receiverName = '' ifTrue: [ ^answer ].
	receiverName := ''.
	^true! !

!WBPARTSInterfaceEditor methods !  
selector: aSymbolOrIntegerOrNil

    "Callback for the #changedIndex: event triggered in the ListBox named 'selectorListPane'.
     (Generated by WindowBuilder)"

	| newSelector |
	(newSelector := aSymbolOrIntegerOrNil) isSymbol ifFalse: [
		newSelector isInteger ifTrue: [
			newSelector := self selectors at: newSelector ] ].
	selectorSelected = newSelector ifFalse: [
		selectorSelected := newSelector.
		self updateSourceSelector.
		self updateTargetSelector ].! !

!WBPARTSInterfaceEditor methods ! 
shellClass
		"Answer the edited pane class."
	#osiHack.
	"Bad form... but it works."
	^self shell isDialog
		ifTrue: [ DialogTopPane ]
		ifFalse: [ TopPane ]! !

!WBPartMessagesModule methods ! 
defaultMessageSelector
		"Private - Answer the default message selector."
	^#wbPartMessages! !

!WBPartsModule methods !  
defaultCategory
		"Answer the default category for the receiver."
	^'parts support'! !

!WBPARTSInterfaceEditor methods ! 
itemSelected: anIntegerOrObjectOrNil

    "Callback for the #changedIndex: event triggered in the ListBox named 'itemListPane'.
     (Generated by WindowBuilder)"

	| newItemSelected |
	(newItemSelected := anIntegerOrObjectOrNil) isInteger ifTrue: [
		newItemSelected := items at: anIntegerOrObjectOrNil ].
	itemSelected == newItemSelected ifFalse: [
		itemSelected := newItemSelected.
		self updateSelectorFilters.
		self updateSelectorList: true ].! !

!WBPartMessagesModule methods !   
definitionClass
		"Answer the class answered by this method."
	^WBPARTSMessageList! !

!WBPARTSInterfaceEditor methods !  
save

    "Callback for the #clicked event triggered in the Button named 'saveButton'.
     (Generated by WindowBuilder)"

    self prototype
        wbPartEvents: self wbEventList fullCopy;
        wbPartMessages: self wbMessageList fullCopy.
    self owner layoutFormChanged.
    self hasChanged: false.! !

!Object methods !
isExecutable
		"For PARTS support."
	#addedByOSI.
	^false! !

!WBPartEventsModule methods !  
definitionClass
		"Answer the class answered by this method."
	^WBPARTSEventList! !

!WBPartsModule methods ! 
suggestedDefaultItems
		"Answer a collection of suggested default items."
	^self wbPartInterfaceList items asSortedCollection! !

!WBPARTSInterfaceEditor methods !   
targetSelectorFrom: aString for: aSymbol
		"Answer a valid target selector."

	aString = ':' | aString isEmpty | aSymbol isNil ifTrue: [ ^'' ].
	^aString asSelectorTokenWithArgCount: (aSymbol occurrencesOf: $: )! !

!WBPARTSInterfaceEditor methods !   
sourceSelectorOffset
		"Answer the offset of the source selector in the selector list."
	^0! !

!WBPARTSInterfaceEditor methods ! 
eventTargetFor: aSymbolOrNil pane: aPane put: targetSymbolOrNil
		"Set the target event selector.  Answer true if successful."
	| eventItem |
	aSymbolOrNil ifNil: [ ^false ].
	eventItem := self wbEventList wbItems
		detect: [ :wbItem |
			wbItem source == aPane
				and: [ wbItem sourceSelector = aSymbolOrNil ] ]
		ifNone: [
			targetSymbolOrNil isNil ifTrue: [ ^false ].
			self wbEventList addWbItem: ((
				WBPartEvent
					sourceName: aPane paneName
					sourceSelector: aSymbolOrNil
					receiver: self prototype
					triggeredEvent: targetSymbolOrNil )
					source: aPane;
					yourself ).
			^true ].
	targetSymbolOrNil isNil
		ifTrue: [
			(self wbEventList wbItems includes: eventItem) ifTrue: [
				self wbEventList wbItems remove: eventItem.
				^true ] ]
		ifFalse: [
			eventItem triggeredEvent = targetSymbolOrNil ifFalse: [
				eventItem triggeredEvent: targetSymbolOrNil.
				^true ] ].
	^false! !

!WBPartMessagesModule methods ! 
wbItemClass
		"Answer the wb item class."
	^WBPartMessage! !

!WBPARTSInterfaceEditor methods !   
itemFilter
		"Answer the item filter... a class or nil."
	^itemFilter! !

!WBPARTSInterfaceEditor methods !   
drawSelector: anIndex

	"Callback for the #drawItem: event triggered in the WBListBox named 'selectorListPane'.
	 (Generated by WindowBuilder)"

	self
		drawSelector: anIndex
		foreColor: Color black
		backColor: selectorListPane backColor
		targetColor: Color blue.! !

!WBPARTSInterfaceEditor methods !   
itemSelected
		"Answer the selected item."
	^itemSelected! !

!WBPartsModule methods !
generateWBItem: aWBItem
		"Private - Generate the wb item."
	self stream cr;
		nextPutAll: #addWbItem: ;
	 	space;
		openParenthesis.
	self generateWBItemDefinition: aWBItem.
	self stream
		space;
		closeParenthesis;
		endMessage.! !

!WBPARTSInterfaceList methods !
updatePanes: aCollection
		"Update the receiver's panes based on pane names.
			Answer true if something changed ."
	| answer |
	answer := false.
	self wbItems do: [ :each |
		(each updatePanes: aCollection) ifTrue: [
			answer := true ] ].
	^answer! !

!WBPARTSInterfaceEditor methods ! 
eventsSelected: aString

    "Callback for the #clicked: event triggered in the RadioButton named 'eventsRadioButton'.
     (Generated by WindowBuilder)"

	self showEvents: true.! !

!WBPartEvent methods !  
updateReceiver: anObject
		"Update the receiver."
	receiver := anObject.! !

!WBPartMessage methods ! 
updatePanes: aCollection
		"Convert the receiver.  Answer true if something changed."
	| answer |
	answer := false.
	aCollection do: [ :eachView |
		receiverName = eachView paneName ifTrue: [
			receiver == eachView ifTrue: [ ^answer ].
			receiver := eachView.
			^true ].
		eachView children do: [ :eachChild |
			receiverName = eachChild paneName ifTrue: [
				receiver == eachChild ifTrue: [ ^answer ].
				receiver := eachChild.
				^true ] ] ].
	receiver == nil ifTrue: [ ^answer ].
	receiver := nil.
	^true! !

!WBPartsModule methods !  
wbItemSelectors
		"Answer all of the wb item selectors."
	^self wbItems
		collect: [ :eachWbItem |
			eachWbItem triggeredEvent ]! !

!WBPartMessagesModule methods !   
defaultWbPartsInterfaceList
		"Answer the default parts interface list."
	^self object wbPartMessages! !

!WBPartMessagesModule methods ! 
wbItemSelectors
		"Answer all of the wb item selectors."
	^self wbItems
		collect: [ :eachWbItem |
			eachWbItem sourceSelector ]! !

!ViewManager methods !
partEditDirect
        " Open an editor on the PARTS properties of the receiver. "
	#addedByOSI.
	self isWBWindow
		ifTrue: [ ^super partEditProperties ].! !

!CompositePane methods ! 
partEditDirect
        " Open an editor on the PARTS properties of the receiver. "
	^super partEditProperties! !

!WBPartsModule methods !
defaultShouldLogMethodSource
	"Answer true if the receiver's source should be logged."

	^super defaultShouldLogMethodSource 
		and: [self wbEditorClass licensed]! !

!WBPartEventsTriggeredModule methods !   
generateBody
		"Private - Generate the method body."

	self stream indentBy: 1 during: [
		self generateGeneratedSymbol.
		self stream cr; nextPut: $^.
		self stream indentBy: 1 during: [
			self stream wrapDuring: [
				self generateItemsArray ] ] ].! !

!WBPARTSInterfaceEditor methods !   
targetSelectorOffset
		"Answer the offset of the target selector in the selector list."
	^130! !

!WBPARTSInterfaceEditor methods !   
eventSelectors
		"Answer the event selectors."
	| answer |
	answer := (
		self itemClassSelected ifNil: [ ^#( ) ]
			) constructEventsTriggered asSortedCollection.
	((self selectorFilter ifNil: [ ^answer ])
		superclass ifNil: [ ^answer ])
			constructEventsTriggered do: [ :eachEvent |
				answer remove: eachEvent ifAbsent: [ ] ].
	^answer! !

!WBPartsModule methods !
generateItems
		"Generate the parts interface item list."

	self stream cr;
		nextPutAll: #items: ;
		space.
	self generateItemsArray.! !

!WBPartEventsModule methods !  
generateItemsArray
		"Generate the parts interface item list."
	self stream
		nextPutAll: #self;
		space;
		nextPutAll: #class;
		space;
		nextPutAll: #wbPartEventItems.! !

!WindowBuilder class methods ! 
defaultWBPartsIcon
	"Answer a new wb-parts icon."

	^PARTSIcon fromFile: 
		((File findFileName: self defaultWBIconFileName) 
			ifNil: [^self defaultPartsIcon])! !

!WBPARTSInterfaceEditor methods !
messagesSelected: aString

    "Callback for the #clicked: event triggered in the RadioButton named 'messagesRadioButton'.
     (Generated by WindowBuilder)"

	self showEvents: false.! !

!WBPARTSInterfaceEditor methods !  
preInitWindow
		"Private - Initialize the receiver."
	super preInitWindow.
	itemFilterPane addDynamicListSizeStyle.
	selectorFilterPane addDynamicListSizeStyle.
	Smalltalk platformIsOS2 ifTrue: [
		selectorListPane backColor: Color entryFieldBackground ].
	wbEventList := self prototype wbPartEvents fullCopy.
	wbMessageList := self prototype wbPartMessages fullCopy.
	showEvents := true.
	eventsRadioButton selection: true.
	saveButton disable.! !

!WBPARTSInterfaceEditor methods !  
messageSelectors
		"Answer the message selectors."
	| cls answer |
	cls := self itemClassSelected ifNil: [ ^#( ) ].
	answer := cls selectors asSet copy.
	[ cls = self selectorFilter | cls isNil ] whileFalse: [
		(cls := cls superclass) notNil ifTrue: [
			answer addAll: cls selectors ] ].
	^answer asSortedCollection! !

!WBPartEventsModule methods ! 
wbItemClass
		"Answer the wb item class."
	^WBPartEvent! !

!WBPartsModule methods !  
generateWBItems
		"Private - Generate the wb items."
	self sortedWBItems do: [ :eachWBItem |
		self generateWBItem: eachWBItem ].! !

!WBToolBar methods !   
dragSourceCutDefault: dragSession
		"Private - perform default cut action if no handler is provided."
	#osiHack.
	"Support for WB drag to PARTS workbench... do nothing."! !

!WBPARTSInterfaceEditor methods !  
updateSelectorList

    "Callback for the #needsContents event triggered in the ListBox named 'selectorListPane'.
     (Generated by WindowBuilder)"

	self updateSelectorList: false.! !

!WBPARTSInterfaceEditor methods !   
drawSelectorReversed: anIndex

	"Callback for the #drawSelection: event triggered in the WBListBox named 'selectorListPane'.
	 (Generated by WindowBuilder)"

	self
		drawSelector: anIndex
		foreColor: Color white
		backColor: Color black
		targetColor: Color red.! !

!WBPARTSInterfaceEditor methods !  
messageTargetFor: aSymbolOrNil pane: aPane put: targetSymbolOrNil
		"Set the target message selector.  Answer true if successful."
	| msgItem |
	aSymbolOrNil ifNil: [ ^false ].
	msgItem := self wbMessageList wbItems
		detect: [ :wbItem |
			wbItem receiver == aPane
				and: [ wbItem selector = aSymbolOrNil ] ]
		ifNone: [
			targetSymbolOrNil isNil ifTrue: [ ^false ].
			self wbMessageList addWbItem: ((
				WBPartMessage
					source: self prototype
					sourceSelector: targetSymbolOrNil
					receiverName: aPane paneName
					selector: aSymbolOrNil  )
					receiver: aPane;
					yourself ).
			^true ].
	targetSymbolOrNil isNil
		ifTrue: [
			(self wbMessageList wbItems includes: msgItem) ifTrue: [
				self wbMessageList wbItems remove: msgItem.
				^true ] ]
		ifFalse: [
			msgItem sourceSelector = targetSymbolOrNil ifFalse: [
				msgItem sourceSelector: targetSymbolOrNil.
				^true ] ].
	^false! !

!WBPartMessagesModule methods !  
suggestedDefaultItems
		"Answer a collection of suggested default items."
	^#( #open ), super suggestedDefaultItems! !

!WBPartEventsModule methods ! 
generateWBItemBody: aWBItem
		"Private - Generate the wb item."
	self stream cr;
		nextPutAll: #sourceName: ;
		space;
		nextPutAll: (
			aWBItem source == aWBItem receiver
				ifTrue: [ #nil ] ifFalse: [ aWBItem sourceName asQuotedString ] ).
	self stream cr;
		nextPutAll: #sourceSelector: ;
		space;
		nextPut: $#;
		nextPutAll: aWBItem sourceSelector.
	self stream cr;
		nextPutAll: #receiver: ;
		space;
		nextPutAll: #self.
	self stream cr;
		nextPutAll: #triggeredEvent: ;
		space;
		nextPut: $#;
		nextPutAll: aWBItem triggeredEvent.! !

!WBPartsModule methods ! 
generateItemsArray
		"Generate the parts interface item list."

	self wbPartInterfaceListItems asSet asSortedCollection asArray
		wbStoreOn: self stream.! !

!WBPartMessage methods !  
updateSource: anObject
		"Update the receiver's source."
	source := anObject.! !

!WBPARTSInterfaceEditor methods !   
drawSelector: anIndex foreColor: fColor backColor: bColor targetColor: tColor
		"Draw the selector in the WBListBox named 'selectorListPane'."
	| index symbol targetSymbol box textOffset |
	textOffset := 1 @ (Rectangle leftTopUnit y * 4).
	index := selectorListPane drawIndex.
	symbol :=  selectorListPane list at: index.
	box := selectorListPane drawBox.
	selectorListPane ownerDrawPen
		foreColor: fColor;
		backColor: bColor;
		blank: box;
		setTextAlign: WBDisplayContext defaultTextAlign;
		place: (box origin + textOffset);
		displayText: symbol.
	((targetSymbol := self showEvents
		ifTrue: [ self eventTargetFor: symbol pane: self itemSelected ]
		ifFalse: [ self messageTargetFor: symbol pane: self itemSelected ]
	) isString and: [ targetSymbol notEmpty ]) ifTrue: [
		selectorListPane ownerDrawPen
			foreColor: tColor;
			backColor: bColor;
			blank: ((box leftTop right: box width // 2 - 15) rightBottom: box rightBottom) ;
			place: (box origin rightAndUp: (box width // 2 @ 0) + textOffset);
			displayText: targetSymbol ].! !

!WBPartMessagesModule methods !   
wbItems
		"Answer all of the valid wb items."
	^self wbPartInterfaceList wbItems select: [ :eachWbItem |
		eachWbItem source == eachWbItem receiver or: [
			(eachWbItem receiverName ifNil: [ '' ]) ~= '' ] ]! !

!WBPartsModule methods ! 
generateDefaultItemReference
		"Private - Generate the default item."
	| item |
	(item := self defaultItem) isSymbol
		ifTrue: [
			self stream nextPut: $# ].
	self stream nextPutAll: item printString.! !

!ViewManager methods !  
partEditProperties
        " Open WindowBuilder on the receiver's window definition. "
	#addedByOSI.
	self isWBWindow
		ifTrue: [ WindowBuilder new openOn: self class ]
		ifFalse: [ ^super partEditProperties ].! !

!WBPARTSInterfaceEditor methods !   
prototypeName
		"Answer the name of the edited coordinator."
	| realClass |
	realClass := self shell realClass.
	(realClass isScratchWindow
		or: [ realClass isWBInternalClass
			or: [ realClass name isNil ]])
				ifTrue: [ ^self class prototypeName ].
	^realClass name! !

!WBPARTSInterfaceEditor methods ! 
eventTargetFor: aSymbolOrNil pane: aPane
		"Answer the target event selector."
	aSymbolOrNil ifNil: [ ^'' ].
	^(self wbEventList wbItems
		detect: [ :wbItem |
			wbItem source = aPane
				and: [ wbItem sourceSelector = aSymbolOrNil ] ]
		ifNone: [ ^'' ] ) triggeredEvent! !

!WBPARTSInterfaceEditor methods ! 
targetSelector: aSymbolOrNil
		"Set the target selector for the selected item."
	(self showEvents
		ifTrue: [
			self
				eventTargetFor: self selector
				pane: self itemSelected
				put: aSymbolOrNil ]
		ifFalse: [
			self
				messageTargetFor: self selector
				pane: self itemSelected
				put: aSymbolOrNil ]
	) ifTrue: [
		self hasChanged: true.
		selectorListPane invalidateRect: (
			selectorListPane lineToRect: (
				self selectors
					indexOf: self selector
					ifAbsent: [ ^self ] ) ) ].! !

!WBPARTSInterfaceEditor methods !   
selectorFilter: aSymbolOrClassOrNil

    "Callback for the #changed: event triggered in the ComboBox named 'selectorFilterPane'.
     (Generated by WindowBuilder)"

	| newFilter |
	(newFilter := aSymbolOrClassOrNil) isClass ifFalse: [
		newFilter isSymbol ifTrue: [
			newFilter := Smalltalk at: newFilter ifAbsent: [ nil ] ] ].
	selectorFilter == newFilter ifFalse: [
		selectorFilter := newFilter.
		self updateSelectorList ].! !

!WBPartsModule methods !
defaultItem
		"Answer the default item."
	^self wbPartInterfaceList defaultItem ifNil: [
		self suggestedDefaultItems
			detect: [ :each |
				self wbPartInterfaceList items includes: each ]
			ifNone: [ nil ] ]! !

!WBPARTSInterfaceEditor methods ! 
update
		"Update the receiver."
	super update.
	(self wbEventList updatePaneNames: self owner prototype windows)
		| (self wbMessageList updatePaneNames: self owner prototype windows)
			ifTrue: [self updateAll]
			ifFalse: [self updateItemList].! !

!WBPartsModule methods !   
generateSeparators
		"Private - Generate the separators."
	self stream cr;
		nextPutAll: #separators: ;
		space.
	self generateSeparatorsArray.! !

!ApplicationCoordinator methods !  
partEditDirect
        "Edit the reciever's window definition."
    #addedByOSI.
	self isWBWindow ifTrue: [
		WindowBuilder new openOn: self class ].! !

!WBPartsModule methods !  
defaultWbPartsInterfaceList
		"Answer the default parts interface list."
	^self object wbPartEvents! !

!WBPartEvent methods !
updatePaneNames: aCollection
		"Change the receiver."
	| answer |
	answer := false.
	aCollection do: [ :eachView |
		source == eachView ifTrue: [
			sourceName = eachView paneName ifTrue: [ ^answer ].
			sourceName := eachView paneName.
			^true ].
		eachView children do: [ :eachChild |
			source == eachChild ifTrue: [
				sourceName = eachChild paneName ifTrue: [ ^answer ].
				sourceName := eachChild paneName.
				^true ] ] ].
	sourceName = '' ifTrue: [ ^answer ].
	sourceName := ''.
	^true! !

!WBPartMessage methods !   
fullCopy
		"Answer a copy of the receiver."
	^self copy
		receiver: receiver;
		yourself! !

!WindowBuilder methods !   
dragPart: aDragDropSession
	"Drag the part onto the workbench."

	| thePart |
	(self editedClass isNil or: [self editedClass isScratchWindow])
		ifTrue: [^MessageBox message: 'Cannot drag a scratch window to PARTS Workbench'].
	self editedClass isCompositePane
		ifTrue: [^MessageBox message: 'Cannot drag a CompositePane to PARTS Workbench'].
	#osiHack.
	(self editedClass inheritsFrom: ApplicationCoordinator)
		ifTrue: [^MessageBox message: 'ApplicationCoordinators in PARTS Workbench not supported yet.'].
	(thePart := self editedClass new)
		partWrapper:
			(PARTSWrapper new
				object: thePart;
				name: self editedClass name;
				helpInfo: (Array with: '' with: '');
				yourself).
	aDragDropSession createDragObjects: (Array with:
		(self class wbPartsIcon
			origin: (aDragDropSession source propertyAt: #wbDragSourceLocation ifAbsent: [0 @ 0]);
			connection: thePart;
			yourself)).
	! !

!WBPartEventsTriggeredModule methods ! 
defaultMessageSelector
		"Private - Answer the default message selector."
	^#wbPartEventItems! !

!WindowBuilder class methods !  
wbPartsIcon
	"Answer a new wb-parts icon."

	^(self 
		propertyAt: #wbPartsIcon 
		ifAbsent: [^self defaultWBPartsIcon]) 
			partMirrorCopy: PARTSMirrorCopyDictionary new! !

!WBPARTSInterfaceEditor methods !  
selectors
		"Answer the selectors list."
	^selectors! !

!WBPARTSInterfaceEditor methods !
showEvents
		"Answer true if showing the reciever's events or messages."
	^showEvents! !

!WBPartMessagesModule methods ! 
generateWBItemBody: aWBItem
		"Private - Generate the wb item."
	self stream cr;
		nextPutAll: #source: ;
		space;
		nextPutAll: #self.
	self stream cr;
		nextPutAll: #sourceSelector: ;
		space;
		nextPut: $#;
		nextPutAll: aWBItem sourceSelector.
	self stream cr;
		nextPutAll: #receiverName: ;
		space;
		nextPutAll: (
			aWBItem source == aWBItem receiver
				ifTrue: [ #nil ] ifFalse: [ aWBItem receiverName asQuotedString ] ).
	self stream cr;
		nextPutAll: #selector: ;
		space;
		nextPut: $#;
		nextPutAll: aWBItem selector.! !

!WBPARTSInterfaceEditor methods !  
itemNameSelected
		"Answer the name of the item selected."
	| answer |
	answer := self itemSelected ifNil: [ ^'' ].
	answer == self prototype ifTrue: [ ^'' ].
	^(answer respondsTo: #paneName)
		ifTrue: [ answer paneName ]
		ifFalse: [ '' ]! !

!WBPartsModule methods ! 
generateSeparatorsArray
		"Private - Generate the separators array."
	self stream nextPutAll: '#( )'.! !

!WBPartsModule methods !
generateWBItemDefinition: aWBItem
		"Private - Generate the wb item."
	self stream cr;
		nextPutAll: self wbItemClass name;
		indentBy: 1 during: [
			self generateWBItemBody: aWBItem ].! !

!WBPARTSInterfaceEditor methods !   
wbEventList
		"Answer the event list."
	^wbEventList! !

!WBPARTSInterfaceEditor methods !
hasChanged: aBoolean
		"Indicate that the receiver's contents has changed."
	aBoolean = self hasChanged ifFalse: [
		super hasChanged: aBoolean.
		aBoolean = true
			ifTrue: [ saveButton enable ]
			ifFalse: [ saveButton disable ] ].! !

!WBPARTSInterfaceEditor methods !   
updateSourceSelector

    "Callback for the #needsContents event triggered in the EnhancedEntryField named 'sourceSelectorPane'.
     (Generated by WindowBuilder)"

	sourceSelectorPane contents: (self selector ifNil: [ '' ]).! !

!WBPARTSInterfaceEditor methods !
selector
		"Answer the selected selector."
	^selectorSelected! !

!WBPARTSInterfaceEditor methods !   
selectorFilter
		"Answer the selector filter."
	^selectorFilter! !

!WBPartsModule methods !  
wbPartInterfaceList
		"Answser the part interface list."
	^wbPartInterfaceList ifNil: [
		wbPartInterfaceList := self defaultWbPartsInterfaceList ]! !

!CompositePane methods ! 
partEditProperties
        " Open WindowBuilder on the receiver's window definition. "
	WindowBuilder new openOn: self class.! !

!WBPartsModule methods !
wbItems
		"Answer all of the valid wb items."
	^self wbPartInterfaceList wbItems select: [ :eachWbItem |
		eachWbItem source == eachWbItem receiver or: [
			(eachWbItem sourceName ifNil: [ '' ]) ~= '' ] ]! !

!WBPARTSMessageList methods !  
updateSource: anObject
		"Update the sources."
	self wbItems do: [ :each | each updateSource: anObject ].
	self items do: [ :each |
		self wbItems
			detect: [ :eachWbItem | eachWbItem sourceSelector = each ]
			ifNone: [
				self addWbItem: ((
					WBPartMessage
						source: anObject
						sourceSelector: each
						receiverName: nil
						selector: each )
						receiver: anObject;
						yourself ) ] ].						
	self items: #( ).! !

!WBPARTSInterfaceEditor methods !  
itemFilter: aClassOrSymbolOrNil

    "Callback for the #changed: event triggered in the ComboBox named 'itemFilterPane'.
     (Generated by WindowBuilder)"

	| aClass |
	aClass := aClassOrSymbolOrNil isSymbol
		ifTrue: [ Smalltalk at: aClassOrSymbolOrNil ifAbsent: [ nil ] ]
		ifFalse: [
			aClassOrSymbolOrNil = self class nullFilter
				ifTrue: [ nil ] ifFalse: [ aClassOrSymbolOrNil ] ].
	itemFilter == aClass ifFalse: [
		itemFilter := aClass.
		self updateItemList ].! !

!WBPartsModule methods !  
wbPartInterfaceList: anInterfaceList
		"Set the part interface list."
	wbPartInterfaceList := anInterfaceList.! !

!WBPartsModule class methods ! 
codeModulesFor: anObject
	"Answer a collection of code modules for anObject."

	self wbEditorClass partsSupportEnabled ifFalse: [^#()].
	^(Array
			with: WBPartEventsModule
			with: WBPartMessagesModule
			with: WBPartEventsTriggeredModule)
		collect: [:each | each new]! !

!WBPARTSInterfaceEditor methods !
updateItemFilters

    "Callback for the #needsContents event triggered in the ComboBox named 'itemFilterPane'.
     (Generated by WindowBuilder)"

	| paneClasses filters filter |
	paneClasses := Set new.
	self shellChildren do: [ :eachChild |
		paneClasses add: eachChild realClass ].
	filters := (paneClasses collect: [ :eachClass |
		eachClass symbol ]) asSortedCollection.
	filter := self itemFilter isNil ifTrue: [ 1 ] ifFalse: [
		(filters indexOf: self itemFilter name) + 1 ].
	itemFilterPane
		contents: (Array with: self class nullFilter), filters;
		selectIndex: filter.
	self itemFilter: (
		filter = 1 ifTrue: [ nil ] ifFalse: [
			filters at: filter - 1 ] ).! !

!WBPARTSInterfaceEditor methods ! 
createViews

	"WARNING!! This method was automatically generated by 
	WindowBuilder. Code you add here which does not conform to 
	the WindowBuilder API will probably be lost the next time 
	you save your layout definition."

	| mainView staticText1 staticText2 xDU yDU |
	
	#generated.
	xDU := (SysFont width + 1 roundTo: 2) / 4.
	yDU := SysFont height / 8.
	mainView := self topPaneClass new.
	
		"Instance Variables"
	closeButton := Button new.
	eventsRadioButton := RadioButton new.
	itemFilterPane := WBComboBox new.
	itemListPane := ListBox new.
	messagesRadioButton := RadioButton new.
	saveButton := Button new.
	selectorFilterPane := WBComboBox new.
	selectorListPane := ListBox new.
	sourceSelectorPane := EntryField new.
	targetSelectorPane := EntryField new.
	
		"Temporary Variables"
	staticText1 := StaticText new.
	staticText2 := StaticText new.
	
	mainView
		owner: self;
		setName: 'mainView';
		when: #aboutToClose send: #aboutToClose to: self;
		labelWithoutPrefix: 'WB-PARTS Interface';
		noSmalltalkMenuBar;
		backColor: Color gray;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 1/2; leftInset: -115 * xDU;
				topRatio: 1/2; topInset: -135/2 * yDU;
				rightRatio: 1/2; rightInset: -115 * xDU;
				bottomRatio: 1/2; bottomInset: -117/2 * yDU).
	self addView: mainView.
	
	eventsRadioButton "RadioButton"
		owner: self;
		setName: 'eventsRadioButton';
		when: #clicked: send: #eventsSelected: to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 4 * xDU;
				topRatio: 0; topInset: 2 * yDU;
				rightRatio: 33/113; rightInset: 0 * xDU;
				bottomRatio: 0; bottomInset: -12 * yDU);
		contents: 'Events';
		startGroup;
		font: SysFont.
	mainView
		addSubpane: eventsRadioButton;
		subPaneWithFocus: eventsRadioButton.
	
	messagesRadioButton "RadioButton"
		owner: self;
		setName: 'messagesRadioButton';
		when: #clicked: send: #messagesSelected: to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 4 * xDU;
				topRatio: 0; topInset: 12 * yDU;
				rightRatio: 33/113; rightInset: 0 * xDU;
				bottomRatio: 0; bottomInset: -22 * yDU);
		contents: 'Messages';
		noTabStop;
		font: SysFont.
	mainView addSubpane: messagesRadioButton.
	
	itemFilterPane "WBComboBox"
		owner: self;
		setName: 'itemFilterPane';
		when: #changed: send: #itemFilter: to: self;
		when: #needsContents send: #updateItemFilters to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 2 * xDU;
				topRatio: 0; topInset: 24 * yDU;
				rightRatio: 65/226; rightInset: 0 * xDU;
				bottomRatio: 0; bottomInset: -98 * yDU);
		dropDownList;
		startGroup;
		font: SysFont.
	mainView addSubpane: itemFilterPane.
	
	itemListPane "ListBox"
		owner: self;
		setName: 'itemListPane';
		addClipsiblingsStyle;
		when: #changedIndex: send: #itemSelected: to: self;
		when: #needsContents send: #updateItemList to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 2 * xDU;
				topRatio: 0; topInset: 38 * yDU;
				rightRatio: 65/226; rightInset: 0 * xDU;
				bottomRatio: 1; bottomInset: 2 * yDU);
		startGroup;
		font: SysFont.
	mainView addSubpane: itemListPane.
	
	selectorFilterPane "WBComboBox"
		owner: self;
		setName: 'selectorFilterPane';
		when: #changed: send: #selectorFilter: to: self;
		when: #needsContents send: #updateSelectorFilters to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 67/226; leftInset: 0 * xDU;
				topRatio: 0; topInset: 2 * yDU;
				rightRatio: 1; rightInset: 2 * xDU;
				bottomRatio: 0; bottomInset: -88 * yDU);
		dropDownList;
		startGroup;
		font: SysFont.
	mainView addSubpane: selectorFilterPane.
	
	selectorListPane "ListBox"
		owner: self;
		setName: 'selectorListPane';
		addClipsiblingsStyle;
		when: #changedIndex: send: #selector: to: self;
		when: #drawItem: send: #drawSelector: to: self;
		when: #drawSelection: send: #drawSelectorReversed: to: self;
		when: #needsContents send: #updateSelectorList to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 67/226; leftInset: 0 * xDU;
				topRatio: 0; topInset: 16 * yDU;
				rightRatio: 1; rightInset: 2 * xDU;
				bottomRatio: 1; bottomInset: 65/2 * yDU);
		ownerDrawFixed;
		startGroup;
		font: SysFont.
	mainView addSubpane: selectorListPane.
	
	sourceSelectorPane "EntryField"
		owner: self;
		setName: 'sourceSelectorPane';
		addClipsiblingsStyle;
		when: #needsContents send: #updateSourceSelector to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 48/113; leftInset: 0 * xDU;
				topRatio: 1; topInset: -57/2 * yDU;
				rightRatio: 1; rightInset: 38 * xDU;
				bottomRatio: 1; bottomInset: 33/2 * yDU);
		startGroup;
		font: SysFont.
	mainView addSubpane: sourceSelectorPane.
	
	targetSelectorPane "EntryField"
		owner: self;
		setName: 'targetSelectorPane';
		when: #needsContents send: #updateTargetSelector to: self;
		when: #textChanged: send: #targetSelectorChanged: to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 48/113; leftInset: 0 * xDU;
				topRatio: 1; topInset: -29/2 * yDU;
				rightRatio: 1; rightInset: 38 * xDU;
				bottomRatio: 1; bottomInset: 5/2 * yDU);
		startGroup;
		font: SysFont.
	mainView addSubpane: targetSelectorPane.
	
	saveButton "Button"
		owner: self;
		setName: 'saveButton';
		addClipsiblingsStyle;
		when: #clicked send: #save to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 1; leftInset: -34 * xDU;
				topRatio: 1; topInset: -57/2 * yDU;
				rightRatio: 1; rightInset: 3 * xDU;
				bottomRatio: 1; bottomInset: 33/2 * yDU);
		contents: 'Save';
		startGroup;
		font: SysFont.
	mainView addSubpane: saveButton.
	
	closeButton "Button"
		owner: self;
		setName: 'closeButton';
		when: #clicked send: #cancel to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 1; leftInset: -34 * xDU;
				topRatio: 1; topInset: -29/2 * yDU;
				rightRatio: 1; rightInset: 3 * xDU;
				bottomRatio: 1; bottomInset: 5/2 * yDU);
		contents: 'Close';
		startGroup;
		font: SysFont.
	mainView addSubpane: closeButton.
	
	staticText1
		owner: self;
		addClipsiblingsStyle;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 33/113; leftInset: 0 * xDU;
				topRatio: 1; topInset: -53/2 * yDU;
				rightRatio: 47/113; rightInset: 0 * xDU;
				bottomRatio: 1; bottomInset: 37/2 * yDU);
		rightJustified;
		contents: 'Export:';
		startGroup;
		noTabStop;
		font: SysFont.
	mainView addSubpane: staticText1.
	
	staticText2
		owner: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 33/113; leftInset: 0 * xDU;
				topRatio: 1; topInset: -25/2 * yDU;
				rightRatio: 47/113; rightInset: 0 * xDU;
				bottomRatio: 1; bottomInset: 9/2 * yDU);
		rightJustified;
		contents: 'as:';
		startGroup;
		noTabStop;
		font: SysFont.
	mainView addSubpane: staticText2! !

!WBPARTSInterfaceEditor methods !
targetSelectorChanged: aString

    "Callback for the #changed: event triggered in the EnhancedEntryField named 'targetSelectorPane'.
     (Generated by WindowBuilder)"

	| newString newSelection |
	(newString := self targetSelectorFrom: aString for: self selector
		) = aString ifFalse: [
			newSelection := targetSelectorPane selection.
			targetSelectorPane
				contents: newString;
				selectFrom: newSelection x to: newSelection y.
			^self ].
	self targetSelector: (
		newString isEmpty
			ifTrue: [ nil ]
			ifFalse: [  newString asSymbol ] ).! !

!WBPARTSInterfaceList methods !  
fullCopy
		"Answer a copy of the receiver."
	^self class new
		items: self items copy;
		defaultItem: self defaultItem;
		separators: self separators copy;
		wbItems: (self wbItems collect: [ :each | each fullCopy ]);
		yourself! !

!WBPartEvent methods !  
fullCopy
		"Answer a copy of the receiver."
	^self copy
		source: source;
		yourself! !

!WBPartsModule methods !   
generateDefaultItem
		"Private - Generate the default item."
	self stream cr;
		nextPutAll: #defaultItem: ;
		space.
	self generateDefaultItemReference.! !

!WBPartEventsModule methods ! 
sortedWBItems
		"Answer the wb items in sorted order."
	^(self wbItems
		reject: [ :eachWbItem |
			eachWbItem source == eachWbItem receiver
				and: [ eachWbItem sourceSelector == eachWbItem triggeredEvent ] ] )
		asSortedCollection: [ :a :b |
			a triggeredEvent < b triggeredEvent ]! !

!WBPartsModule methods !   
wbPartInterfaceListItems
		"Answer the part interface items."
	^self wbPartInterfaceList items asSet copy
		addAll: self wbItemSelectors;
		yourself! !

!WBPartEvent methods ! 
updatePanes: aCollection
		"Convert the receiver."
	| answer |
	answer := false.
	aCollection do: [ :eachView |
		sourceName = eachView paneName ifTrue: [
			source == eachView ifTrue: [ ^answer ].
			source := eachView.
			^true ].
		eachView children do: [ :eachChild |
			sourceName = eachChild paneName ifTrue: [
				source == eachChild ifTrue: [ ^answer ].
				source := eachChild.
				^true ] ] ].
	source == nil ifTrue: [ ^answer ].
	source := nil.
	^true! !

!WBPARTSEventList methods !  
updateReceiver: anObject
		"Update the receivers."
	self wbItems do: [ :each | each updateReceiver: anObject ].
	self items do: [ :each |
		self wbItems
			detect: [ :eachWbItem | eachWbItem triggeredEvent = each ]
			ifNone: [
				self addWbItem: ((
					WBPartEvent
						sourceName: nil
						sourceSelector: each
						receiver: anObject
						triggeredEvent: each )
						source: anObject;
						yourself ) ] ].
	self items: #( ).! !

!WBPARTSInterfaceEditor methods !
updateTargetSelector

    "Callback for the #needsContents event triggered in the EnhancedEntryField named 'targetSelectorPane'.
     (Generated by WindowBuilder)"

	targetSelectorPane
		contents: (
			self showEvents
				ifTrue: [ self eventTargetFor: self selector pane: self itemSelected ]
				ifFalse: [ self messageTargetFor: self selector pane: self itemSelected ] );
		selectAll.! !

!WBPartEventsTriggeredModule methods ! 
targetClass
		"Answer the receiver's target class."
	^super targetClass class! !
  
UndefinedObject removeSelector: #osiIgnoredInitializerSource!
   
"======== Initializers"!