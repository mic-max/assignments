"3.0.0.7.0.6"
!  

CompositePane subclass: #AddressPane
  instanceVariableNames: 
    ' address '
  classVariableNames: ''
  poolDictionaries: 
    ' ColorConstants OperatingSystemConstants '!  

ViewManager subclass: #AddressPaneTester
  instanceVariableNames: 
    ' address '
  classVariableNames: ''
  poolDictionaries: 
    ' ColorConstants OperatingSystemConstants '!  

CompositePane subclass: #DictionaryEditorPane
  instanceVariableNames: 
    ' dictionary listEditor detail '
  classVariableNames: ''
  poolDictionaries: 
    ' ColorConstants OperatingSystemConstants '!

CompositePane subclass: #ListEditorPane
  instanceVariableNames: 
    ' list listbox item '
  classVariableNames: ''
  poolDictionaries: 
    ' ColorConstants OperatingSystemConstants '! 

CompositePane subclass: #NamePane
  instanceVariableNames: 
    ' name '
  classVariableNames: ''
  poolDictionaries: 
    ' ColorConstants OperatingSystemConstants '!

CompositePane subclass: #OkCancelPane
  instanceVariableNames: ''
  classVariableNames: ''
  poolDictionaries: 
    ' ColorConstants OperatingSystemConstants '!

DictionaryEditorPane subclass: #PersonEditorPane
  instanceVariableNames: ''
  classVariableNames: ''
  poolDictionaries: 
    ' ColorConstants OperatingSystemConstants '! 

CompositePane subclass: #PersonPane
  instanceVariableNames: 
    ' person '
  classVariableNames: ''
  poolDictionaries: 
    ' ColorConstants OperatingSystemConstants '!

ViewManager subclass: #PersonPaneTester
  instanceVariableNames: ''
  classVariableNames: ''
  poolDictionaries: 
    ' ColorConstants OperatingSystemConstants '!  

WBObject subclass: #WBAddress
  instanceVariableNames: 
    ' street1 street2 city state zip '
  classVariableNames: ''
  poolDictionaries: ''! 

WBObject subclass: #WBName
  instanceVariableNames: 
    ' first middle last '
  classVariableNames: ''
  poolDictionaries: ''! 

WBObject subclass: #WBPerson
  instanceVariableNames: 
    ' name address sex '
  classVariableNames: ''
  poolDictionaries: ''!

WBAbstractAddInModule subclass: #WBCompositePaneExampleAddInModule
  instanceVariableNames: ''
  classVariableNames: ''
  poolDictionaries: ''!  

ViewManager subclass: #ModelObjectTest
  instanceVariableNames: 
    ' sharedValue timer '
  classVariableNames: ''
  poolDictionaries: 
    ' ColorConstants OperatingSystemConstants '!  

DictionaryEditorPane subclass: #AddressEditorPane
  instanceVariableNames: ''
  classVariableNames: ''
  poolDictionaries: 
    ' ColorConstants OperatingSystemConstants '!

!PersonPane methods !   
nameChanged: aName

    "Callback for the #nameChanged: event in the NamePane named 'name'.
     (Generated by WindowBuilder)"

    self triggerEvent: #nameChanged with: aName.
    self triggerEvent: #personChanged: with: self person.! !

!NamePane class methods !  
wbBasicVersion

	"Private - Answer the WindowBuilder Pro version.
		Generated in: Visual Smalltalk Enterprise 3.1.0 Win32"

	^3.1! !

!AddressPane class methods ! 
wbPartEventItems

	"WARNING!! This method was automatically generated by 
	WindowBuilder. Code you add here which does not conform to 
	the WindowBuilder API will probably be lost the next time 
	you save your wb-parts definition."

	#generated.
	^#(#addressChanged: #rightClicked #tabbed)! !

!DictionaryEditorPane methods !   
selectIndex: index

    listEditor selectIndex: index! !

!DictionaryEditorPane methods ! 
selection: anObject

    listEditor selection: anObject! !

!DictionaryEditorPane methods !   
contents

    ^dictionary! !

!WBCompositePaneExampleAddInModule class methods !  
loaded
    "Answer the value of loaded."

    ^loaded ifNil: [loaded := true].! !

!PersonPane methods ! 
updateAll

    #(#name #address #sex) do: [:item |
        (self paneNamed: item asString) contents:
            (self person perform: item)].! !

!NamePane methods !  
name: aWBName

    name := aWBName.
    self updateAll.
    self triggerEvent: #nameChanged: with: self name.! !

!WBAddress methods !  
zip: aString
    "Set the value of zip to <aString>.
    Remove the #generated tag before modifying this method.
    (Generated by WindowBuilder Pro)"

    "(c) Copyright OSI, 1995. All Rights Reserved."

    #generated.
    zip = aString
        ifFalse: [
            self
                basicZip: aString;
                changed;
                triggerZipChangedEvent]! !

!DictionaryEditorPane methods ! 
selectedItem

    ^listEditor selectedItem! !

!AddressPane methods ! 
setStreet2: aString

    "Callback for the #textChanged: event in the EntryField named 'street2'.
     (Generated by WindowBuilder)"

    self address street2: aString.
    self triggerEvent: #addressChanged: with: self address.! !

!ListEditorPane methods !
selectedIndex

    ^listbox selectedIndex! !

!AddressPane class methods !
wbBasicVersion

	"Private - Answer the WindowBuilder Pro version.
		Generated in: Visual Smalltalk Enterprise 3.1.0 Win32"

	^3.1! !

!WBPerson methods !  
basicName: aWBName
    "Private - set the value of name to <aWBName>.
    Remove the #generated tag before modifying this method.
    (Generated by WindowBuilder Pro)"

    "(c) Copyright OSI, 1995. All Rights Reserved."

    #generated.
    name := aWBName! !

!DictionaryEditorPane methods !   
initWindow

    dictionary ifNil: [dictionary := Dictionary new].! !

!WBAddress methods !
street2: aString
    "Set the value of street2 to <aString>.
    Remove the #generated tag before modifying this method.
    (Generated by WindowBuilder Pro)"

    "(c) Copyright OSI, 1995. All Rights Reserved."

    #generated.
    street2 = aString
        ifFalse: [
            self
                basicStreet2: aString;
                changed;
                triggerStreet2ChangedEvent]! !

!DictionaryEditorPane class methods !   
wbPartEventItems

	"WARNING!! This method was automatically generated by 
	WindowBuilder. Code you add here which does not conform to 
	the WindowBuilder API will probably be lost the next time 
	you save your wb-parts definition."

	#generated.
	^#(#clicked: #listChanged: #rightClicked #tabbed)! !

!ListEditorPane class methods !
constructEventsTriggered
        "Private - answer the set of events that instances of the
        receiver can trigger."
    ^super constructEventsTriggered
        add: #listChanged:;
        add: #itemChanged:;
        add: #itemChanging:;
        add: #clicked:;
        yourself! !

!NamePane methods ! 
addSubpanes

	"WARNING!! This method was automatically generated by 
	WindowBuilder. Code you add here which does not conform to 
	the WindowBuilder API will probably be lost the next time 
	you save your layout definition."

	| first firstLabel last lastLabel middle middleLabel 
	nameGroup xDU yDU |
	#generated.
	xDU := (SysFont width + 1 roundTo: 2) / 4.
	yDU := SysFont height / 8.
	
		"Temporary Variables"
	first := WBEntryField new.
	firstLabel := StaticText new.
	last := WBEntryField new.
	lastLabel := StaticText new.
	middle := WBEntryField new.
	middleLabel := StaticText new.
	nameGroup := GroupBox new.
	
	self
		framingBlock: 
			(LayoutFrame new
				leftRatio: 1/2; leftInset: -72 * xDU;
				topRatio: 1/2; topInset: -17 * yDU;
				rightRatio: 1/2; rightInset: -72 * xDU;
				bottomRatio: 1/2; bottomInset: -17 * yDU);
		backColor: Color gray.
	
	first "WBEntryField"
		owner: self;
		setName: 'first';
		when: #needsContents send: #getFirstName: to: self withArgument: first;
		when: #textChanged: send: #setFirstName: to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 4 * xDU;
				topRatio: 0; topInset: 16 * yDU;
				rightRatio: 0; rightInset: -48 * xDU;
				bottomRatio: 0; bottomInset: -28 * yDU);
		startGroup;
		font: SysFont.
	self addSubpane: first.
	
	middle "WBEntryField"
		owner: self;
		setName: 'middle';
		when: #needsContents send: #getMiddleInitial: to: self withArgument: middle;
		when: #textChanged: send: #setMiddleInitial: to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 50 * xDU;
				topRatio: 0; topInset: 16 * yDU;
				rightRatio: 0; rightInset: -64 * xDU;
				bottomRatio: 0; bottomInset: -28 * yDU);
		startGroup;
		font: SysFont.
	self addSubpane: middle.
	
	last "WBEntryField"
		owner: self;
		setName: 'last';
		when: #needsContents send: #getLastName: to: self withArgument: last;
		when: #textChanged: send: #setLastName: to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 66 * xDU;
				topRatio: 0; topInset: 16 * yDU;
				rightRatio: 1; rightInset: 5 * xDU;
				bottomRatio: 0; bottomInset: -28 * yDU);
		startGroup;
		font: SysFont.
	self addSubpane: last.
	
	firstLabel "StaticText"
		owner: self;
		setName: 'firstLabel';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 4 * xDU;
				topRatio: 0; topInset: 8 * yDU;
				rightRatio: 0; rightInset: -48 * xDU;
				bottomRatio: 0; bottomInset: -16 * yDU);
		contents: 'First';
		startGroup;
		noTabStop;
		font: SysFont.
	self addSubpane: firstLabel.
	
	middleLabel "StaticText"
		owner: self;
		setName: 'middleLabel';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 50 * xDU;
				topRatio: 0; topInset: 8 * yDU;
				rightRatio: 0; rightInset: -64 * xDU;
				bottomRatio: 0; bottomInset: -16 * yDU);
		contents: 'MI';
		startGroup;
		noTabStop;
		font: SysFont.
	self addSubpane: middleLabel.
	
	lastLabel "StaticText"
		owner: self;
		setName: 'lastLabel';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 66 * xDU;
				topRatio: 0; topInset: 8 * yDU;
				rightRatio: 0; rightInset: -138 * xDU;
				bottomRatio: 0; bottomInset: -16 * yDU);
		contents: 'Last';
		startGroup;
		noTabStop;
		font: SysFont.
	self addSubpane: lastLabel.
	
	nameGroup "GroupBox"
		owner: self;
		setName: 'nameGroup';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 0 * xDU;
				topRatio: 0; topInset: 0 * yDU;
				rightRatio: 1; rightInset: 1 * xDU;
				bottomRatio: 0; bottomInset: -32 * yDU);
		contents: 'Name';
		startGroup;
		noTabStop;
		font: SysFont.
	self addSubpane: nameGroup! !

!DictionaryEditorPane methods !   
listChanged: aCollection
    | removeList new |
    aCollection do: [:item |
        (dictionary includesKey: item) ifFalse: [
            dictionary at: item put: (new := self itemClass new).
            self initializeNewItem: new key: item].
   ].
    removeList := OrderedCollection new.
    dictionary keysDo: [:key |
        (listEditor contents includes: key) ifFalse: [removeList add: key]
   ].
    removeList do: [:item | dictionary removeKey: item ifAbsent: [nil]].
    detail contents: self itemClass new.
    self triggerEvent: #listChanged: with: dictionary! !

!WBAddress methods !   
street1: aString
    "Set the value of street1 to <aString>.
    Remove the #generated tag before modifying this method.
    (Generated by WindowBuilder Pro)"

    "(c) Copyright OSI, 1995. All Rights Reserved."

    #generated.
    street1 = aString
        ifFalse: [
            self
                basicStreet1: aString;
                changed;
                triggerStreet1ChangedEvent]! !

!AddressPane methods !  
getState: aPane

    "Callback for the #needsContents event in the ComboBox named 'state'.
     (Generated by WindowBuilder)"

    aPane
        selection: self address state! !

!ListEditorPane methods !  
contents: aCollection

    list := aCollection asOrderedCollection.
    handle = NullHandle ifTrue: [^self].
    listbox contents: list.! !

!AddressPane class methods !   
importantEvents

    ^#(#addressChanged: #needsContents)! !

!DictionaryEditorPane class methods !
wbConstructPropertyManager
    "Construct the WindowBuilder property manager
        based on the Digitalk property manager."

    #addedByOSI.
    ^super wbConstructPropertyManager
        wbAddEvent: (
            (Smalltalk at: #WBEventDescription) new
                event: #listChanged: ;
                argumentNames: #('anObject'));
        wbAddEvent: (
            (Smalltalk at: #WBEventDescription) new
                event: #clicked: ;
                argumentNames: #('anObject'));
        yourself! !

!OkCancelPane class methods !  
constructEventsTriggered
        "Private - answer the set of events that instances of the
        receiver can trigger."
    ^super constructEventsTriggered
        add: #ok;
        add: #cancel;
        yourself! !

!AddressPaneTester methods !   
address: aWBAddress

    address := aWBAddress! !

!AddressPane class methods !   
wbConstructPropertyManager
    "Construct the WindowBuilder property manager
        based on the Digitalk property manager."

    #addedByOSI.
    ^super wbConstructPropertyManager
        wbAddEvent: (
            (Smalltalk at: #WBEventDescription) new
                event: #addressChanged: ;
                argumentNames: #('anObject'));
        yourself! !

!ListEditorPane methods !   
getList: aPane

    aPane contents: self contents! !

!DictionaryEditorPane methods ! 
selection

    ^listEditor selection! !

!ListEditorPane methods !
change

    listbox selection isNil ifTrue: [^nil].
    self triggerEvent: #itemChanging: with: self itemContents.
    list at: listbox selection put: self itemContents.
    listbox contents: list.
    self disable.
    self triggerEvent: #itemChanged: with: self itemContents.
    self triggerEvent: #listChanged: with: list.! !

!WBAddress methods ! 
state
    "Answer the value of state.
    Remove the #generated tag before modifying this method.
    (Generated by WindowBuilder Pro)"

    "(c) Copyright OSI, 1995. All Rights Reserved."

    #generated.
    ^state ifNil: [state := '']! !

!ListEditorPane class methods !   
wbBasicVersion

	"Private - Answer the WindowBuilder Pro version.
		Generated in: Visual Smalltalk Enterprise 3.1.0 Win32"

	^3.1! !

!ListEditorPane methods !
add

    self contents add: item contents.
    listbox contents: list.
    self triggerEvent: #listChanged: with: list! !

!WBName methods !
last: aString
    "Set the value of last to <aString>.
    Remove the #generated tag before modifying this method.
    (Generated by WindowBuilder Pro)"

    "(c) Copyright OSI, 1995. All Rights Reserved."

    #generated.
    last = aString
        ifFalse: [
            self
                basicLast: aString;
                changed;
                triggerLastChangedEvent]! !

!WBAddress methods !   
triggerCityChangedEvent
    "Private - trigger the #cityChanged: event.
    Remove the #generated tag before modifying this method.
    (Generated by WindowBuilder Pro)"

    "(c) Copyright OSI, 1995. All Rights Reserved."

    #generated.
    self triggerEvent: #cityChanged: with: self city! !

!PersonPane class methods !
wbConstructPropertyManager
    "Construct the WindowBuilder property manager
        based on the Digitalk property manager."

    #addedByOSI.
    ^super wbConstructPropertyManager
        wbAddEvent: (
            (Smalltalk at: #WBEventDescription) new
                event: #nameChanged: ;
                argumentNames: #('anObject'));
        wbAddEvent: (
            (Smalltalk at: #WBEventDescription) new
                event: #personChanged: ;
                argumentNames: #('anObject'));
        yourself! !

!WBAddress methods ! 
basicState: aString
    "Private - set the value of state to <aString>.
    Remove the #generated tag before modifying this method.
    (Generated by WindowBuilder Pro)"

    "(c) Copyright OSI, 1995. All Rights Reserved."

    #generated.
    state := aString! !

!PersonPane class methods !
constructEventsTriggered
        "Private - answer the set of events that instances of the
        receiver can trigger."
    ^super constructEventsTriggered
        add: #nameChanged:;
        add: #personChanged:;
        yourself! !

!ListEditorPane methods !
contents

    ^list ifNil: [list := OrderedCollection new].! !

!ListEditorPane methods ! 
enable

    (self paneNamed: 'insert') enable.
    (self paneNamed: 'change') enable.
    (self paneNamed: 'delete') enable.! !

!WBPerson methods !
triggerSexChangedEvent
    "Private - trigger the #sexChanged: event.
    Remove the #generated tag before modifying this method.
    (Generated by WindowBuilder Pro)"

    "(c) Copyright OSI, 1995. All Rights Reserved."

    #generated.
    self triggerEvent: #sexChanged: with: self sex! !

!WBAddress methods !   
triggerZipChangedEvent
    "Private - trigger the #zipChanged: event.
    Remove the #generated tag before modifying this method.
    (Generated by WindowBuilder Pro)"

    "(c) Copyright OSI, 1995. All Rights Reserved."

    #generated.
    self triggerEvent: #zipChanged: with: self zip! !

!WBPerson methods !
address: aWBAddress
    "Set the value of address to <aWBAddress>.
    Remove the #generated tag before modifying this method.
    (Generated by WindowBuilder Pro)"

    "(c) Copyright OSI, 1995. All Rights Reserved."

    #generated.
    address = aWBAddress
        ifFalse: [
            self
                basicAddress: aWBAddress;
                changed;
                triggerAddressChangedEvent]! !

!OkCancelPane class methods !   
wbBasicVersion

	"Private - Answer the WindowBuilder Pro version.
		Generated in: Visual Smalltalk Enterprise 3.1.0 Win32"

	^3.1! !

!PersonPaneTester methods !  
createViews

	"WARNING!! This method was automatically generated by 
	WindowBuilder. Code you add here which does not conform to 
	the WindowBuilder API will probably be lost the next time 
	you save your layout definition."

	| inspect inspectPane mainView new person xDU yDU |
	
	#generated.
	xDU := (SysFont width + 1 roundTo: 2) / 4.
	yDU := SysFont height / 8.
	mainView := self topPaneClass new.
	
		"Temporary Variables"
	inspect := Button new.
	inspectPane := Button new.
	new := Button new.
	person := PersonPane new.
	
	mainView
		owner: self;
		setName: 'mainView';
		labelWithoutPrefix: 'PersonPane Tester';
		noSmalltalkMenuBar;
		backColor: Color gray;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 1/2; leftInset: -102 * xDU;
				topRatio: 1/2; topInset: -145/2 * yDU;
				rightRatio: 1/2; rightInset: -102 * xDU;
				bottomRatio: 1/2; bottomInset: -127/2 * yDU).
	self addView: mainView.
	
	person "PersonPane"
		owner: self;
		setName: 'person';
		when: #needsContents send: #getPerson: to: self withArgument: person;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 4 * xDU;
				topRatio: 0; topInset: 0 * yDU;
				rightRatio: 0; rightInset: -198 * xDU;
				bottomRatio: 0; bottomInset: -104 * yDU);
		startGroup.
	mainView
		addSubpane: person;
		subPaneWithFocus: person.
	
	new "Button"
		owner: self;
		setName: 'new';
		when: #clicked send: #newPerson to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 4 * xDU;
				topRatio: 0; topInset: 104 * yDU;
				rightRatio: 0; rightInset: -38 * xDU;
				bottomRatio: 0; bottomInset: -120 * yDU);
		contents: 'New';
		startGroup;
		font: SysFont.
	mainView addSubpane: new.
	
	inspect "Button"
		owner: self;
		setName: 'inspect';
		when: #clicked send: #inspectPerson to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 40 * xDU;
				topRatio: 0; topInset: 104 * yDU;
				rightRatio: 0; rightInset: -74 * xDU;
				bottomRatio: 0; bottomInset: -120 * yDU);
		contents: 'Inspect';
		startGroup;
		font: SysFont.
	mainView addSubpane: inspect.
	
	inspectPane "Button"
		owner: self;
		setName: 'inspectPane';
		when: #clicked send: #inspectPane to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 76 * xDU;
				topRatio: 0; topInset: 104 * yDU;
				rightRatio: 0; rightInset: -128 * xDU;
				bottomRatio: 0; bottomInset: -120 * yDU);
		contents: 'Inspect Pane';
		startGroup;
		font: SysFont.
	mainView addSubpane: inspectPane! !

!AddressPane methods ! 
address

    ^address ifNil: [address := WBAddress new]! !

!WBAddress class methods !
wbBasicVersion
    "Private - Answer the WindowBuilder Pro version.
        Generated in: Visual Smalltalk Enterprise 3.1.0 Win32"

    "(c) Copyright OSI, 1995. All Rights Reserved."

    ^3.1! !

!DictionaryEditorPane methods ! 
contents: aDictionaryOfStrings

    dictionary := aDictionaryOfStrings.
    listEditor contents: dictionary keys.! !

!WBCompositePaneExampleAddInModule class methods ! 
modifyPalette: thePalette
	"Modify the palette"

	self
		insertMenu: #('~OkCancelPane' 'OkCancelPane' '')
			in: thePalette
			after: 'SexPane';
		insertMenu: #('~NamePane' 'NamePane' '')
			in: thePalette
			after: 'OkCancelPane';
		insertMenu: #('~AddressPane' 'AddressPane' '')
			in: thePalette
			after: 'NamePane';
		insertMenu: #('~PersonPane' 'PersonPane' '')
			in: thePalette
			after: 'AddressPane';
		insertMenu: #('~ListEditorPane' 'ListEditorPane' '')
			in: thePalette
			after: 'PersonPane';
		insertMenu: #('~DictionaryEditorPane' 'DictionaryEditorPane' '')
			in: thePalette
			after: 'ListEditorPane';
		insertMenu: #('Address~EditorPane' 'AddressEditorPane' '')
			in: thePalette
			after: 'DictionaryEditorPane'.
	! !

!ListEditorPane methods !  
selectIndex: index

    listbox selectIndex: index! !

!WBAddress methods !   
basicStreet1: aString
    "Private - set the value of street1 to <aString>.
    Remove the #generated tag before modifying this method.
    (Generated by WindowBuilder Pro)"

    "(c) Copyright OSI, 1995. All Rights Reserved."

    #generated.
    street1 := aString! !

!WBName methods !
triggerLastChangedEvent
    "Private - trigger the #lastChanged: event.
    Remove the #generated tag before modifying this method.
    (Generated by WindowBuilder Pro)"

    "(c) Copyright OSI, 1995. All Rights Reserved."

    #generated.
    self triggerEvent: #lastChanged: with: self last! !

!WBName methods !  
basicFirst: aString
    "Private - set the value of first to <aString>.
    Remove the #generated tag before modifying this method.
    (Generated by WindowBuilder Pro)"

    "(c) Copyright OSI, 1995. All Rights Reserved."

    #generated.
    first := aString! !

!WBPerson class methods !  
constructEventsTriggered
    "Private - answer all the events which can be triggered by instances of the receiver.
    Remove the #generated tag before modifying this method.
    (Generated by WindowBuilder Pro)"

    "(c) Copyright OSI, 1995. All Rights Reserved."

    #generated.
    ^super constructEventsTriggered
        add: #nameChanged:;
        add: #addressChanged:;
        add: #sexChanged:;
        yourself! !

!WBName methods ! 
basicMiddle: aString
    "Private - set the value of middle to <aString>.
    Remove the #generated tag before modifying this method.
    (Generated by WindowBuilder Pro)"

    "(c) Copyright OSI, 1995. All Rights Reserved."

    #generated.
    middle := aString! !

!AddressPaneTester methods !
newAddress

    "Callback for the #clicked event in the Button named 'new'.
     (Generated by WindowBuilder)"

    (self paneNamed: 'addressPane') contents: WBAddress new! !

!PersonPane methods !  
contents: aWBPerson

    self person: aWBPerson! !

!NamePane methods !   
name

    ^name ifNil: [name := WBName new]! !

!ListEditorPane methods ! 
delete

    Notifier isAltKeyDown
        ifTrue: [list := OrderedCollection new]
        ifFalse: [
            listbox selection isNil ifTrue: [^nil].
            list removeIndex: listbox selection].
    listbox contents: list.
    self disable.
    self triggerEvent: #listChanged: with: list! !

!PersonPaneTester class methods ! 
wbBasicVersion

	"Private - Answer the WindowBuilder Pro version.
		Generated in: Visual Smalltalk Enterprise 3.1.0 Win32"

	^3.1! !

!PersonPane methods !
getName: aPane

    "Callback for the #needsContents event in the NamePane named 'name'.
     (Generated by WindowBuilder)"

    aPane contents: self person name! !

!ListEditorPane class methods !  
importantEvents

    ^#(#clicked: #listChanged: #itemChanged: #itemChanging: #needsContents)! !

!PersonPaneTester methods !  
inspectPerson

    "Callback for the #clicked event in the Button named 'inspect'.
     (Generated by WindowBuilder)"

    (self paneNamed: 'person') contents inspect! !

!WBAddress methods !
city: aString
    "Set the value of city to <aString>.
    Remove the #generated tag before modifying this method.
    (Generated by WindowBuilder Pro)"

    "(c) Copyright OSI, 1995. All Rights Reserved."

    #generated.
    city = aString
        ifFalse: [
            self
                basicCity: aString;
                changed;
                triggerCityChangedEvent]! !

!WBName methods !  
first
    "Answer the value of first.
    Remove the #generated tag before modifying this method.
    (Generated by WindowBuilder Pro)"

    "(c) Copyright OSI, 1995. All Rights Reserved."

    #generated.
    ^first ifNil: [first := '']! !

!PersonEditorPane methods !   
accept: aPane

    super accept: aPane.
    (listEditor selectedItem = detail person fullName) ifFalse: [
        dictionary at: detail person fullName put:
            (dictionary at: listEditor selectedItem).
        dictionary removeKey: listEditor selectedItem.
        self contents: dictionary.
        listEditor item contents: detail person fullName
   ]! !

!WBCompositePaneExampleAddInModule class methods !  
commonName

	^'Composite Pane Examples'! !

!WBAddress methods !  
printOn: aStream

    super printOn: aStream.
    aStream
        cr; tab; nextPutAll: 'street1: ', self street1;
        cr; tab; nextPutAll: 'street2: ', self street2;
        cr; tab; nextPutAll: 'city: ', self city;
        cr; tab; nextPutAll: 'state: ', self state;
        cr; tab; nextPutAll: 'zip: ', self zip! !

!PersonEditorPane methods !  
addSubpanes

	"WARNING!! This method was automatically generated by 
	WindowBuilder. Code you add here which does not conform to 
	the WindowBuilder API will probably be lost the next time 
	you save your layout definition."

	| accept revert xDU yDU |
	#generated.
	xDU := (SysFont width + 1 roundTo: 2) / 4.
	yDU := SysFont height / 8.
	
		"Instance Variables"
	detail := PersonPane new.
	listEditor := ListEditorPane new.
	
		"Temporary Variables"
	accept := Button new.
	revert := Button new.
	
	self
		framingBlock: 
			(LayoutFrame new
				leftRatio: 1/2; leftInset: -121 * xDU;
				topRatio: 1/2; topInset: -96 * yDU;
				rightRatio: 1/2; rightInset: -121 * xDU;
				bottomRatio: 1/2; bottomInset: -96 * yDU);
		backColor: Color gray.
	
	listEditor "ListEditorPane"
		owner: self;
		setName: 'listEditor';
		when: #clicked: send: #select: to: self;
		when: #itemChanging: send: #itemChanging: to: self;
		when: #listChanged: send: #listChanged: to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 0 * xDU;
				topRatio: 0; topInset: 0 * yDU;
				rightRatio: 1; rightInset: 1 * xDU;
				bottomRatio: 0; bottomInset: -86 * yDU);
		startGroup;
		backColor: Color gray.
	self addSubpane: listEditor.
	
	detail "PersonPane"
		owner: self;
		setName: 'detail';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 2 * xDU;
				topRatio: 0; topInset: 86 * yDU;
				rightRatio: 1; rightInset: 45 * xDU;
				bottomRatio: 1; bottomInset: 1 * yDU);
		startGroup;
		backColor: Color gray.
	self addSubpane: detail.
	
	accept "Button"
		owner: self;
		setName: 'accept';
		when: #clicked send: #accept to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 1; leftInset: -42 * xDU;
				topRatio: 1; topInset: -32 * yDU;
				rightRatio: 1; rightInset: 2 * xDU;
				bottomRatio: 1; bottomInset: 18 * yDU);
		contents: 'Accept';
		startGroup;
		font: SysFont.
	self addSubpane: accept.
	
	revert "Button"
		owner: self;
		setName: 'revert';
		when: #clicked send: #revert to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 1; leftInset: -42 * xDU;
				topRatio: 1; topInset: -16 * yDU;
				rightRatio: 1; rightInset: 2 * xDU;
				bottomRatio: 1; bottomInset: 2 * yDU);
		contents: 'Revert';
		startGroup;
		font: SysFont.
	self addSubpane: revert! !

!WBAddress methods ! 
basicCity: aString
    "Private - set the value of city to <aString>.
    Remove the #generated tag before modifying this method.
    (Generated by WindowBuilder Pro)"

    "(c) Copyright OSI, 1995. All Rights Reserved."

    #generated.
    city := aString! !

!ListEditorPane methods ! 
insert

    listbox selection isNil ifTrue: [^nil].
    list add: item contents beforeIndex: listbox selection.
    listbox contents: list.
    self disable.
    self triggerEvent: #listChanged: with: list! !

!ListEditorPane methods !   
item

    ^item! !

!PersonPane class methods !   
wbBasicVersion

	"Private - Answer the WindowBuilder Pro version.
		Generated in: Visual Smalltalk Enterprise 3.1.0 Win32"

	^3.1! !

!NamePane methods !  
setLastName: aString

    "Callback for the #textChanged: event in the EntryField named 'lastName'.
     (Generated by WindowBuilder)"

    self name last: aString.
    self triggerEvent: #nameChanged: with: self name.! !

!WBPerson methods !
sex: aSymbol
    "Set the value of sex to <aSymbol>.
    Remove the #generated tag before modifying this method.
    (Generated by WindowBuilder Pro)"

    "(c) Copyright OSI, 1995. All Rights Reserved."

    #generated.
    sex = aSymbol
        ifFalse: [
            self
                basicSex: aSymbol;
                changed;
                triggerSexChangedEvent]! !

!DictionaryEditorPane methods ! 
addSubpanes

	"WARNING!! This method was automatically generated by 
	WindowBuilder. Code you add here which does not conform to 
	the WindowBuilder API will probably be lost the next time 
	you save your layout definition."

	| accept revert xDU yDU |
	#generated.
	xDU := (SysFont width + 1 roundTo: 2) / 4.
	yDU := SysFont height / 8.
	
		"Instance Variables"
	detail := TextEdit new.
	listEditor := ListEditorPane new.
	
		"Temporary Variables"
	accept := Button new.
	revert := Button new.
	
	self
		framingBlock: 
			(LayoutFrame new
				leftRatio: 1/2; leftInset: -81 * xDU;
				topRatio: 1/2; topInset: -131/2 * yDU;
				rightRatio: 1/2; rightInset: -81 * xDU;
				bottomRatio: 1/2; bottomInset: -131/2 * yDU);
		backColor: Color gray.
	
	listEditor "ListEditorPane"
		owner: self;
		setName: 'listEditor';
		when: #clicked: send: #select: to: self;
		when: #itemChanging: send: #itemChanging: to: self;
		when: #listChanged: send: #listChanged: to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 0 * xDU;
				topRatio: 0; topInset: 0 * yDU;
				rightRatio: 1; rightInset: 0 * xDU;
				bottomRatio: 83/130; bottomInset: 0 * yDU);
		startGroup;
		backColor: Color gray.
	self addSubpane: listEditor.
	
	accept "Button"
		owner: self;
		setName: 'accept';
		when: #clicked send: #accept to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 1; leftInset: -42 * xDU;
				topRatio: 1; topInset: -32 * yDU;
				rightRatio: 1; rightInset: 2 * xDU;
				bottomRatio: 1; bottomInset: 18 * yDU);
		contents: 'Accept';
		startGroup;
		font: SysFont.
	self addSubpane: accept.
	
	revert "Button"
		owner: self;
		setName: 'revert';
		when: #clicked send: #revert to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 1; leftInset: -42 * xDU;
				topRatio: 1; topInset: -16 * yDU;
				rightRatio: 1; rightInset: 2 * xDU;
				bottomRatio: 1; bottomInset: 2 * yDU);
		contents: 'Revert';
		startGroup;
		font: SysFont.
	self addSubpane: revert.
	
	detail "TextEdit"
		owner: self;
		setName: 'detail';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 2 * xDU;
				topRatio: 42/65; topInset: 0 * yDU;
				rightRatio: 1; rightInset: 45 * xDU;
				bottomRatio: 1; bottomInset: 2 * yDU);
		addHorizontalScrollbarStyle;
		addVerticalScrollbarStyle;
		startGroup;
		noTabStop;
		font: SysFont.
	self addSubpane: detail! !

!WBAddress methods !   
triggerStreet1ChangedEvent
    "Private - trigger the #street1Changed: event.
    Remove the #generated tag before modifying this method.
    (Generated by WindowBuilder Pro)"

    "(c) Copyright OSI, 1995. All Rights Reserved."

    #generated.
    self triggerEvent: #street1Changed: with: self street1! !

!WBAddress methods !   
street2
    "Answer the value of street2.
    Remove the #generated tag before modifying this method.
    (Generated by WindowBuilder Pro)"

    "(c) Copyright OSI, 1995. All Rights Reserved."

    #generated.
    ^street2 ifNil: [street2 := '']! !

!AddressEditorPane methods !  
itemClass

    ^WBAddress! !

!ListEditorPane class methods ! 
wbPartEventItems

	"WARNING!! This method was automatically generated by 
	WindowBuilder. Code you add here which does not conform to 
	the WindowBuilder API will probably be lost the next time 
	you save your wb-parts definition."

	#generated.
	^#(#clicked: #itemChanged: #itemChanging: #listChanged: 
		#rightClicked #tabbed)! !

!AddressPaneTester methods !  
inspectAddress

    "Callback for the #clicked event in the Button named 'inspect'.
     (Generated by WindowBuilder)"

    (self paneNamed: 'addressPane') contents inspect! !

!AddressPane methods !
setCity: aString

    "Callback for the #textChanged: event in the EntryField named 'city'.
     (Generated by WindowBuilder)"

    self address city: aString.
    self triggerEvent: #addressChanged: with: self address.! !

!DictionaryEditorPane methods !   
itemClass

    ^String! !

!OkCancelPane class methods !  
importantEvents

    ^#(#ok #cancel)! !

!AddressPaneTester methods ! 
address

    ^address ifNil: [address := WBAddress new].! !

!PersonPaneTester methods !  
inspectPane

    "Callback for the #clicked event in an unnamed Button (contents is 'Inspect Pane').
     (Generated by WindowBuilder)"

    (self paneNamed: 'person') inspect! !

!WBPerson methods !
name: aWBName
    "Set the value of name to <aWBName>.
    Remove the #generated tag before modifying this method.
    (Generated by WindowBuilder Pro)"

    "(c) Copyright OSI, 1995. All Rights Reserved."

    #generated.
    name = aWBName
        ifFalse: [
            self
                basicName: aWBName;
                changed;
                triggerNameChangedEvent]! !

!AddressPane methods ! 
getCity: aPane

    "Callback for the #needsContents event in the EntryField named 'city'.
     (Generated by WindowBuilder)"

    aPane contents: self address city! !

!OkCancelPane methods !   
addSubpanes

	"WARNING!! This method was automatically generated by 
	WindowBuilder. Code you add here which does not conform to 
	the WindowBuilder API will probably be lost the next time 
	you save your layout definition."

	| cancel ok xDU yDU |
	#generated.
	xDU := (SysFont width + 1 roundTo: 2) / 4.
	yDU := SysFont height / 8.
	
		"Temporary Variables"
	cancel := Button new.
	ok := Button new.
	
	self
		framingBlock: 
			(LayoutFrame new
				leftRatio: 1/2; leftInset: -34 * xDU;
				topRatio: 1/2; topInset: -9 * yDU;
				rightRatio: 1/2; rightInset: -34 * xDU;
				bottomRatio: 1/2; bottomInset: -9 * yDU);
		backColor: Color gray.
	
	ok "Button"
		owner: self;
		setName: 'ok';
		when: #clicked send: #ok to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 0 * xDU;
				topRatio: 0; topInset: 0 * yDU;
				rightRatio: 32/67; rightInset: 0 * xDU;
				bottomRatio: 16/17; bottomInset: 0 * yDU);
		defaultPushButton;
		contents: '&OK';
		startGroup;
		font: SysFont.
	self addSubpane: ok.
	
	cancel "Button"
		owner: self;
		setName: 'cancel';
		when: #clicked send: #cancel to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 34/67; leftInset: 0 * xDU;
				topRatio: 0; topInset: 0 * yDU;
				rightRatio: 1; rightInset: 1 * xDU;
				bottomRatio: 16/17; bottomInset: 0 * yDU);
		cancelPushButton;
		contents: 'Cancel';
		startGroup;
		font: SysFont.
	self addSubpane: cancel! !

!WBPerson methods !
triggerAddressChangedEvent
    "Private - trigger the #addressChanged: event.
    Remove the #generated tag before modifying this method.
    (Generated by WindowBuilder Pro)"

    "(c) Copyright OSI, 1995. All Rights Reserved."

    #generated.
    self triggerEvent: #addressChanged: with: self address! !

!ListEditorPane methods !  
selectItem: aString

    listbox selectItem: aString! !

!WBCompositePaneExampleAddInModule class methods !   
modifiesPalette
    "Does this add-in modify the palette?"

    ^true! !

!PersonPane methods !  
getSex: aPane

    "Callback for the #needsContents event in the SexPane named 'sex'.
     (Generated by WindowBuilder)"

    aPane contents: self person sex! !

!DictionaryEditorPane methods !  
selectedIndex

    ^listEditor selectedIndex! !

!WBCompositePaneExampleAddInModule class methods !   
comment

	^'Installs several CompositePane 
examples on the palette'! !

!PersonPane methods !   
addSubpanes

	"WARNING!! This method was automatically generated by 
	WindowBuilder. Code you add here which does not conform to 
	the WindowBuilder API will probably be lost the next time 
	you save your layout definition."

	| address name sex xDU yDU |
	#generated.
	xDU := (SysFont width + 1 roundTo: 2) / 4.
	yDU := SysFont height / 8.
	
		"Temporary Variables"
	address := AddressPane new.
	name := NamePane new.
	sex := SexPane new.
	
	self
		framingBlock: 
			(LayoutFrame new
				leftRatio: 1/2; leftInset: -97 * xDU;
				topRatio: 1/2; topInset: -52 * yDU;
				rightRatio: 1/2; rightInset: -97 * xDU;
				bottomRatio: 1/2; bottomInset: -52 * yDU);
		backColor: Color gray.
	
	name "NamePane"
		owner: self;
		setName: 'name';
		when: #nameChanged: send: #nameChanged: to: self;
		when: #needsContents send: #getName: to: self withArgument: name;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 0 * xDU;
				topRatio: 0; topInset: 0 * yDU;
				rightRatio: 1; rightInset: 49 * xDU;
				bottomRatio: 0; bottomInset: -34 * yDU);
		startGroup;
		backColor: Color gray.
	self addSubpane: name.
	
	sex "SexPane"
		owner: self;
		setName: 'sex';
		when: #needsContents send: #getSex: to: self withArgument: sex;
		when: #sexChanged: send: #sexChanged: to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 1; leftInset: -47 * xDU;
				topRatio: 0; topInset: 0 * yDU;
				rightRatio: 1; rightInset: 0 * xDU;
				bottomRatio: 0; bottomInset: -33 * yDU);
		startGroup;
		backColor: Color gray.
	self addSubpane: sex.
	
	address "AddressPane"
		owner: self;
		setName: 'address';
		when: #addressChanged: send: #addressChanged: to: self;
		when: #needsContents send: #getAddress: to: self withArgument: address;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 0 * xDU;
				topRatio: 0; topInset: 34 * yDU;
				rightRatio: 1; rightInset: 1 * xDU;
				bottomRatio: 0; bottomInset: -102 * yDU);
		startGroup;
		backColor: Color gray.
	self addSubpane: address! !

!AddressPane class methods !
constructEventsTriggered
        "Private - answer the set of events that instances of the
        receiver can trigger."
    ^super constructEventsTriggered
        add: #addressChanged:;
        yourself! !

!WBPerson methods !  
basicAddress: aWBAddress
    "Private - set the value of address to <aWBAddress>.
    Remove the #generated tag before modifying this method.
    (Generated by WindowBuilder Pro)"

    "(c) Copyright OSI, 1995. All Rights Reserved."

    #generated.
    address := aWBAddress! !

!WBName methods !   
last
    "Answer the value of last.
    Remove the #generated tag before modifying this method.
    (Generated by WindowBuilder Pro)"

    "(c) Copyright OSI, 1995. All Rights Reserved."

    #generated.
    ^last ifNil: [last := '']! !

!ListEditorPane class methods !   
wbConstructPropertyManager
    "Construct the WindowBuilder property manager
        based on the Digitalk property manager."

    #addedByOSI.
    ^super wbConstructPropertyManager
        wbAddEvent: (
            (Smalltalk at: #WBEventDescription) new
                event: #listChanged: ;
                argumentNames: #('anObject'));
        wbAddEvent: (
            (Smalltalk at: #WBEventDescription) new
                event: #itemChanged: ;
                argumentNames: #('anObject'));
        wbAddEvent: (
            (Smalltalk at: #WBEventDescription) new
                event: #itemChanging: ;
                argumentNames: #('anObject'));
        wbAddEvent: (
            (Smalltalk at: #WBEventDescription) new
                event: #clicked: ;
                argumentNames: #('anObject'));
        yourself! !

!ListEditorPane methods ! 
itemContents

    ^item contents.! !

!WBPerson methods ! 
address
    "Answer the value of address.
    Remove the #generated tag before modifying this method.
    (Generated by WindowBuilder Pro)"

    "(c) Copyright OSI, 1995. All Rights Reserved."

    #generated.
    ^address ifNil: [address := WBAddress new]! !

!WBName methods !  
printOn: aStream

    super printOn: aStream.
    aStream
        cr; tab; nextPutAll: 'first: ', self first;
        cr; tab; nextPutAll: 'middle: ', self middle;
        cr; tab; nextPutAll: 'last: ', self last! !

!PersonPane methods !
person: aWBPerson

    person := aWBPerson.
    self updateAll.
    self triggerEvent: #personChanged: with: person.! !

!ListEditorPane methods !  
addSubpanes

	"WARNING!! This method was automatically generated by 
	WindowBuilder. Code you add here which does not conform to 
	the WindowBuilder API will probably be lost the next time 
	you save your layout definition."

	| add change delete insert sort xDU yDU |
	#generated.
	xDU := (SysFont width + 1 roundTo: 2) / 4.
	yDU := SysFont height / 8.
	
		"Instance Variables"
	item := WBEntryField new.
	listbox := ListBox new.
	
		"Temporary Variables"
	add := Button new.
	change := Button new.
	delete := Button new.
	insert := Button new.
	sort := Button new.
	
	self
		framingBlock: 
			(LayoutFrame new
				leftRatio: 1/2; leftInset: -81 * xDU;
				topRatio: 1/2; topInset: -42 * yDU;
				rightRatio: 1/2; rightInset: -81 * xDU;
				bottomRatio: 1/2; bottomInset: -42 * yDU);
		backColor: Color gray.
	
	item "WBEntryField"
		owner: self;
		setName: 'item';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 2 * xDU;
				topRatio: 0; topInset: 2 * yDU;
				rightRatio: 1; rightInset: 45 * xDU;
				bottomRatio: 0; bottomInset: -14 * yDU);
		startGroup;
		font: SysFont.
	self addSubpane: item.
	
	listbox
		owner: self;
		setName: 'listbox';
		when: #clicked: send: #select: to: self;
		when: #needsContents send: #getList: to: self withArgument: listbox;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 2 * xDU;
				topRatio: 0; topInset: 18 * yDU;
				rightRatio: 1; rightInset: 45 * xDU;
				bottomRatio: 1; bottomInset: 3 * yDU);
		startGroup;
		font: SysFont.
	self addSubpane: listbox.
	
	add "Button"
		owner: self;
		setName: 'add';
		when: #clicked send: #add to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 1; leftInset: -43 * xDU;
				topRatio: 0; topInset: 2 * yDU;
				rightRatio: 1; rightInset: 3 * xDU;
				bottomRatio: 0; bottomInset: -16 * yDU);
		contents: '&Add';
		startGroup;
		font: SysFont.
	self addSubpane: add.
	
	insert "Button"
		owner: self;
		setName: 'insert';
		when: #clicked send: #insert to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 1; leftInset: -43 * xDU;
				topRatio: 0; topInset: 18 * yDU;
				rightRatio: 1; rightInset: 3 * xDU;
				bottomRatio: 0; bottomInset: -32 * yDU);
		contents: '&Insert';
		startGroup;
		font: SysFont.
	self addSubpane: insert.
	
	change "Button"
		owner: self;
		setName: 'change';
		when: #clicked send: #change to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 1; leftInset: -43 * xDU;
				topRatio: 0; topInset: 34 * yDU;
				rightRatio: 1; rightInset: 3 * xDU;
				bottomRatio: 0; bottomInset: -48 * yDU);
		contents: '&Change';
		startGroup;
		font: SysFont.
	self addSubpane: change.
	
	delete "Button"
		owner: self;
		setName: 'delete';
		when: #clicked send: #delete to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 1; leftInset: -43 * xDU;
				topRatio: 0; topInset: 50 * yDU;
				rightRatio: 1; rightInset: 3 * xDU;
				bottomRatio: 0; bottomInset: -64 * yDU);
		contents: '&Delete';
		startGroup;
		font: SysFont.
	self addSubpane: delete.
	
	sort "Button"
		owner: self;
		setName: 'sort';
		when: #clicked send: #sort to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 1; leftInset: -43 * xDU;
				topRatio: 0; topInset: 66 * yDU;
				rightRatio: 1; rightInset: 3 * xDU;
				bottomRatio: 0; bottomInset: -80 * yDU);
		contents: '&Sort';
		startGroup;
		font: SysFont.
	self addSubpane: sort! !

!DictionaryEditorPane methods ! 
initializeNewItem: anItem key: key! !

!AddressPane methods !   
setState: selectedItem

    "Callback for the #clicked: event in the ComboBox named 'state'.
     (Generated by WindowBuilder)"

    self address state: selectedItem.
    self triggerEvent: #addressChanged: with: self address.! !

!OkCancelPane class methods !  
wbPartEventItems

	"WARNING!! This method was automatically generated by 
	WindowBuilder. Code you add here which does not conform to 
	the WindowBuilder API will probably be lost the next time 
	you save your wb-parts definition."

	#generated.
	^#(#cancel #ok #rightClicked #tabbed)! !

!OkCancelPane class methods !  
wbConstructPropertyManager
    "Construct the WindowBuilder property manager
        based on the Digitalk property manager."

    #addedByOSI.
    ^super wbConstructPropertyManager
        wbAddEvent: (
            (Smalltalk at: #WBEventDescription) new
                event: #ok ;
                argumentNames: #( ));
        wbAddEvent: (
            (Smalltalk at: #WBEventDescription) new
                event: #cancel ;
                argumentNames: #( ));
        yourself! !

!PersonEditorPane methods !  
initializeNewItem: anItem key: key

    | first last |
    (key includes: $,)
        ifTrue: [
            first := (key reversed upTo: $,) trimBlanks reversed.
            last := key upTo: $,]
        ifFalse: [
            first := (key upTo: $ ) trimBlanks.
            last := (key reversed upTo: $ ) trimBlanks reversed].

    (anItem name)
        first: first;
        last: last! !

!PersonPane class methods !   
wbPartEventItems

	"WARNING!! This method was automatically generated by 
	WindowBuilder. Code you add here which does not conform to 
	the WindowBuilder API will probably be lost the next time 
	you save your wb-parts definition."

	#generated.
	^#(#nameChanged: #personChanged: #rightClicked #tabbed)! !

!WBName methods !
middle
    "Answer the value of middle.
    Remove the #generated tag before modifying this method.
    (Generated by WindowBuilder Pro)"

    "(c) Copyright OSI, 1995. All Rights Reserved."

    #generated.
    ^middle ifNil: [middle := '']! !

!WBAddress class methods !
example

    ^self new
        street1: '5 Town & Country Village';
        street2: 'Suite 773';
        city: 'San Jose';
        state: 'CA';
        zip: '95128-2026';
        yourself! !

!WBAddress methods !   
zip
    "Answer the value of zip.
    Remove the #generated tag before modifying this method.
    (Generated by WindowBuilder Pro)"

    "(c) Copyright OSI, 1995. All Rights Reserved."

    #generated.
    ^zip ifNil: [zip := '']! !

!ListEditorPane methods ! 
sort

    list := list asSortedCollection asOrderedCollection.
    listbox contents: list.
    self triggerEvent: #listChanged: with: list! !

!WBPerson methods !  
sex
    "Answer the value of sex.
    Remove the #generated tag before modifying this method.
    (Generated by WindowBuilder Pro)"

    "(c) Copyright OSI, 1995. All Rights Reserved."

    #generated.
    ^sex ifNil: [sex := #male]! !

!NamePane methods !
contents

    ^self name! !

!ModelObjectTest class methods ! 
wbBasicVersion

	"Private - Answer the WindowBuilder Pro version.
		Generated in: Visual Smalltalk Enterprise 3.1.0 Win32"

	^3.1! !

!WBAddress methods ! 
city
    "Answer the value of city.
    Remove the #generated tag before modifying this method.
    (Generated by WindowBuilder Pro)"

    "(c) Copyright OSI, 1995. All Rights Reserved."

    #generated.
    ^city ifNil: [city := '']! !

!NamePane methods !   
getMiddleInitial: aPane

    "Callback for the #needsContents event in the EntryField named 'middleInitial'.
     (Generated by WindowBuilder)"

    aPane contents: self name middle! !

!WBAddress methods ! 
triggerStreet2ChangedEvent
    "Private - trigger the #street2Changed: event.
    Remove the #generated tag before modifying this method.
    (Generated by WindowBuilder Pro)"

    "(c) Copyright OSI, 1995. All Rights Reserved."

    #generated.
    self triggerEvent: #street2Changed: with: self street2! !

!WBPerson class methods !  
wbBasicVersion
    "Private - Answer the WindowBuilder Pro version.
        Generated in: Visual Smalltalk Enterprise 3.1.0 Win32"

    "(c) Copyright OSI, 1995. All Rights Reserved."

    ^3.1! !

!AddressPane methods !  
getStreet1: aPane

    "Callback for the #needsContents event in the EntryField named 'street1'.
     (Generated by WindowBuilder)"

    aPane contents: self address street1! !

!AddressPane methods !   
setZip: aString

    "Callback for the #textChanged: event in the EntryField named 'zip'.
     (Generated by WindowBuilder)"

    self address zip: aString.
    self triggerEvent: #addressChanged: with: self address.! !

!WBPerson methods !  
fullName

    ^self name last, ', ', self name first! !

!WBAddress methods ! 
state: aString
    "Set the value of state to <aString>.
    Remove the #generated tag before modifying this method.
    (Generated by WindowBuilder Pro)"

    "(c) Copyright OSI, 1995. All Rights Reserved."

    #generated.
    state = aString
        ifFalse: [
            self
                basicState: aString;
                changed;
                triggerStateChangedEvent]! !

!WBName methods ! 
triggerMiddleChangedEvent
    "Private - trigger the #middleChanged: event.
    Remove the #generated tag before modifying this method.
    (Generated by WindowBuilder Pro)"

    "(c) Copyright OSI, 1995. All Rights Reserved."

    #generated.
    self triggerEvent: #middleChanged: with: self middle! !

!PersonEditorPane methods !
itemClass

    ^WBPerson! !

!WBAddress methods ! 
basicZip: aString
    "Private - set the value of zip to <aString>.
    Remove the #generated tag before modifying this method.
    (Generated by WindowBuilder Pro)"

    "(c) Copyright OSI, 1995. All Rights Reserved."

    #generated.
    zip := aString! !

!WBAddress methods ! 
street1
    "Answer the value of street1.
    Remove the #generated tag before modifying this method.
    (Generated by WindowBuilder Pro)"

    "(c) Copyright OSI, 1995. All Rights Reserved."

    #generated.
    ^street1 ifNil: [street1 := '']! !

!AddressEditorPane class methods !
wbBasicVersion

	"Private - Answer the WindowBuilder Pro version.
		Generated in: Visual Smalltalk Enterprise 3.1.0 Win32"

	^3.1! !

!NamePane methods !  
setFirstName: aString

    "Callback for the #textChanged: event in the EntryField named 'firstName'.
     (Generated by WindowBuilder)"

    self name first: aString.
    self triggerEvent: #nameChanged: with: self name.! !

!DictionaryEditorPane methods ! 
revert

    Notifier isAltKeyDown ifTrue: [^detail contents inspect].
    detail contents: (dictionary at: listEditor selectedItem)! !

!AddressPane methods !   
setStreet1: aString

    "Callback for the #textChanged: event in the EntryField named 'street1'.
     (Generated by WindowBuilder)"

    self address street1: aString.
    self triggerEvent: #addressChanged: with: self address.! !

!NamePane methods !  
contents: aWBName

    self name: aWBName! !

!AddressPaneTester methods !
createViews

	"WARNING!! This method was automatically generated by 
	WindowBuilder. Code you add here which does not conform to 
	the WindowBuilder API will probably be lost the next time 
	you save your layout definition."

	| addressPane inspect mainView new xDU yDU |
	
	#generated.
	xDU := (SysFont width + 1 roundTo: 2) / 4.
	yDU := SysFont height / 8.
	mainView := self topPaneClass new.
	
		"Temporary Variables"
	addressPane := AddressPane new.
	inspect := Button new.
	new := Button new.
	
	mainView
		owner: self;
		setName: 'mainView';
		labelWithoutPrefix: 'AddressPane Tester';
		noSmalltalkMenuBar;
		backColor: Color gray;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 1/2; leftInset: -76 * xDU;
				topRatio: 1/2; topInset: -113/2 * yDU;
				rightRatio: 1/2; rightInset: -76 * xDU;
				bottomRatio: 1/2; bottomInset: -95/2 * yDU).
	self addView: mainView.
	
	addressPane
		owner: self;
		setName: 'addressPane';
		when: #needsContents send: #getAddress: to: self withArgument: addressPane;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 2 * xDU;
				topRatio: 0; topInset: 2 * yDU;
				rightRatio: 0; rightInset: -146 * xDU;
				bottomRatio: 0; bottomInset: -70 * yDU);
		startGroup;
		noTabStop.
	mainView addSubpane: addressPane.
	
	new "Button"
		owner: self;
		setName: 'new';
		when: #clicked send: #newAddress to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 2 * xDU;
				topRatio: 0; topInset: 72 * yDU;
				rightRatio: 0; rightInset: -36 * xDU;
				bottomRatio: 0; bottomInset: -88 * yDU);
		contents: 'New';
		startGroup;
		noTabStop;
		font: SysFont.
	mainView addSubpane: new.
	
	inspect "Button"
		owner: self;
		setName: 'inspect';
		when: #clicked send: #inspectAddress to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 38 * xDU;
				topRatio: 0; topInset: 72 * yDU;
				rightRatio: 0; rightInset: -72 * xDU;
				bottomRatio: 0; bottomInset: -88 * yDU);
		contents: 'Inspect';
		startGroup;
		noTabStop;
		font: SysFont.
	mainView addSubpane: inspect! !

!WBPerson methods !
printOn: aStream

    super printOn: aStream.
    aStream cr; tab; nextPutAll: '>'.
    self name printOn: aStream.
    aStream cr; tab; nextPutAll: '>'.
    self address printOn: aStream.
    aStream cr; tab; nextPutAll: '>sex: ',self sex! !

!PersonPane class methods !  
importantEvents

    ^#(#nameChanged: #personChanged: #needsContents)! !

!OkCancelPane methods ! 
ok

    "Callback for the #clicked event in the Button named 'ok'.
     (Generated by WindowBuilder)"

    self triggerEvent: #ok! !

!WBPerson methods !  
triggerNameChangedEvent
    "Private - trigger the #nameChanged: event.
    Remove the #generated tag before modifying this method.
    (Generated by WindowBuilder Pro)"

    "(c) Copyright OSI, 1995. All Rights Reserved."

    #generated.
    self triggerEvent: #nameChanged: with: self name! !

!NamePane methods !
getFirstName: aPane

    "Callback for the #needsContents event in the EntryField named 'firstName'.
     (Generated by WindowBuilder)"

    aPane contents: self name first! !

!AddressPane methods !
contents: aWBAddress

    self address: aWBAddress! !

!DictionaryEditorPane methods !
itemChanging: itemContents
    | current new |
    current := listEditor selectedItem.
    new := itemContents.
    (dictionary includesKey: current) ifTrue: [
        dictionary at: new put: (dictionary at: current).
        dictionary removeKey: current.
   ]! !

!PersonPane methods !  
contents

    ^self person! !

!WBPerson methods !
basicSex: aSymbol
    "Private - set the value of sex to <aSymbol>.
    Remove the #generated tag before modifying this method.
    (Generated by WindowBuilder Pro)"

    "(c) Copyright OSI, 1995. All Rights Reserved."

    #generated.
    sex := aSymbol! !

!WBName methods !
triggerFirstChangedEvent
    "Private - trigger the #firstChanged: event.
    Remove the #generated tag before modifying this method.
    (Generated by WindowBuilder Pro)"

    "(c) Copyright OSI, 1995. All Rights Reserved."

    #generated.
    self triggerEvent: #firstChanged: with: self first! !

!PersonEditorPane class methods !  
wbBasicVersion

	"Private - Answer the WindowBuilder Pro version.
		Generated in: Visual Smalltalk Enterprise 3.1.0 Win32"

	^3.1! !

!PersonPane methods !
sexChanged: sex

    "Callback for the #sexChanged: event in the SexPane named 'sex'.
     (Generated by WindowBuilder)"

    self person sex: sex.
    self triggerEvent: #personChanged: with: person! !

!AddressPane methods !
contents

    ^self address! !

!PersonPaneTester methods !   
getPerson: aPane

    "Callback for the #needsContents event in the PersonPane named 'person'.
     (Generated by WindowBuilder)"

    aPane contents: WBPerson new! !

!PersonPane methods !  
person

    ^person ifNil: [person := WBPerson new]! !

!AddressPane methods !
address: aWBAddress

    address := aWBAddress.
    self updateAll.
    self triggerEvent: #addressChanged: with: self address.! !

!ModelObjectTest methods !  
addSharedValueTo: aModel

	"WARNING!! This method was automatically generated by 
	WindowBuilder. Code you add here which does not conform to 
	the WindowBuilder API will probably be lost the next time 
	you save your layout definition."

	| sharedValue1 xDU yDU |
	
	#generated.
	xDU := (SysFont width + 1 roundTo: 2) / 4.
	yDU := SysFont height / 8.
	
	(sharedValue1 := SharedValue new)
		definedIn: #addSharedValueTo:;
		owner: aModel;
		setName: 'sharedValue'.
	^sharedValue1! !

!WBAddress class methods ! 
constructEventsTriggered
    "Private - answer all the events which can be triggered by instances of the receiver.
    Remove the #generated tag before modifying this method.
    (Generated by WindowBuilder Pro)"

    "(c) Copyright OSI, 1995. All Rights Reserved."

    #generated.
    ^super constructEventsTriggered
        add: #street1Changed:;
        add: #street2Changed:;
        add: #cityChanged:;
        add: #stateChanged:;
        add: #zipChanged:;
        yourself! !

!WBAddress methods !
basicStreet2: aString
    "Private - set the value of street2 to <aString>.
    Remove the #generated tag before modifying this method.
    (Generated by WindowBuilder Pro)"

    "(c) Copyright OSI, 1995. All Rights Reserved."

    #generated.
    street2 := aString! !

!DictionaryEditorPane methods !  
selectItem: aString

    listEditor selectItem: aString! !

!NamePane class methods ! 
wbPartEventItems

	"WARNING!! This method was automatically generated by 
	WindowBuilder. Code you add here which does not conform to 
	the WindowBuilder API will probably be lost the next time 
	you save your wb-parts definition."

	#generated.
	^#(#nameChanged: #rightClicked #tabbed)! !

!WBName class methods !  
example

	^self new
		first: 'Eric';
		middle: 'L.';
		last: 'Clayberg';
		yourself! !

!AddressPaneTester methods !  
getAddress: aPane

    "Callback for the #needsContents event in the AddressPane named 'addressPane'.
     (Generated by WindowBuilder)"

    aPane contents: self address! !

!ListEditorPane methods !   
disable

    (self paneNamed: 'insert') disable.
    (self paneNamed: 'change') disable.
    (self paneNamed: 'delete') disable.
    item setFocus.! !

!WBAddress methods !   
triggerStateChangedEvent
    "Private - trigger the #stateChanged: event.
    Remove the #generated tag before modifying this method.
    (Generated by WindowBuilder Pro)"

    "(c) Copyright OSI, 1995. All Rights Reserved."

    #generated.
    self triggerEvent: #stateChanged: with: self state! !

!WBName methods !  
basicLast: aString
    "Private - set the value of last to <aString>.
    Remove the #generated tag before modifying this method.
    (Generated by WindowBuilder Pro)"

    "(c) Copyright OSI, 1995. All Rights Reserved."

    #generated.
    last := aString! !

!NamePane methods !   
getLastName: aPane

    "Callback for the #needsContents event in the EntryField named 'lastName'.
     (Generated by WindowBuilder)"

    aPane contents: self name last! !

!DictionaryEditorPane methods !  
select: selectedItem

    detail contents: (dictionary at: selectedItem) deepCopy.
    self event: #select.! !

!AddressPane methods !   
getZip: aPane

    "Callback for the #needsContents event in the EntryField named 'zip'.
     (Generated by WindowBuilder)"

    aPane contents: self address zip! !

!AddressPaneTester methods ! 
openOn: aWBAddress

    self address: aWBAddress.
    self open! !

!WBPerson class methods !
example

	^self new
		address: WBAddress example;
		name: WBName example;
		sex: #male;
		yourself! !

!OkCancelPane methods !
cancel

    "Callback for the #clicked event in the Button named 'cancel'.
     (Generated by WindowBuilder)"

    self triggerEvent: #cancel! !

!AddressPane methods !   
getStreet2: aPane

    "Callback for the #needsContents event in the EntryField named 'street2'.
     (Generated by WindowBuilder)"

    aPane contents: self address street2! !

!WBPerson methods !  
name
    "Answer the value of name.
    Remove the #generated tag before modifying this method.
    (Generated by WindowBuilder Pro)"

    "(c) Copyright OSI, 1995. All Rights Reserved."

    #generated.
    ^name ifNil: [name := WBName new]! !

!DictionaryEditorPane methods !   
accept

    dictionary at: listEditor selectedItem put: detail contents! !

!ModelObjectTest methods !
updateTime
    "Callback for the #ticked event in timer [Timer]"
    "(Generated by WindowBuilder Pro)"

    (self paneNamed: 'f3') contents: Time now asString! !

!PersonPaneTester methods ! 
newPerson

    "Callback for the #clicked event in the Button named 'new'.
     (Generated by WindowBuilder)"

    (self paneNamed: 'person') contents: WBPerson new! !

!AddressPane methods !
addSubpanes

	"WARNING!! This method was automatically generated by 
	WindowBuilder. Code you add here which does not conform to 
	the WindowBuilder API will probably be lost the next time 
	you save your layout definition."

	| addressGroup city cityLabel state stateLabel street1 
	street2 streetLabel xDU yDU zip zipLabel |
	#generated.
	xDU := (SysFont width + 1 roundTo: 2) / 4.
	yDU := SysFont height / 8.
	
		"Temporary Variables"
	addressGroup := GroupBox new.
	city := WBEntryField new.
	cityLabel := StaticText new.
	state := WBComboBox new.
	stateLabel := StaticText new.
	street1 := WBEntryField new.
	street2 := WBEntryField new.
	streetLabel := StaticText new.
	zip := WBEntryField new.
	zipLabel := StaticText new.
	
	self
		framingBlock: 
			(LayoutFrame new
				leftRatio: 1/2; leftInset: -72 * xDU;
				topRatio: 1/2; topInset: -35 * yDU;
				rightRatio: 1/2; rightInset: -72 * xDU;
				bottomRatio: 1/2; bottomInset: -35 * yDU);
		backColor: Color gray.
	
	street1 "WBEntryField"
		owner: self;
		setName: 'street1';
		when: #needsContents send: #getStreet1: to: self withArgument: street1;
		when: #textChanged: send: #setStreet1: to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 59/2 * xDU;
				topRatio: 0; topInset: 12 * yDU;
				rightRatio: 1; rightInset: 11/2 * xDU;
				bottomRatio: 0; bottomInset: -24 * yDU);
		startGroup;
		font: SysFont.
	self addSubpane: street1.
	
	street2 "WBEntryField"
		owner: self;
		setName: 'street2';
		when: #needsContents send: #getStreet2: to: self withArgument: street2;
		when: #textChanged: send: #setStreet2: to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 59/2 * xDU;
				topRatio: 0; topInset: 26 * yDU;
				rightRatio: 1; rightInset: 11/2 * xDU;
				bottomRatio: 0; bottomInset: -38 * yDU);
		startGroup;
		font: SysFont.
	self addSubpane: street2.
	
	city "WBEntryField"
		owner: self;
		setName: 'city';
		when: #needsContents send: #getCity: to: self withArgument: city;
		when: #textChanged: send: #setCity: to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 59/2 * xDU;
				topRatio: 0; topInset: 40 * yDU;
				rightRatio: 1; rightInset: 115/2 * xDU;
				bottomRatio: 0; bottomInset: -52 * yDU);
		startGroup;
		font: SysFont.
	self addSubpane: city.
	
	state "WBComboBox"
		owner: self;
		setName: 'state';
		when: #clicked: send: #setState: to: self;
		when: #needsContents send: #getState: to: self withArgument: state;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 1; leftInset: -33 * xDU;
				topRatio: 0; topInset: 40 * yDU;
				rightRatio: 1; rightInset: 5 * xDU;
				bottomRatio: 0; bottomInset: -99 * yDU);
		dropDownList;
		startGroup;
		font: SysFont;
		contents: #( 'CA' 'DC' 'MA' 'MD' 'NJ' 'NY' 'OR' 'TX' 'VA' 'WA' ).
	self addSubpane: state.
	
	zip "WBEntryField"
		owner: self;
		setName: 'zip';
		when: #needsContents send: #getZip: to: self withArgument: zip;
		when: #textChanged: send: #setZip: to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 59/2 * xDU;
				topRatio: 0; topInset: 54 * yDU;
				rightRatio: 1; rightInset: 115/2 * xDU;
				bottomRatio: 0; bottomInset: -66 * yDU);
		startGroup;
		font: SysFont.
	self addSubpane: zip.
	
	streetLabel "StaticText"
		owner: self;
		setName: 'streetLabel';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 4 * xDU;
				topRatio: 0; topInset: 14 * yDU;
				rightRatio: 0; rightInset: -28 * xDU;
				bottomRatio: 0; bottomInset: -22 * yDU);
		rightJustified;
		contents: 'Street:';
		startGroup;
		noTabStop;
		font: SysFont.
	self addSubpane: streetLabel.
	
	cityLabel "StaticText"
		owner: self;
		setName: 'cityLabel';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 4 * xDU;
				topRatio: 0; topInset: 42 * yDU;
				rightRatio: 0; rightInset: -28 * xDU;
				bottomRatio: 0; bottomInset: -50 * yDU);
		rightJustified;
		contents: 'City:';
		startGroup;
		noTabStop;
		font: SysFont.
	self addSubpane: cityLabel.
	
	stateLabel "StaticText"
		owner: self;
		setName: 'stateLabel';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 1; leftInset: -55 * xDU;
				topRatio: 0; topInset: 42 * yDU;
				rightRatio: 1; rightInset: 35 * xDU;
				bottomRatio: 0; bottomInset: -50 * yDU);
		rightJustified;
		contents: 'State:';
		startGroup;
		noTabStop;
		font: SysFont.
	self addSubpane: stateLabel.
	
	zipLabel "StaticText"
		owner: self;
		setName: 'zipLabel';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 4 * xDU;
				topRatio: 0; topInset: 56 * yDU;
				rightRatio: 0; rightInset: -28 * xDU;
				bottomRatio: 0; bottomInset: -64 * yDU);
		rightJustified;
		contents: 'Zip:';
		startGroup;
		noTabStop;
		font: SysFont.
	self addSubpane: zipLabel.
	
	addressGroup "GroupBox"
		owner: self;
		setName: 'addressGroup';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 0 * xDU;
				topRatio: 0; topInset: 2 * yDU;
				rightRatio: 1; rightInset: 0 * xDU;
				bottomRatio: 1; bottomInset: 0 * yDU);
		contents: 'Address';
		startGroup;
		noTabStop;
		font: SysFont.
	self addSubpane: addressGroup! !

!DictionaryEditorPane class methods ! 
constructEventsTriggered
        "Private - answer the set of events that instances of the
        receiver can trigger."
    ^super constructEventsTriggered
        add: #listChanged:;
        add: #clicked:;
        yourself! !

!NamePane methods !
updateAll

    #(#first #middle #last) do: [:item |
        (self paneNamed: item asString) contents:
            (self name perform: item)].! !

!AddressEditorPane methods !  
addSubpanes

	"WARNING!! This method was automatically generated by 
	WindowBuilder. Code you add here which does not conform to 
	the WindowBuilder API will probably be lost the next time 
	you save your layout definition."

	| accept revert xDU yDU |
	#generated.
	xDU := (SysFont width + 1 roundTo: 2) / 4.
	yDU := SysFont height / 8.
	
		"Instance Variables"
	detail := AddressPane new.
	listEditor := ListEditorPane new.
	
		"Temporary Variables"
	accept := Button new.
	revert := Button new.
	
	self
		framingBlock: 
			(LayoutFrame new
				leftRatio: 1/2; leftInset: -95 * xDU;
				topRatio: 1/2; topInset: -78 * yDU;
				rightRatio: 1/2; rightInset: -95 * xDU;
				bottomRatio: 1/2; bottomInset: -78 * yDU);
		backColor: Color gray.
	
	listEditor "ListEditorPane"
		owner: self;
		setName: 'listEditor';
		when: #clicked: send: #select: to: self;
		when: #itemChanging: send: #itemChanging: to: self;
		when: #listChanged: send: #listChanged: to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 0 * xDU;
				topRatio: 0; topInset: 0 * yDU;
				rightRatio: 1; rightInset: 1 * xDU;
				bottomRatio: 86/155; bottomInset: 0 * yDU);
		startGroup;
		backColor: Color inactiveTitleBar.
	self addSubpane: listEditor.
	
	detail "AddressPane"
		owner: self;
		setName: 'detail';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 2 * xDU;
				topRatio: 86/155; topInset: 0 * yDU;
				rightRatio: 1; rightInset: 45 * xDU;
				bottomRatio: 1; bottomInset: 1 * yDU);
		startGroup;
		backColor: Color inactiveTitleBar.
	self addSubpane: detail.
	
	accept "Button"
		owner: self;
		setName: 'accept';
		when: #clicked send: #accept to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 1; leftInset: -42 * xDU;
				topRatio: 1; topInset: -32 * yDU;
				rightRatio: 1; rightInset: 2 * xDU;
				bottomRatio: 1; bottomInset: 18 * yDU);
		contents: 'Accept';
		startGroup;
		font: SysFont.
	self addSubpane: accept.
	
	revert "Button"
		owner: self;
		setName: 'revert';
		when: #clicked send: #revert to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 1; leftInset: -42 * xDU;
				topRatio: 1; topInset: -16 * yDU;
				rightRatio: 1; rightInset: 2 * xDU;
				bottomRatio: 1; bottomInset: 2 * yDU);
		contents: 'Revert';
		startGroup;
		font: SysFont.
	self addSubpane: revert! !

!WBName methods ! 
first: aString
    "Set the value of first to <aString>.
    Remove the #generated tag before modifying this method.
    (Generated by WindowBuilder Pro)"

    "(c) Copyright OSI, 1995. All Rights Reserved."

    #generated.
    first = aString
        ifFalse: [
            self
                basicFirst: aString;
                changed;
                triggerFirstChangedEvent]! !

!WBName class methods !   
constructEventsTriggered
    "Private - answer all the events which can be triggered by instances of the receiver.
    Remove the #generated tag before modifying this method.
    (Generated by WindowBuilder Pro)"

    "(c) Copyright OSI, 1995. All Rights Reserved."

    #generated.
    ^super constructEventsTriggered
        add: #firstChanged:;
        add: #middleChanged:;
        add: #lastChanged:;
        yourself! !

!NamePane class methods !
importantEvents

    ^#(#nameChanged: #needsContents)! !

!AddressPane methods !  
updateAll

    #(#street1 #street2 #city #zip) do: [:item |
        (self paneNamed: item asString) contents:
            (self address perform: item)].
    (self paneNamed: 'state') selection: self address state! !

!PersonPane methods ! 
getAddress: aPane

    "Callback for the #needsContents event in the AddressPane named 'address'.
     (Generated by WindowBuilder)"

    aPane contents: self person address! !

!ListEditorPane methods !
selection: anObject

    listbox selection: anObject! !

!AddressPaneTester class methods !   
wbBasicVersion

	"Private - Answer the WindowBuilder Pro version.
		Generated in: Visual Smalltalk Enterprise 3.1.0 Win32"

	^3.1! !

!ModelObjectTest methods !   
createViews

	"WARNING!! This method was automatically generated by 
	WindowBuilder. Code you add here which does not conform to 
	the WindowBuilder API will probably be lost the next time 
	you save your layout definition."

	| closeButton f1 f2 f3 mainView sharedValue1 startButton 
	stopButton timer1 xDU yDU |
	
	#generated.
	xDU := (SysFont width + 1 roundTo: 2) / 4.
	yDU := SysFont height / 8.
	mainView := self topPaneClass new.
	
		"Temporary Variables"
	closeButton := Button new.
	f1 := EntryField new.
	f2 := EntryField new.
	f3 := EntryField new.
	startButton := Button new.
	stopButton := Button new.
	timer1 := Timer new.
	
		"Call Outs"
	sharedValue1 := self addSharedValueTo: self.
	
	mainView
		owner: self;
		setName: 'mainView';
		when: #aboutToClose send: #stop to: timer1;
		when: #opened send: #start to: timer1;
		when: #opened send: #disable to: startButton;
		labelWithoutPrefix: 'Model Object Test';
		noSmalltalkMenuBar;
		backColor: Color gray;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 1/2; leftInset: -67 * xDU;
				topRatio: 1/2; topInset: -99/2 * yDU;
				rightRatio: 1/2; rightInset: -67 * xDU;
				bottomRatio: 1/2; bottomInset: -81/2 * yDU).
	self addView: mainView.
	
	sharedValue1
		when: #changed: send: #contents: to: f2;
		when: #changed: send: #contents: to: f3.
	
	timer1
		owner: self;
		setName: 'timer';
		when: #ticked send: #updateTime to: self;
		period: 1000.
	
	f1 "EntryField"
		owner: self;
		setName: 'f1';
		when: #textChanged: send: #setValue: to: sharedValue1;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 4/65; leftInset: 0 * xDU;
				topRatio: 0; topInset: 6 * yDU;
				rightRatio: 61/65; rightInset: 0 * xDU;
				bottomRatio: 0; bottomInset: -18 * yDU);
		startGroup;
		font: SysFont.
	mainView
		addSubpane: f1;
		subPaneWithFocus: f1.
	
	f2 "EntryField"
		owner: self;
		setName: 'f2';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 4/65; leftInset: 0 * xDU;
				topRatio: 0; topInset: 22 * yDU;
				rightRatio: 61/65; rightInset: 0 * xDU;
				bottomRatio: 0; bottomInset: -34 * yDU);
		startGroup;
		font: SysFont.
	mainView addSubpane: f2.
	
	f3 "EntryField"
		owner: self;
		setName: 'f3';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 4/65; leftInset: 0 * xDU;
				topRatio: 0; topInset: 38 * yDU;
				rightRatio: 61/65; rightInset: 0 * xDU;
				bottomRatio: 0; bottomInset: -50 * yDU);
		startGroup;
		font: SysFont.
	mainView addSubpane: f3.
	
	closeButton "Button"
		owner: self;
		setName: 'closeButton';
		when: #clicked send: #close to: self;
		when: #clicked send: #stop to: timer1;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 8/13; leftInset: 0 * xDU;
				topRatio: 1; topInset: -41/2 * yDU;
				rightRatio: 61/65; rightInset: 0 * xDU;
				bottomRatio: 1; bottomInset: 9/2 * yDU);
		contents: 'Close';
		startGroup;
		font: SysFont.
	mainView addSubpane: closeButton.
	
	startButton "Button"
		owner: self;
		setName: 'startButton';
		when: #clicked send: #start to: timer1;
		when: #clicked send: #disable to: startButton;
		when: #clicked send: #enable to: stopButton;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 4/65; leftInset: 0 * xDU;
				topRatio: 1; topInset: -41/2 * yDU;
				rightRatio: 18/65; rightInset: 0 * xDU;
				bottomRatio: 1; bottomInset: 9/2 * yDU);
		contents: 'Start';
		startGroup;
		font: SysFont.
	mainView addSubpane: startButton.
	
	stopButton "Button"
		owner: self;
		setName: 'stopButton';
		when: #clicked send: #stop to: timer1;
		when: #clicked send: #disable to: stopButton;
		when: #clicked send: #enable to: startButton;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 21/65; leftInset: 0 * xDU;
				topRatio: 1; topInset: -41/2 * yDU;
				rightRatio: 7/13; rightInset: 0 * xDU;
				bottomRatio: 1; bottomInset: 9/2 * yDU);
		contents: 'Stop';
		startGroup;
		font: SysFont.
	mainView addSubpane: stopButton! !

!DictionaryEditorPane class methods ! 
importantEvents

    ^#(#clicked: #listChanged: #needsContents)! !

!WBName class methods !   
wbBasicVersion
    "Private - Answer the WindowBuilder Pro version.
        Generated in: Visual Smalltalk Enterprise 3.1.0 Win32"

    "(c) Copyright OSI, 1995. All Rights Reserved."

    ^3.1! !

!NamePane class methods !   
constructEventsTriggered
        "Private - answer the set of events that instances of the
        receiver can trigger."
    ^super constructEventsTriggered
        add: #nameChanged:;
        yourself! !

!ListEditorPane methods !   
selection

    ^listbox selection! !

!DictionaryEditorPane class methods !   
wbBasicVersion

	"Private - Answer the WindowBuilder Pro version.
		Generated in: Visual Smalltalk Enterprise 3.1.0 Win32"

	^3.1! !

!WBName methods !
middle: aString
    "Set the value of middle to <aString>.
    Remove the #generated tag before modifying this method.
    (Generated by WindowBuilder Pro)"

    "(c) Copyright OSI, 1995. All Rights Reserved."

    #generated.
    middle = aString
        ifFalse: [
            self
                basicMiddle: aString;
                changed;
                triggerMiddleChangedEvent]! !

!NamePane methods !  
setMiddleInitial: aString

    "Callback for the #textChanged: event in the EntryField named 'middleInitial'.
     (Generated by WindowBuilder)"

    self name middle: aString.
    self triggerEvent: #nameChanged: with: self name.! !

!ListEditorPane methods !  
select: selectedItem

    item contents: selectedItem.
    self enable.
    self triggerEvent: #clicked: with: selectedItem.! !

!NamePane class methods !  
wbConstructPropertyManager
    "Construct the WindowBuilder property manager
        based on the Digitalk property manager."

    #addedByOSI.
    ^super wbConstructPropertyManager
        wbAddEvent: (
            (Smalltalk at: #WBEventDescription) new
                event: #nameChanged: ;
                argumentNames: #('anObject'));
        yourself! !

!ListEditorPane methods !  
selectedItem

    ^listbox selectedItem! !

!PersonPane methods ! 
addressChanged: address

    "Callback for the #addressChanged event in the AddressPane named 'address'.
     (Generated by WindowBuilder)"

    self triggerEvent: #personChanged: with: self person! !
   
UndefinedObject removeSelector: #osiIgnoredInitializerSource!
   
"======== Initializers"!