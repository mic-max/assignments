"3.0.0.6"
!  

Object subclass: #Person
  instanceVariableNames: 
    ' firstName lastName company title '
  classVariableNames: ''
  poolDictionaries: ''!

ViewManager subclass: #PersonEditor
  instanceVariableNames: 
    ' currentPerson changed '
  classVariableNames: 
    ' PersonList '
  poolDictionaries: 
    ' ColorConstants OperatingSystemConstants '!   

WindowDialog subclass: #SelectPersonDialog
  instanceVariableNames: 
    ' selectedPerson '
  classVariableNames: ''
  poolDictionaries: 
    ' ColorConstants OperatingSystemConstants '!

!SelectPersonDialog methods !
selectedPerson

    "Return the selected person from the dialog"

    ^selectedPerson! !

!SelectPersonDialog methods ! 
cancel

    "Callback for the #clicked event in an unnamed Button (contents is 'Cancel').
     (Generated by WindowBuilder)"

    selectedPerson := nil.
    self close.! !

!Person class methods !  
new

    ^super new initialize! !

!PersonEditor methods !
menuRevert

    "Callback for the menu item titled 'Revert'.
     (Generated by WindowBuilder)"

    "If nothing has changed, there is no need to revert"
    changed ifFalse: [^self].

    (MessageBox confirm: 'Are you sure you want to revert "', self currentName, '" to their orginal data?')
        ifTrue: [self updateFields]! !

!Person methods ! 
title: aString

    title := aString! !

!PersonEditor methods !  
createMenus: aPane

	"WARNING!! This method was automatically generated by 
	WindowBuilder. Code you add here which does not conform to 
	the WindowBuilder API will probably be lost the next time 
	you save your layout definition."

	#generated.
	aPane menuWindow
	    yourself;
	    addMenu: (
	        Menu new
	            title: '&File';
	            owner: self;
	            appendItem: '&New	Ctrl+N' selector: #menuNew acceleratorString: 'Ctrl+N';
	            appendItem: '&Open	Ctrl+O' selector: #menuOpen acceleratorString: 'Ctrl+O';
	            appendSeparator;
	            appendItem: '&Save	Ctrl+S' selector: #menuSave acceleratorString: 'Ctrl+S';
	            appendItem: '&Revert	Ctrl+R' selector: #menuRevert acceleratorString: 'Ctrl+R';
	            appendSeparator;
	            appendItem: '&Delete	Ctrl+D' selector: #menuDelete acceleratorString: 'Ctrl+D';
	            appendSeparator;
	            appendItem: 'E&xit	Alt+F4' selector: #menuExit acceleratorString: 'Alt+35'
	    )! !

!Person methods !
printOn: aStream

    aStream nextPutAll: self name! !

!Person methods ! 
firstName

    ^firstName! !

!PersonEditor methods ! 
menuSave

    "Callback for the menu item titled 'Save'.
     (Generated by WindowBuilder)"

    "Update the person's data and set the changed flag to false"

    self updatePerson.
    changed := false.

    "If the person is not in the list (e.g., a new person),
     add them to the list"

    (self class personList includes: currentPerson)
        ifFalse: [self class personList add: currentPerson].! !

!PersonEditor methods ! 
menuOpen

    "Callback for the menu item titled 'Open'.
     (Generated by WindowBuilder)"

    | selectedPerson |
    self saveChanges ifFalse: [^self].

    "Select a person via the selection dialog. If a person is selected
     load that person into the editor"

    selectedPerson := SelectPersonDialog new open selectedPerson.
    selectedPerson isNil
        ifFalse: [
            currentPerson := selectedPerson.
            self updateFields].! !

!PersonEditor methods !
updateFields

    "Update the fields with the current person's data.
     Then set the changed flag to false"

    (self paneNamed: 'firstName') setContents: currentPerson firstName.
    (self paneNamed: 'lastName') setContents: currentPerson lastName.
    (self paneNamed: 'title') setContents: currentPerson title.
    (self paneNamed: 'company') setContents: currentPerson company.
    changed := false.! !

!PersonEditor methods ! 
textChanged: aString

    "Callback for the #textChanged event in the EntryField named 'firstName'.
     (Generated by WindowBuilder)"

    "The user has typed something. This will trigger a 'Save Changes?'
     dialog when the user attempts to load a different person"

    changed := true! !

!Person methods !
title

    ^title! !

!Person methods !   
initialize

    firstName := ''.
    lastName := ''.
    company := ''.
    title := ''.! !

!Person methods ! 
company

    ^company! !

!PersonEditor methods ! 
updatePerson

    "Update the current person with the data from the fields"

    currentPerson
        firstName: (self paneNamed: 'firstName') contents;
        lastName: (self paneNamed: 'lastName') contents;
        title: (self paneNamed: 'title') contents;
        company: (self paneNamed: 'company') contents.! !

!Person methods !  
firstName: aString

    firstName := aString! !

!PersonEditor methods !  
createViews

	"WARNING!! This method was automatically generated by 
	WindowBuilder. Code you add here which does not conform to 
	the WindowBuilder API will probably be lost the next time 
	you save your layout definition."

	| company companyLabel employmentGroup firstLabel firstName 
	lastLabel lastName mainView nameGroup next previous title 
	titlelable xDU yDU |
	
	#generated.
	xDU := (SysFont width + 1 roundTo: 2) / 4.
	yDU := SysFont height / 8.
	mainView := self topPaneClass new.
	
		"Temporary Variables"
	company := WBEntryField new.
	companyLabel := StaticText new.
	employmentGroup := GroupBox new.
	firstLabel := StaticText new.
	firstName := WBEntryField new.
	lastLabel := StaticText new.
	lastName := WBEntryField new.
	nameGroup := GroupBox new.
	next := Button new.
	previous := Button new.
	title := WBEntryField new.
	titlelable := StaticText new.
	
	mainView
		owner: self;
		setName: 'mainView';
		when: #aboutToClose send: #aboutToClose to: self;
		labelWithoutPrefix: 'Person Editor';
		noSmalltalkMenuBar;
		backColor: Color gray;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 1/2; leftInset: -96 * xDU;
				topRatio: 1/2; topInset: -64 * yDU;
				rightRatio: 1/2; rightInset: -96 * xDU;
				bottomRatio: 1/2; bottomInset: -46 * yDU).
	self addView: mainView.
	
	firstName "WBEntryField"
		owner: self;
		setName: 'firstName';
		when: #textChanged: send: #textChanged: to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 2/47; leftInset: 0 * xDU;
				topRatio: 0; topInset: 24 * yDU;
				rightRatio: 37/94; rightInset: 0 * xDU;
				bottomRatio: 0; bottomInset: -36 * yDU);
		startGroup;
		font: SysFont.
	mainView
		addSubpane: firstName;
		subPaneWithFocus: firstName.
	
	lastName "WBEntryField"
		owner: self;
		setName: 'lastName';
		when: #textChanged: send: #textChanged: to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 39/94; leftInset: 0 * xDU;
				topRatio: 0; topInset: 24 * yDU;
				rightRatio: 45/47; rightInset: 0 * xDU;
				bottomRatio: 0; bottomInset: -36 * yDU);
		startGroup;
		font: SysFont.
	mainView addSubpane: lastName.
	
	title "WBEntryField"
		owner: self;
		setName: 'title';
		when: #textChanged: send: #textChanged: to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 11/47; leftInset: 0 * xDU;
				topRatio: 0; topInset: 54 * yDU;
				rightRatio: 34/47; rightInset: 0 * xDU;
				bottomRatio: 0; bottomInset: -66 * yDU);
		startGroup;
		font: SysFont.
	mainView addSubpane: title.
	
	company "WBEntryField"
		owner: self;
		setName: 'company';
		when: #textChanged: send: #textChanged: to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 11/47; leftInset: 0 * xDU;
				topRatio: 0; topInset: 68 * yDU;
				rightRatio: 34/47; rightInset: 0 * xDU;
				bottomRatio: 0; bottomInset: -80 * yDU);
		startGroup;
		font: SysFont.
	mainView addSubpane: company.
	
	next "Button"
		owner: self;
		setName: 'next';
		when: #clicked send: #next to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 36/47; leftInset: 0 * xDU;
				topRatio: 0; topInset: 46 * yDU;
				rightRatio: 46/47; rightInset: 0 * xDU;
				bottomRatio: 0; bottomInset: -64 * yDU);
		contents: '&Next';
		startGroup;
		font: SysFont.
	mainView addSubpane: next.
	
	previous "Button"
		owner: self;
		setName: 'previous';
		when: #clicked send: #previous to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 36/47; leftInset: 0 * xDU;
				topRatio: 0; topInset: 66 * yDU;
				rightRatio: 46/47; rightInset: 0 * xDU;
				bottomRatio: 0; bottomInset: -84 * yDU);
		contents: '&Previous';
		startGroup;
		font: SysFont.
	mainView addSubpane: previous.
	
	firstLabel "StaticText"
		owner: self;
		setName: 'firstLabel';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 2/47; leftInset: 0 * xDU;
				topRatio: 0; topInset: 16 * yDU;
				rightRatio: 37/94; rightInset: 0 * xDU;
				bottomRatio: 0; bottomInset: -24 * yDU);
		contents: 'First';
		startGroup;
		noTabStop;
		font: SysFont.
	mainView addSubpane: firstLabel.
	
	lastLabel "StaticText"
		owner: self;
		setName: 'lastLabel';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 39/94; leftInset: 0 * xDU;
				topRatio: 0; topInset: 16 * yDU;
				rightRatio: 45/47; rightInset: 0 * xDU;
				bottomRatio: 0; bottomInset: -24 * yDU);
		contents: 'Last';
		startGroup;
		noTabStop;
		font: SysFont.
	mainView addSubpane: lastLabel.
	
	titlelable "StaticText"
		owner: self;
		setName: 'titlelable';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 3/94; leftInset: 0 * xDU;
				topRatio: 0; topInset: 56 * yDU;
				rightRatio: 21/94; rightInset: 0 * xDU;
				bottomRatio: 0; bottomInset: -64 * yDU);
		rightJustified;
		contents: 'Title:';
		startGroup;
		noTabStop;
		font: SysFont.
	mainView addSubpane: titlelable.
	
	companyLabel "StaticText"
		owner: self;
		setName: 'companyLabel';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 3/94; leftInset: 0 * xDU;
				topRatio: 0; topInset: 70 * yDU;
				rightRatio: 21/94; rightInset: 0 * xDU;
				bottomRatio: 0; bottomInset: -78 * yDU);
		rightJustified;
		contents: 'Company:';
		startGroup;
		noTabStop;
		font: SysFont.
	mainView addSubpane: companyLabel.
	
	employmentGroup "GroupBox"
		owner: self;
		setName: 'employmentGroup';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 1/47; leftInset: 0 * xDU;
				topRatio: 0; topInset: 42 * yDU;
				rightRatio: 35/47; rightInset: 0 * xDU;
				bottomRatio: 0; bottomInset: -84 * yDU);
		contents: 'Employment';
		startGroup;
		noTabStop;
		font: SysFont.
	mainView addSubpane: employmentGroup.
	
	nameGroup "GroupBox"
		owner: self;
		setName: 'nameGroup';
		framingBlock: 
			(LayoutFrame new
				leftRatio: 1/47; leftInset: 0 * xDU;
				topRatio: 0; topInset: 4 * yDU;
				rightRatio: 46/47; rightInset: 0 * xDU;
				bottomRatio: 0; bottomInset: -40 * yDU);
		contents: 'Name';
		startGroup;
		noTabStop;
		font: SysFont.
	mainView addSubpane: nameGroup.
	
	self createMenus: mainView! !

!PersonEditor methods !   
previous

    "Callback for the #clicked event in the Button named 'previous'.
     (Generated by WindowBuilder)"

    | index |
    self saveChanges ifFalse: [^self].

    "Find the previous person in the list based on the index of
     the current person. Make sure that the list wraps correctly"

    index := self class personList indexOf: currentPerson.
    index <= 1 ifTrue: [index := self class personList size + 1].
    currentPerson := self class personList at: index - 1.
    self updateFields.! !

!PersonEditor methods ! 
menuExit

    "Callback for the menu item titled 'Exit'.
     (Generated by WindowBuilder)"

    self saveChanges ifFalse: [^self].
    self close! !

!PersonEditor methods !
menuNew

    "Callback for the menu item titled 'New'.
     (Generated by WindowBuilder)"

    self saveChanges ifFalse: [^self].
    currentPerson := Person new.
    self updateFields.! !

!PersonEditor methods !
aboutToClose

    "Callback for the #aboutToClose event in the TopPane 'mainView'.
     (Generated by WindowBuilder)"

    "To abort t eclose operation, use 'self mainView abortClose'."

    self saveChanges ifFalse: [^self mainView abortClose].

    "For the close operation to proceed normally, just
      return normally."

    ^self! !

!SelectPersonDialog methods !  
createViews

	"WARNING!! This method was automatically generated by 
	WindowBuilder. Code you add here which does not conform to 
	the WindowBuilder API will probably be lost the next time 
	you save your layout definition."

	| cancel mainView personListBox select xDU yDU |
	
	#generated.
	xDU := (SysFont width + 1 roundTo: 2) / (SysFont width roundTo: 2).
	yDU := 1.
	mainView := self topPaneClass new.
	
		"Temporary Variables"
	cancel := Button new.
	personListBox := ListBox new.
	select := Button new.
	
	mainView
		owner: self;
		setName: 'mainView';
		alignRelativeToScreen;
		addModalBorderStyle;
		labelWithoutPrefix: 'Select Person';
		noSmalltalkMenuBar;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 1/2 / ((SysFont width roundTo: 2) / 4);
				leftInset: -71 * xDU;
				topRatio: 1/2 / (SysFont height / 8);
				topInset: -54 * yDU;
				rightRatio: 1/2 / ((SysFont width roundTo: 2) / 4);
				rightInset: -71 * xDU;
				bottomRatio: 1/2 / (SysFont height / 8);
				bottomInset: -54 * yDU).
	self addView: mainView.
	
	personListBox "ListBox"
		owner: self;
		setName: 'personListBox';
		when: #doubleClicked: send: #select: to: self;
		when: #needsContents send: #loadList: to: self withArgument: personListBox;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 4 * xDU;
				topRatio: 0; topInset: 4 * yDU;
				rightRatio: 0; rightInset: -138 * xDU;
				bottomRatio: 0; bottomInset: -84 * yDU);
		startGroup;
		font: SysFont.
	mainView
		addSubpane: personListBox;
		subPaneWithFocus: personListBox.
	
	select "Button"
		owner: self;
		setName: 'select';
		when: #clicked send: #select: to: self withArgument: select;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 4 * xDU;
				topRatio: 0; topInset: 88 * yDU;
				rightRatio: 0; rightInset: -34 * xDU;
				bottomRatio: 0; bottomInset: -104 * yDU);
		defaultPushButton;
		contents: '&Select';
		startGroup;
		font: SysFont.
	mainView addSubpane: select.
	
	cancel "Button"
		owner: self;
		setName: 'cancel';
		when: #clicked send: #cancel to: self;
		framingBlock: 
			(LayoutFrame new
				leftRatio: 0; leftInset: 38 * xDU;
				topRatio: 0; topInset: 88 * yDU;
				rightRatio: 0; rightInset: -70 * xDU;
				bottomRatio: 0; bottomInset: -104 * yDU);
		cancelPushButton;
		contents: 'Cancel';
		startGroup;
		font: SysFont.
	mainView addSubpane: cancel! !

!PersonEditor class methods !   
personList

    "Return the list of people"

    PersonList isNil ifTrue: [self initPersonList].
    ^PersonList! !

!PersonEditor methods !   
menuDelete

    "Callback for the menu item titled 'Delete'.
     (Generated by WindowBuilder)"

    (MessageBox confirm: 'Are you sure you want to delete "', self currentName, '"?')
        ifTrue: [
            "Remove the current person and load a new empty person in the editor"
            self class personList remove: currentPerson ifAbsent: [nil].
            changed := false.
            self menuNew]! !

!Person methods ! 
company: aString

    company := aString! !

!PersonEditor methods !  
saveChanges

    "If the current person's data has changed, ask whether the user
     would like to save the data. Return false if the user requests to
     cancel, true otherwise. Any operation that will load a new person
     in the editor should call this first."

    | answer |

    "If nothing has changed, return immediately"
    changed ifFalse: [^true].

    "Ask the question"
    answer := MessageBox
        threeStateNotify: 'Save Changes?'
        withText: 'Do you want to save changes to "', self currentName, '"?'.

    "If the user selected 'Cancel', return false"
    answer isNil ifTrue: [^false].

    "If the user selected 'Yes', do the save"
    answer ifTrue: [self menuSave].

    ^true! !

!PersonEditor methods !  
next

    "Callback for the #clicked event in the Button named 'next'.
     (Generated by WindowBuilder)"

    | index |
    self saveChanges ifFalse: [^self].

    "Find the next person in the list based on the index of
     the current person. Make sure that the list wraps correctly"

    index := self class personList indexOf: currentPerson.
    index == self class personList size ifTrue: [index := 0].
    currentPerson := self class personList at: index + 1.
    self updateFields.! !

!PersonEditor methods ! 
initWindow

    "Initialize the window to be initially unchanged with
     a new empty person to be edited"

    changed := false.
    self menuNew.
    self mainView children do: [:child |
        child font: SysFont].! !

!SelectPersonDialog methods !   
personList

    "Return the list of people"

    ^PersonEditor personList! !

!PersonEditor methods !   
currentName

    "Return the name based on the first and last name fields"

    ^(self paneNamed: 'firstName') contents, ' ', (self paneNamed: 'lastName') contents! !

!SelectPersonDialog class methods ! 
wbBasicVersion

	"Private - Answer the WindowBuilder Pro version.
		Generated in: Visual Smalltalk Enterprise 3.1.0 Win32"

	^3.1! !

!PersonEditor class methods !
wbBasicVersion

	"Private - Answer the WindowBuilder Pro version.
		Generated in: Visual Smalltalk Enterprise 3.1.0 Win32"

	^3.1! !

!Person methods !
lastName

    ^lastName! !

!SelectPersonDialog methods ! 
loadList: aPane

    "Callback for the #needsContents event in the ListBox named 'personList'.
     (Generated by WindowBuilder)"

    aPane contents: self personList! !

!SelectPersonDialog methods !   
select: ignore

    "Callback for the #clicked event in an unnamed Button (contents is 'Select').
     (Generated by WindowBuilder)"

    selectedPerson := (self paneNamed: 'personListBox') selectedItem.
    self close.! !

!Person methods ! 
name

    ^firstName , ' ' , lastName! !

!Person methods !   
lastName: aString

    lastName := aString! !

!PersonEditor class methods !  
initPersonList

    "Initialize the list of people"
    " PersonEditor initPersonList "

    PersonList := (SortedCollection sortBlock: [:a :b | a lastName <= b lastName])
        add: (Person
            new firstName: 'Eric';
            lastName: 'Clayberg';
            company: 'Objectshare Systems';
            title: 'Exec. Vice President');
        add: (Person
            new firstName: 'S.';
            lastName: 'Sridhar';
            company: 'Objectshare Systems';
            title: 'Director Product Development');
        add: (Person
            new firstName: 'Robert';
            lastName: 'Yerex';
            company: 'Objectshare Systems';
            title: 'President');
        add: (Person
            new firstName: 'Dina';
            lastName: 'Fischer';
            company: 'Objectshare Systems';
            title: 'Chief Financial Officer');
        add: (Person
            new firstName: 'Dan';
            lastName: 'Rubel';
            company: 'Objectshare Systems';
            title: 'Project Manager');
        add: (Person
            new firstName: 'James';
            lastName: 'Chan';
            company: 'Objectshare Systems';
            title: 'Director of Operations');
        yourself! !

UndefinedObject removeSelector: #osiIgnoredInitializerSource!
   
"======== Initializers"!