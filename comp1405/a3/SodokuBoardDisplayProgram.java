import java.util.Arrays;

public class SodokuBoardDisplayProgram {

	public static boolean isComplete(byte[][] sodoku) {
		final byte[] DONE = {1, 2, 3, 4, 5, 6, 7, 8, 9};
		for(byte i = 0; i < 9; i++) {
			byte[] row = new byte[9];
			byte[] col = new byte[9];
			byte[] sqr = new byte[9];
			for(byte j = 0; j < 9; j++) {
				row[j] = sodoku[i][j];
				col[j] = sodoku[j][i];
				sqr[j] = sodoku[(i / 3) * 3 + j / 3][i * 3 % 9 + j % 3];
			}
			Arrays.sort(row);
			Arrays.sort(col);
			Arrays.sort(sqr);
			if(!Arrays.equals(row, DONE) || !Arrays.equals(col, DONE) || !Arrays.equals(sqr, DONE))
				return false;
		}
		return true;
	}

	public static void displayBoard(byte[][] sodoku) {
		for(byte i = 0; i < sodoku.length; i++) {
			if(i % 3 == 0)
				System.out.println("+---+---+---+");
			for(int j = 0; j < sodoku.length; j++) {
				if(j % 3 == 0)
					System.out.print('|');
				if(sodoku[i][j] == 0)
					System.out.print(' ');
				else
					System.out.print(sodoku[i][j]);
			}
			System.out.println('|');
		}
		System.out.println("+---+---+---+");
	}

	public static void main(String[] args) {
		byte[][][] boards = {{{5,3,0,0,7,0,0,0,0},{6,0,0,1,9,5,0,0,0},{0,9,8,0,0,0,0,6,0},{8,0,0,0,6,0,0,0,3},{4,0,0,8,0,3,0,0,1},{7,0,0,0,2,0,0,0,6},{0,6,0,0,0,0,2,8,0},{0,0,0,4,1,9,0,0,5},{0,0,0,0,8,0,0,7,9}},{{5,3,4,6,7,8,9,1,2},{6,7,2,1,9,5,3,4,8},{1,9,8,3,4,2,5,6,7},{8,5,9,7,6,1,4,2,3},{4,2,6,8,5,3,7,9,1},{7,1,3,9,2,4,8,5,6},{9,6,1,5,3,7,2,8,4},{2,8,7,4,1,9,6,3,5},{3,4,5,2,8,6,1,7,9}},{{5,3,4,6,7,8,9,1,2},{6,7,2,1,9,5,1,4,8},{1,9,8,3,4,2,5,6,7},{8,5,9,7,6,1,4,2,3},{4,2,6,8,5,3,7,9,1},{7,1,3,9,2,4,8,5,6},{9,6,1,5,3,7,2,8,4},{2,8,7,4,1,9,6,3,5},{3,4,5,2,8,6,1,7,9}},{{5,3,4,6,7,8,9,1,2},{6,7,2,1,9,5,3,4,8},{1,9,8,3,4,2,5,6,7},{8,5,9,7,6,1,4,2,3},{4,2,6,7,5,3,7,9,1},{7,1,3,9,2,4,8,5,6},{9,6,1,5,3,7,2,8,4},{2,8,7,4,1,9,6,3,5},{3,4,5,2,8,6,1,7,9}},{{1,2,3,4,5,6,7,8,9},{1,2,3,4,5,6,7,8,9},{1,2,3,4,5,6,7,8,9},{1,2,3,4,5,6,7,8,9},{1,2,3,4,5,6,7,8,9},{1,2,3,4,5,6,7,8,9},{1,2,3,4,5,6,7,8,9},{1,2,3,4,5,6,7,8,9},{1,2,3,4,5,6,7,8,9}},{{1,1,1,1,1,1,1,1,1},{2,2,2,2,2,2,2,2,2},{3,3,3,3,3,3,3,3,3},{4,4,4,4,4,4,4,4,4},{5,5,5,5,5,5,5,5,5},{6,6,6,6,6,6,6,6,6},{7,7,7,7,7,7,7,7,7},{8,8,8,8,8,8,8,8,8},{9,9,9,9,9,9,9,9,9}},{{1,2,3,4,5,6,7,8,9},{4,5,6,7,8,9,1,2,3},{7,8,9,1,2,3,4,5,6},{2,3,1,5,6,4,8,9,7},{5,6,4,8,9,7,2,3,1},{8,9,7,2,3,1,5,6,4},{3,1,2,6,4,5,9,7,8},{6,4,5,9,7,8,3,1,2},{9,7,8,3,1,2,6,4,5}},{{1,2,3,4,5,6,7,8,9},{2,3,1,5,6,4,8,9,7},{3,1,2,5,4,5,9,7,8},{4,5,6,7,8,9,1,2,3},{5,6,4,8,9,7,2,3,1},{6,4,5,9,7,8,3,1,2},{7,8,9,1,2,3,4,5,6},{8,9,7,2,3,1,5,6,4},{9,7,8,3,1,2,6,4,5}}};
		for(int i = 0; i < boards.length; i++) {
			displayBoard(boards[i]);
			System.out.println((i + 1) + ": " + isComplete(boards[i]));
		}
	}
}