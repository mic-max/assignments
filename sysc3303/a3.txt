2. Raw Measurements

## java.lang.management:
{Agent=1095009, PeanutButter Chef=7465927, Reference Handler=0, Jam Chef=6305537, Common-Cleaner=0, main=365122, Signal Dispatcher=0, Finalizer=0, Bread Chef=11294756}
{Agent=673622, PeanutButter Chef=8296932, Reference Handler=0, Jam Chef=6563933, Common-Cleaner=0, main=496784, Signal Dispatcher=0, Finalizer=0, Bread Chef=19537136}
{Agent=882315, PeanutButter Chef=788625, Reference Handler=0, Jam Chef=19762708, Common-Cleaner=0, main=440916, Signal Dispatcher=0, Finalizer=0, Bread Chef=5161162}
{Agent=847222, PeanutButter Chef=9132370, Reference Handler=0, Jam Chef=877859, Common-Cleaner=0, main=539433, Signal Dispatcher=0, Finalizer=0, Bread Chef=19208629}
{Agent=662969, PeanutButter Chef=641538, Reference Handler=0, Jam Chef=19224083, Common-Cleaner=0, main=547204, Signal Dispatcher=0, Finalizer=0, Bread Chef=14940144}

Average Nanoseconds:
	main  :    477,891
	Agent :    832,227
	Bread : 14,028,365
	Jam   : 10,546,824
	Peanut:  5,265,078
	------------------
	Total : 30,150,385

My measurement code slept for 20 milliseconds so an average runtime of 30 milliseconds seems reasonable enough.

## System.nanoTime:
Bread Chef took: 992 ns
PeanutButter Chef took: 753 ns
Jam Chef took: 1081 ns

3. Reasons for Inequality
Java's management is probably a lot more precise in calculating CPU time and usage statistics per thread. This high degree of precision in its measurements will be adding some overhead to the processes. Which could explain the disparity in the computed times, a few System.nanoTime calls are negligible in comparison.

4. Best Estimate
I will be accepting the time measured by java's management system which includes a 5 millisecond sleep by the chef after eating the sandwich. Letting the program run for 20ms, an average of 56 sandwiches were made and eaten. So the best estimate I have would be 0.357ms.
